{"version":3,"sources":["../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","base/Util.tsx","gpu/Blueprint.tsx","gpu/BuiltinUniforms.tsx","gpu/Executable.tsx","gpu/Gpu.tsx","gpu/FrameProducer.tsx","ui/CodeMirrorThemes.tsx","ui/LabeledField.tsx","ui/ControlPanel.tsx","ui/Display.tsx","ui/nodes/EdgeTypeFactory.tsx","ui/nodes/BufferBindingEdge.tsx","ui/nodes/QueueDependencyEdge.tsx","ui/EditableLabel.tsx","ui/nodes/Node.tsx","ui/nodes/Validation.tsx","ui/nodes/RenderNode.tsx","ui/nodes/SamplerBindingEdge.tsx","ui/nodes/TextureBindingEdge.tsx","ui/nodes/TextureNode.tsx","ui/BlueprintEditor.tsx","ui/nodes/BufferNode.tsx","ui/nodes/ComputeNode.tsx","ui/nodes/SamplerNode.tsx","ui/CodeEditor.tsx","ui/TabContainer.tsx","ui/Editor.tsx","App.tsx","AppState.tsx","presets/Basic.tsx","presets/Boids.tsx","presets/Instances.tsx","base/Debouncer.tsx","base/LocalPersistent.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","doCopy","value","traversed","Array","isArray","has","add","x","Blob","copy","entries","k","v","undefined","deepCopy","Set","deepEquals","a","b","length","every","i","canonicalize","blueprint","edges","d","BUILTIN_UNIFORMS_WGSL","Executable","gpu","shaders","shaderInfo","gpu_","blueprint_","shaders_","shaderInfo_","builtinUniforms_","buffers_","textures_","samplers_","passes_","outputDepthStencilTexture_","outputDepthStencilTextureSize_","this","width","height","outputFormat","isAcquired","messages","device","bufferBindingsByPass","textureBindingsByPass","samplerBindingsByPass","forEach","edge","type","bindingType","target","push","pipelineBindGroups","bufferUsageFlags","collectResourceUsage","pipelineId","visibility","descriptor","usageFlags","entry","binding","groups","group","bindGroup","layout","bindings","Map","set","source","storageType","GPUBufferUsage","STORAGE","buffer","UNIFORM","texture","sampler","buffers","textures","samplers","renders","computes","nodes","node","GPUShaderStage","VERTEX","FRAGMENT","COMPUTE","createBuffer","size","usage","COPY_DST","mappedAtCreation","init","data","getMappedRange","uints","Uint32Array","crypto","getRandomValues","floats","Float32Array","unmap","imageData","createImageBitmap","image","createTexture","format","GPUTextureUsage","SAMPLED","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","createSampler","getBindingResource","createView","compileBindings","unshift","bindGroupLayouts","createBindGroupLayout","createPipelineLayout","bindGroups","createBindGroup","from","resource","allPasses","vertexShader","fragmentShader","topology","stripIndexFormat","pipeline","createRenderPipeline","vertex","entryPoint","vertexEntryPoint","primitive","cullMode","fragment","targets","fragmentEntryPoint","depthStencil","depthWriteEnabled","depthCompare","depthTest","encoder","createRenderBundleEncoder","colorFormats","depthStencilFormat","setPipeline","setBindGroup","draw","numVertices","numInstances","bundle","finish","shader","createComputePipeline","compute","values","startNodes","delete","thisPhase","get","nextPhase","passId","uniforms","ArrayBuffer","writeBuffer","createCommandEncoder","destroy","pass","computePass","beginComputePass","dispatchSize","dispatch","y","z","endPass","loadValue","clear","clearColor","r","g","renderPass","beginRenderPass","colorAttachments","view","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","executeBundles","commands","submit","s","usedShaders","modules","createShaderModule","fail","m","compilationInfo","info","message","lineNum","linePos","offset","some","executable","compile_","console","log","Gpu","adapter_","device_","lost_","pendingAcquisition_","onAcquired","onLost","acquire","acquireInternal_","release","onLost_","warn","setTimeout","navigator","requestAdapter","adapter","requestDevice","lost","FrameProducer","preferredTargetTextureFormat_","lastUsedContext_","lastUsedResolution_","startTime_","lastFrameTime_","frame_","lastCompiledDescriptor_","mostRecentPendingCompile_","executable_","onShadersCompiled","onGpuAcquired_","tryCompile_","thisCompile","compile","result","canvas","resolution","context","getContext","getContextFromCanvas","stop","getPreferredFormat","configure","style","filter","now","Date","getTime","delta","updateUniforms","time","timeDelta","frame","getCurrentTexture","execute","CODE_MIRROR_THEMES","LabeledField","label","children","className","ControlPanel","props","pixelSizeToggleRef_","pixelSizeRef_","framebufferWidthRef_","framebufferHeightRef_","importRef_","saveBlueprint_","name","prompt","onSaveBlueprint","loadBlueprint_","onLoadBlueprint","toggleLoadBlueprintPanel_","copyBlueprintToClipboard_","Uint8Array","arrayBuffer","bytes","imageDataSerialized","fromByteArray","clipboard","writeText","JSON","stringify","importBlueprintFromClipboard_","togglePasteMenu_","current","serializedBlueprint","parse","toByteArray","onImportBlueprint","setState","state","pasteMenuVisible","deleteBlueprint_","onDeleteBlueprint","loadMenuVisible","toggleOptions_","optionsVisible","enterFullscreen_","document","querySelector","requestFullscreen","setAspectRatio_","onDisplayConfigChange","aspect","currentTarget","updateResolution_","framebufferSize","parseInt","isNaN","mode","pixelSize","React","createRef","displayConfig","makeAspectOption","ratio","onChange","checked","title","onClick","ref","marginLeft","codeMirrorTheme","onCodeMirrorThemeChange","theme","savedBlueprints","Component","Display","wrapperRef_","canvasRef_","pendingFrameRequest_","renderNextFrame","wrapper","clientWidth","clientHeight","render","requestAnimationFrame","cancelAnimationFrame","config","split","aspectX","aspectY","stretch","computedWrapperStyle","aspectRatio","makeEdgeType","params","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","anyData","arrowHeadType","markerEndId","path","getBezierPath","end","getMarkerEnd","getEdgeCenter","centerX","centerY","markerEnd","BufferBindingEdge","valueAsNumber","QueueDependencyEdge","EditableLabel","onClick_","enabled","isEditing","commit_","untrimmedValue","trim","onKeyDown_","key","onFocusOut_","isEmpty","editingClass","emptyClass","defaultValue","emptyText","onKeyDown","onBlur","readOnly","autoFocus","Node","onRename","resolveConnection","c","targetHandle","sourceName","targetName","isValidBindingConnection","isValidQueueConnection","colorValue","cp","toString","join","parseColor","parseComponent","index","SamplerBindingEdge","TextureBindingEdge","drawImage","NODE_TYPES","position","isValidConnection","textAlign","canvasRef","useRef","useEffect","updateCanvasImage","accept","input","file","files","Math","max","EDGE_TYPES","getUnusedKey","dict","base","hasOwnProperty","FlowErrorBounary","error","errorInfo","isPassNode","BlueprintEditor","isMounted_","update_","elements","buildGraphFromBlueprint","onConnect_","addBufferBinding_","addTextureBinding_","addSamplerBinding_","addQueueDependency_","onElementClick_","event","element","onMoveNode_","addShader_","addNode_","addEdge_","addBuffer_","addTexture_","mipLevelCount","sampleCount","addSampler_","bufferId","textureId","addRenderPass_","indexed","addComputePass_","nodeTypes","edgeTypes","elementsSelectable","nodesConnectable","nodesDraggable","onConnect","onElementClick","onNodeDragStop","update","assign","edgeId","BUILTIN_WGSL_NUM_LINES","CodeEditor","isDecorating_","onChange_","change","getValue","onUpdate_","getAllMarks","clearGutter","line","markText","ch","marker","createElement","classList","setGutterMarker","contents","onUpdate","options","keyMap","gutters","mutable","TabContainer","activeTab","renderTabs_","renderActiveTabContent_","Children","toArray","tabs","tab","active","zIndex","_","setActiveTab_","onClose","stopPropagation","Editor","removeShader_","onBlueprintChange","renameShader_","newName","App","frameProducer_","onFullscreenChange_","reconfigure","onBlueprintChange_","setBlueprint","onShadersCompiled_","onSaveBlueprint_","onLoadBlueprint_","onImportBlueprint_","onDeleteBlueprint_","onCodeMirrorThemeChange_","appState","DEFAULT_APP_STATE","Basic","render1","vertex1","fragment1","Boids","compute1","compute2","buffer1","buffer2","binding1a","binding1b","binding2","binding3","binding4","Instances","Debouncer","minDelayMs","minDelayMs_","lastInvocationMs_","pendingInvocation_","f","onCooldown","scheduleSuppressed","invokeInternal","clearTimeout","clearPendingInvocation","delay","invoke","bind","deepUpdate","isObject","LocalPersistent","initialValue","debounceMs","key_","cachedValue_","debouncer_","localForage","setItem","loadValueFromLocalStorage","serializedValue","localStorage","cachedValue","restoreLocalPersistent","asyncCachedValue","getItem","cachedLegacyValue","restoredValue","default","StrictMode","getElementById","driver","INDEXEDDB","version","storeName"],"mappings":"uNAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,mBAAoB,CACnB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,GAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,uBAAwB,CACvB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,EACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,GAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,mBAAoB,CACnB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,yBAA0B,CACzB,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,EACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,GAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,WAAY,CACX,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,GAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,C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","file":"static/js/main.91183b54.chunk.js","sourcesContent":["var map = {\n\t\"./apl/apl.js\": [\n\t\t139,\n\t\t30\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t140,\n\t\t31\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t141,\n\t\t32\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t142,\n\t\t33\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t143,\n\t\t34\n\t],\n\t\"./clike/clike.js\": [\n\t\t128,\n\t\t2\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t144,\n\t\t35\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t145,\n\t\t36\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t146,\n\t\t37\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t129,\n\t\t38\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t147,\n\t\t39\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t148,\n\t\t40\n\t],\n\t\"./css/css.js\": [\n\t\t125,\n\t\t1\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t149,\n\t\t41\n\t],\n\t\"./d/d.js\": [\n\t\t150,\n\t\t42\n\t],\n\t\"./dart/dart.js\": [\n\t\t151,\n\t\t2,\n\t\t43\n\t],\n\t\"./diff/diff.js\": [\n\t\t152,\n\t\t44\n\t],\n\t\"./django/django.js\": [\n\t\t153,\n\t\t0,\n\t\t1,\n\t\t11\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t154,\n\t\t21\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t155,\n\t\t45\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t156,\n\t\t46\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t157,\n\t\t47\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t158,\n\t\t48\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t159,\n\t\t49\n\t],\n\t\"./elm/elm.js\": [\n\t\t160,\n\t\t50\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t161,\n\t\t51\n\t],\n\t\"./factor/factor.js\": [\n\t\t162,\n\t\t22\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t163,\n\t\t52\n\t],\n\t\"./forth/forth.js\": [\n\t\t164,\n\t\t53\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t165,\n\t\t54\n\t],\n\t\"./gas/gas.js\": [\n\t\t166,\n\t\t55\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t167,\n\t\t4,\n\t\t20\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t168,\n\t\t56\n\t],\n\t\"./go/go.js\": [\n\t\t169,\n\t\t57\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t170,\n\t\t58\n\t],\n\t\"./haml/haml.js\": [\n\t\t171,\n\t\t0,\n\t\t1,\n\t\t14\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t130,\n\t\t16\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t172,\n\t\t26\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t131,\n\t\t59\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t173,\n\t\t60\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t174,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t124,\n\t\t0,\n\t\t1,\n\t\t27\n\t],\n\t\"./http/http.js\": [\n\t\t175,\n\t\t61\n\t],\n\t\"./idl/idl.js\": [\n\t\t176,\n\t\t62\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t126,\n\t\t0\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t177,\n\t\t63\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t178,\n\t\t0,\n\t\t28\n\t],\n\t\"./julia/julia.js\": [\n\t\t179,\n\t\t64\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t180,\n\t\t65\n\t],\n\t\"./lua/lua.js\": [\n\t\t181,\n\t\t66\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t136,\n\t\t4\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t182,\n\t\t67\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t183,\n\t\t68\n\t],\n\t\"./meta.js\": [\n\t\t24\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t184,\n\t\t69\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t185,\n\t\t70\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t186,\n\t\t71\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t187,\n\t\t72\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t188,\n\t\t73\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t189,\n\t\t74\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t190,\n\t\t23\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t191,\n\t\t75\n\t],\n\t\"./octave/octave.js\": [\n\t\t192,\n\t\t76\n\t],\n\t\"./oz/oz.js\": [\n\t\t193,\n\t\t77\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t194,\n\t\t78\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t195,\n\t\t0,\n\t\t79\n\t],\n\t\"./perl/perl.js\": [\n\t\t196,\n\t\t80\n\t],\n\t\"./php/php.js\": [\n\t\t197,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t17\n\t],\n\t\"./pig/pig.js\": [\n\t\t198,\n\t\t81\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t199,\n\t\t82\n\t],\n\t\"./properties/properties.js\": [\n\t\t200,\n\t\t83\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t201,\n\t\t84\n\t],\n\t\"./pug/pug.js\": [\n\t\t137,\n\t\t0,\n\t\t1,\n\t\t3\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t202,\n\t\t85\n\t],\n\t\"./python/python.js\": [\n\t\t132,\n\t\t86\n\t],\n\t\"./q/q.js\": [\n\t\t203,\n\t\t87\n\t],\n\t\"./r/r.js\": [\n\t\t204,\n\t\t88\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t205,\n\t\t89\n\t],\n\t\"./rst/rst.js\": [\n\t\t206,\n\t\t13\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t127,\n\t\t90\n\t],\n\t\"./rust/rust.js\": [\n\t\t207,\n\t\t24\n\t],\n\t\"./sas/sas.js\": [\n\t\t208,\n\t\t91\n\t],\n\t\"./sass/sass.js\": [\n\t\t134,\n\t\t1,\n\t\t92\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t209,\n\t\t93\n\t],\n\t\"./shell/shell.js\": [\n\t\t210,\n\t\t94\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t211,\n\t\t95\n\t],\n\t\"./slim/slim.js\": [\n\t\t212,\n\t\t0,\n\t\t1,\n\t\t15\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t213,\n\t\t96\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t214,\n\t\t97\n\t],\n\t\"./solr/solr.js\": [\n\t\t215,\n\t\t98\n\t],\n\t\"./soy/soy.js\": [\n\t\t216,\n\t\t0,\n\t\t1,\n\t\t18\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t217,\n\t\t99\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t218,\n\t\t100\n\t],\n\t\"./sql/sql.js\": [\n\t\t219,\n\t\t101\n\t],\n\t\"./stex/stex.js\": [\n\t\t133,\n\t\t102\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t138,\n\t\t5\n\t],\n\t\"./swift/swift.js\": [\n\t\t220,\n\t\t103\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t221,\n\t\t104\n\t],\n\t\"./textile/textile.js\": [\n\t\t222,\n\t\t105\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t223,\n\t\t106\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t224,\n\t\t107\n\t],\n\t\"./toml/toml.js\": [\n\t\t225,\n\t\t108\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t226,\n\t\t0,\n\t\t1,\n\t\t12\n\t],\n\t\"./troff/troff.js\": [\n\t\t227,\n\t\t109\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t229,\n\t\t110\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t228,\n\t\t111\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t230,\n\t\t112\n\t],\n\t\"./twig/twig.js\": [\n\t\t231,\n\t\t19\n\t],\n\t\"./vb/vb.js\": [\n\t\t232,\n\t\t113\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t233,\n\t\t114\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t234,\n\t\t115\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t235,\n\t\t116\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t236,\n\t\t117\n\t],\n\t\"./vue/vue.js\": [\n\t\t237,\n\t\t0,\n\t\t1,\n\t\t5,\n\t\t3,\n\t\t9\n\t],\n\t\"./wast/wast.js\": [\n\t\t238,\n\t\t25\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t239,\n\t\t118\n\t],\n\t\"./xml/xml.js\": [\n\t\t123,\n\t\t119\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t240,\n\t\t120\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t241,\n\t\t121\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t242,\n\t\t29\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t135,\n\t\t122\n\t],\n\t\"./z80/z80.js\": [\n\t\t243,\n\t\t123\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 120;\nmodule.exports = webpackAsyncContext;","function doCopy<T>(value: T, traversed: Set<any>): T {\n  if (Array.isArray(value)) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n    return value.map(x => doCopy(x, traversed)) as any;\n  }\n\n  if (value instanceof Blob) {\n    return value;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n\n    const copy: Record<string, any> = {};\n    for (const [k, v] of Object.entries(value)) {\n      copy[k] = doCopy(v, traversed);\n    }\n    return copy as T;\n  }\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (\n    typeof value === 'number' ||\n    typeof value === 'string' ||\n    typeof value === 'boolean'\n  ) {\n    return value;\n  }\n\n  throw new Error('value not deep-copyable');\n}\n\nexport function deepCopy<T extends Record<string, any>>(value: T): T {\n  return doCopy(value, new Set());\n}\n\nexport function deepEquals<T extends Record<string, any>>(a: T, b: T): boolean {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n    return a.every((x, i) => deepEquals(x, b[i]));\n  }\n\n  if (a instanceof Blob || b instanceof Blob) {\n    return a === b;\n  }\n\n  if (typeof a === 'object' && a !== null) {\n    if (typeof b !== 'object' || b === null) {\n      return false;\n    }\n    return (\n      Object.keys(a).length === Object.keys(b).length &&\n      Object.keys(a).every(k => deepEquals(a[k], b[k]))\n    );\n  }\n\n  return a === b;\n}\n","export interface Blueprint {\n  nodes: Record<string, NodeDescriptor>;\n  edges?: Record<string, EdgeDescriptor>;\n  shaders: Record<string, Shader>;\n}\n\nexport type NodeMap = Map<string, NodeDescriptor>;\n\nexport type NodeDescriptor =\n  | RenderNodeDescriptor\n  | ComputeNodeDescriptor\n  | BufferNodeDescriptor\n  | SamplerNodeDescriptor\n  | TextureNodeDescriptor;\n\nexport type EdgeDescriptor =\n  | BufferBindingEdgeDescriptor\n  | QueueDependencyEdgeDescriptor\n  | SamplerBindingEdgeDescriptor\n  | TextureBindingEdgeDescriptor;\n\nexport interface NodeDescriptorBase {\n  type: 'buffer' | 'render' | 'compute' | 'texture' | 'sampler' | 'binding';\n  name: string;\n  position: { x: number; y: number };\n}\n\nexport interface PipelineNodeDescriptor extends NodeDescriptorBase {\n  bindings?: string[];\n}\n\nexport interface RenderNodeDescriptor extends PipelineNodeDescriptor {\n  type: 'render';\n\n  // TODO: Configuration for primitive state, depth/stencil, multisampling\n\n  vertexShader: string;\n  vertexEntryPoint: string;\n\n  fragmentShader: string;\n  fragmentEntryPoint: string;\n\n  topology?: GPUPrimitiveTopology;\n  indexed: boolean;\n  numVertices: number;\n  numInstances: number;\n\n  clear?: boolean;\n  clearColor?: GPUColorDict;\n\n  depthTest?: GPUCompareFunction;\n}\n\nexport interface ComputeNodeDescriptor extends PipelineNodeDescriptor {\n  type: 'compute';\n  shader: string;\n  entryPoint: string;\n  dispatchSize: { x: number; y: number; z: number };\n}\n\nexport type BindingType = 'buffer' | 'sampler' | 'texture';\n\nexport type BufferInitializer = 'zero' | 'random-floats' | 'random-uints';\n\nexport interface BufferNodeDescriptor extends NodeDescriptorBase {\n  type: 'buffer';\n  size: number;\n  init?: BufferInitializer;\n}\n\nexport interface TextureNodeDescriptor extends NodeDescriptorBase {\n  type: 'texture';\n  imageData: null | Blob;\n  imageDataSerialized: null | string;\n  size: GPUExtent3DDict;\n  format: GPUTextureFormat;\n  mipLevelCount: number;\n  sampleCount: number;\n}\n\nexport interface SamplerNodeDescriptor extends NodeDescriptorBase {\n  type: 'sampler';\n\n  // TODO: Filtering, addressing, clamping, comparison, anisotropy.\n}\n\ninterface Shader {\n  name: string;\n  code: string;\n}\n\nexport interface EdgeDescriptorBase {\n  type: 'binding' | 'queue-dependency';\n  source: string;\n  target: string;\n}\n\nexport interface BindingEdgeDescriptorBase extends EdgeDescriptorBase {\n  type: 'binding';\n  bindingType: BindingType;\n  group: number;\n  binding: number;\n}\n\nexport type BufferBindingStorageType = 'storage-read' | 'storage' | 'uniform';\n\nexport interface BufferBindingEdgeDescriptor extends BindingEdgeDescriptorBase {\n  bindingType: 'buffer';\n  storageType: BufferBindingStorageType;\n}\n\nexport interface TextureBindingEdgeDescriptor\n  extends BindingEdgeDescriptorBase {\n  bindingType: 'texture';\n}\n\nexport interface SamplerBindingEdgeDescriptor\n  extends BindingEdgeDescriptorBase {\n  bindingType: 'sampler';\n}\n\nexport interface QueueDependencyEdgeDescriptor extends EdgeDescriptorBase {\n  type: 'queue-dependency';\n}\n\nexport function canonicalize(blueprint: Blueprint) {\n  for (const [, edge] of Object.entries(blueprint.edges ?? {})) {\n    const d = edge as any;\n    if (d['sourceId']) {\n      d['source'] = d['sourceId'];\n    }\n    if (d['targetId']) {\n      d['target'] = d['targetId'];\n    }\n    if (d['bufferId']) {\n      d['source'] = d['bufferId'];\n    }\n    if (d['passId']) {\n      d['targetId'] = d['passId'];\n    }\n  }\n}\n","import { UniformLayout } from './UniformLayout';\n\nexport const BUILTIN_UNIFORMS_WGSL = `// All shader sources are prefixed with the definitions below, providing a\n// set of builtin uniform inputs which are updated by the application before\n// each frame iteration.\n[[block]] struct BuiltinUniforms {\n  // The time in seconds since the application loaded.\n  time: f32;\n\n  // The time in seconds since the last frame iteration. Zero for the first\n  // frame.\n  timeDelta: f32;\n\n  // The count of the current frame. The first frame is frame 0.\n  frame: u32;\n\n  // The resolution in pixels of the main output texture displayed by the app.\n  [[align(16)]] resolution: vec2<u32>;\n};\n\n// All builtin uniforms are accessible to all shaders through this global.\n[[group(0), binding(0)]] var<uniform> builtinUniforms: BuiltinUniforms;\n`;\n\nexport const BUILTIN_UNIFORMS: UniformLayout = {\n  fields: [\n    { name: 'time', type: 'f32' },\n    { name: 'timeDelta', type: 'f32' },\n    { name: 'frame', type: 'u32' },\n    { name: 'resolution', type: { vectorType: 'vec2', componentType: 'u32' } },\n  ],\n};\n","import {\n  Blueprint,\n  BufferBindingEdgeDescriptor,\n  BufferNodeDescriptor,\n  ComputeNodeDescriptor,\n  RenderNodeDescriptor,\n  SamplerBindingEdgeDescriptor,\n  SamplerNodeDescriptor,\n  TextureBindingEdgeDescriptor,\n  TextureNodeDescriptor,\n} from './Blueprint';\nimport { Gpu } from './Gpu';\nimport { BUILTIN_UNIFORMS_WGSL } from './BuiltinUniforms';\n\nexport type ShaderCompilationMessageType = 'info' | 'warning' | 'error';\n\nexport interface ShaderCompilationMessage {\n  message: string;\n  type: ShaderCompilationMessageType;\n  lineNum: number;\n  linePos: number;\n  offset: number;\n  length: number;\n}\n\nexport interface ShaderCompilationInfo {\n  messages: ShaderCompilationMessage[];\n}\n\nexport interface CompileResult {\n  executable?: Executable;\n  shaderInfo: Record<string, ShaderCompilationInfo>;\n  messages: string[];\n}\n\ninterface CompiledComputePass {\n  type: 'compute';\n  descriptor: ComputeNodeDescriptor;\n  bindGroups: GPUBindGroup[];\n  pipeline: GPUComputePipeline;\n}\n\ninterface CompiledRenderPass {\n  type: 'render';\n  descriptor: RenderNodeDescriptor;\n  bundle: GPURenderBundle;\n}\n\ntype CompiledPass = CompiledComputePass | CompiledRenderPass;\n\nexport class Executable {\n  private gpu_: Gpu;\n  private blueprint_: Blueprint;\n  private shaders_: Record<string, GPUShaderModule>;\n  private shaderInfo_: Record<string, ShaderCompilationInfo>;\n  private builtinUniforms_: null | GPUBuffer;\n  private buffers_: Record<string, GPUBuffer>;\n  private textures_: Record<string, GPUTexture>;\n  private samplers_: Record<string, GPUSampler>;\n  private passes_: CompiledPass[];\n\n  private outputDepthStencilTexture_: null | GPUTexture;\n  private outputDepthStencilTextureSize_: GPUExtent3DDict;\n\n  constructor(\n    gpu: Gpu,\n    blueprint: Blueprint,\n    shaders: Record<string, GPUShaderModule>,\n    shaderInfo: Record<string, ShaderCompilationInfo>\n  ) {\n    this.gpu_ = gpu;\n    this.blueprint_ = blueprint;\n    this.shaders_ = shaders;\n    this.shaderInfo_ = shaderInfo;\n    this.builtinUniforms_ = null;\n    this.buffers_ = {};\n    this.textures_ = {};\n    this.samplers_ = {};\n    this.passes_ = [];\n    this.outputDepthStencilTexture_ = null;\n    this.outputDepthStencilTextureSize_ = { width: 0, height: 0 };\n  }\n\n  get gpu() {\n    return this.gpu_;\n  }\n\n  static async compile(\n    gpu: Gpu,\n    blueprint: Blueprint,\n    outputFormat: GPUTextureFormat\n  ): Promise<CompileResult> {\n    if (!gpu.isAcquired) {\n      return { shaderInfo: {}, messages: ['GPU has been lost'] };\n    }\n\n    const usedShaders: Record<string, boolean> = {};\n    for (const node of Object.values(blueprint.nodes)) {\n      if (node.type === 'render') {\n        if (node.vertexShader !== '') {\n          usedShaders[node.vertexShader] = true;\n        }\n        if (node.fragmentShader !== '') {\n          usedShaders[node.fragmentShader] = true;\n        }\n      } else if (node.type === 'compute' && node.shader !== '') {\n        usedShaders[node.shader] = true;\n      }\n    }\n\n    const device = gpu.device!;\n    const modules: Record<string, GPUShaderModule> = {};\n    for (const [id, s] of Object.entries(blueprint.shaders)) {\n      modules[id] = device.createShaderModule({\n        code: BUILTIN_UNIFORMS_WGSL + s.code,\n      });\n    }\n\n    let fail: boolean = false;\n    const shaderInfo: Record<string, ShaderCompilationInfo> = {};\n    for (const [id, m] of Object.entries(modules)) {\n      const info = await m.compilationInfo();\n      shaderInfo[id] = {\n        messages: info.messages.map(m => ({\n          message: m.message,\n          type: m.type,\n          lineNum: m.lineNum,\n          linePos: m.linePos,\n          offset: m.offset,\n          length: m.length,\n        })),\n      };\n\n      for (const message of info.messages) {\n        if (message.type === 'error' && usedShaders[id]) {\n          fail = true;\n        }\n      }\n      if (\n        info.messages.some(message => message.type === 'error') &&\n        usedShaders[id]\n      ) {\n        fail = true;\n      }\n    }\n    if (fail) {\n      return {\n        shaderInfo,\n        messages: ['One or more shaders failed to compile'],\n      };\n    }\n\n    const executable = new Executable(gpu, blueprint, modules, shaderInfo);\n    let messages: string[] = [];\n    try {\n      messages = await executable.compile_(outputFormat);\n    } catch (e) {\n      console.log('Compilation failed: ' + e.message);\n      return { shaderInfo: {}, messages: [...messages, e.message] };\n    }\n    return { executable, shaderInfo, messages };\n  }\n\n  async compile_(outputFormat: GPUTextureFormat): Promise<string[]> {\n    if (!this.gpu_.isAcquired) {\n      return ['GPU has been lost'];\n    }\n\n    const messages: string[] = [];\n    const device = this.gpu_.device!;\n\n    interface PipelineBindGroup {\n      layout: GPUBindGroupLayoutEntry[];\n      bindings: Map<number, string>;\n    }\n\n    const bufferBindingsByPass: Record<string, BufferBindingEdgeDescriptor[]> =\n      {};\n    const textureBindingsByPass: Record<\n      string,\n      TextureBindingEdgeDescriptor[]\n    > = {};\n    const samplerBindingsByPass: Record<\n      string,\n      SamplerBindingEdgeDescriptor[]\n    > = {};\n    Object.entries(this.blueprint_.edges ?? {}).forEach(([id, edge]) => {\n      if (edge.type !== 'binding') {\n        return;\n      }\n      switch (edge.bindingType) {\n        case 'buffer':\n          if (!bufferBindingsByPass[edge.target]) {\n            bufferBindingsByPass[edge.target] = [];\n          }\n          bufferBindingsByPass[edge.target].push(edge);\n          break;\n\n        case 'texture':\n          if (!textureBindingsByPass[edge.target]) {\n            textureBindingsByPass[edge.target] = [];\n          }\n          textureBindingsByPass[edge.target].push(edge);\n          break;\n\n        case 'sampler':\n          if (!samplerBindingsByPass[edge.target]) {\n            samplerBindingsByPass[edge.target] = [];\n          }\n          samplerBindingsByPass[edge.target].push(edge);\n          break;\n      }\n    });\n\n    const pipelineBindGroups: Record<string, PipelineBindGroup[]> = {};\n    const bufferUsageFlags: Record<string, GPUBufferUsageFlags> = {};\n    const collectResourceUsage = (\n      pipelineId: string,\n      visibility: GPUShaderStageFlags\n    ) => {\n      for (const edge of bufferBindingsByPass[pipelineId] ?? []) {\n        const descriptor = edge as BufferBindingEdgeDescriptor;\n        let usageFlags = 0;\n        const entry: GPUBindGroupLayoutEntry = {\n          binding: descriptor.binding,\n          visibility,\n        };\n        const groups = pipelineBindGroups[pipelineId] ?? [];\n        pipelineBindGroups[pipelineId] = groups;\n\n        const group = descriptor.group;\n        const bindGroup = groups[group] ?? { layout: [], bindings: new Map() };\n        groups[group] = bindGroup;\n        bindGroup.layout.push(entry);\n        bindGroup.bindings.set(descriptor.binding, edge.source);\n\n        switch (descriptor.storageType) {\n          case 'storage-read':\n            usageFlags = GPUBufferUsage.STORAGE;\n            entry.buffer = { type: 'read-only-storage' };\n            break;\n\n          case 'storage':\n            usageFlags = GPUBufferUsage.STORAGE;\n            entry.buffer = { type: 'storage' };\n            break;\n\n          case 'uniform':\n            usageFlags = GPUBufferUsage.UNIFORM;\n            entry.buffer = { type: 'uniform' };\n            break;\n        }\n\n        if (usageFlags !== 0) {\n          bufferUsageFlags[edge.source] =\n            (bufferUsageFlags[edge.source] ?? 0) | usageFlags;\n        }\n      }\n\n      for (const edge of textureBindingsByPass[pipelineId] ?? []) {\n        const descriptor = edge as TextureBindingEdgeDescriptor;\n        const entry: GPUBindGroupLayoutEntry = {\n          binding: descriptor.binding,\n          visibility,\n        };\n        const groups = pipelineBindGroups[pipelineId] ?? [];\n        pipelineBindGroups[pipelineId] = groups;\n\n        const group = descriptor.group;\n        const bindGroup = groups[group] ?? { layout: [], bindings: new Map() };\n        groups[group] = bindGroup;\n        bindGroup.layout.push(entry);\n        bindGroup.bindings.set(descriptor.binding, edge.source);\n        entry.texture = {};\n      }\n\n      for (const edge of samplerBindingsByPass[pipelineId] ?? []) {\n        const descriptor = edge as SamplerBindingEdgeDescriptor;\n        const entry: GPUBindGroupLayoutEntry = {\n          binding: descriptor.binding,\n          visibility,\n        };\n        const groups = pipelineBindGroups[pipelineId] ?? [];\n        pipelineBindGroups[pipelineId] = groups;\n\n        const group = descriptor.group;\n        const bindGroup = groups[group] ?? { layout: [], bindings: new Map() };\n        groups[group] = bindGroup;\n        bindGroup.layout.push(entry);\n        bindGroup.bindings.set(descriptor.binding, edge.source);\n        entry.sampler = {};\n      }\n    };\n\n    const buffers: Record<string, BufferNodeDescriptor> = {};\n    const textures: Record<string, TextureNodeDescriptor> = {};\n    const samplers: Record<string, SamplerNodeDescriptor> = {};\n    const renders: Record<string, RenderNodeDescriptor> = {};\n    const computes: Record<string, ComputeNodeDescriptor> = {};\n    for (const [id, node] of Object.entries(this.blueprint_.nodes)) {\n      switch (node.type) {\n        case 'buffer':\n          buffers[id] = node;\n          break;\n\n        case 'texture':\n          textures[id] = node;\n          break;\n\n        case 'sampler':\n          samplers[id] = node;\n          break;\n\n        case 'render':\n          renders[id] = node;\n          collectResourceUsage(\n            id,\n            GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT\n          );\n          break;\n\n        case 'compute':\n          computes[id] = node;\n          collectResourceUsage(id, GPUShaderStage.COMPUTE);\n          break;\n      }\n    }\n\n    this.builtinUniforms_ = device.createBuffer({\n      size: 24,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    for (const [id, node] of Object.entries(buffers)) {\n      const flags = bufferUsageFlags[id];\n      if (!flags) {\n        continue;\n      }\n\n      const mappedAtCreation = node.init !== 'zero';\n      const buffer = device.createBuffer({\n        size: node.size,\n        usage: bufferUsageFlags[id],\n        mappedAtCreation,\n      });\n      if (mappedAtCreation) {\n        const data = buffer.getMappedRange(0, node.size);\n        if (node.init === 'random-floats') {\n          const uints = new Uint32Array(node.size / 4);\n          crypto.getRandomValues(uints);\n\n          const floats = new Float32Array(data);\n          uints.forEach((x, i) => (floats[i] = x / 2 ** 31 - 1));\n        } else if (node.init === 'random-uints') {\n          const uints = new Uint32Array(data);\n          crypto.getRandomValues(uints);\n        }\n        buffer.unmap();\n      }\n      this.buffers_[id] = buffer;\n    }\n\n    for (const [id, node] of Object.entries(textures)) {\n      if (!node.imageData) {\n        continue;\n      }\n      const image = await createImageBitmap(node.imageData);\n      const size = { width: image.width, height: image.height };\n      const texture = device.createTexture({\n        size,\n        format: 'rgba8unorm',\n        usage:\n          GPUTextureUsage.SAMPLED |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      device.queue.copyExternalImageToTexture(\n        { source: image },\n        { texture },\n        size\n      );\n      this.textures_[id] = texture;\n    }\n\n    for (const [id, node] of Object.entries(samplers)) {\n      this.samplers_[id] = device.createSampler();\n    }\n\n    const getBindingResource = (id: string): GPUBindingResource => {\n      if (id === 'builtin-uniforms') {\n        return { buffer: this.builtinUniforms_! };\n      }\n\n      const node = this.blueprint_.nodes[id];\n      if (!node) {\n        throw new Error(`unknown node ${id}`);\n      }\n\n      switch (node.type) {\n        case 'buffer':\n          const buffer = this.buffers_[id];\n          if (!buffer) {\n            throw new Error(`unknown buffer ${id}`);\n          }\n          return { buffer };\n\n        case 'texture':\n          const texture = this.textures_[id];\n          if (!texture) {\n            throw new Error(`unknown texture ${id}`);\n          }\n          return texture.createView();\n\n        case 'sampler':\n          const sampler = this.samplers_[id];\n          if (!sampler) {\n            throw new Error(`unknown sampler ${id}`);\n          }\n          return sampler;\n\n        default:\n          throw new Error(`unsupported binding resource type '${node.type}'`);\n      }\n    };\n\n    const compileBindings = (id: string) => {\n      const groups = pipelineBindGroups[id] ?? [];\n\n      if (!groups[0]) {\n        groups[0] = { layout: [], bindings: new Map() };\n      }\n      const visibility =\n        this.blueprint_.nodes[id]?.type === 'render'\n          ? GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT\n          : GPUShaderStage.COMPUTE;\n      groups[0].layout.unshift({\n        binding: 0,\n        visibility,\n        buffer: { type: 'uniform' },\n      });\n      groups[0].bindings.set(0, 'builtin-uniforms');\n\n      const bindGroupLayouts = groups.map((group, i) => {\n        return device.createBindGroupLayout({ entries: group.layout ?? [] });\n      });\n      const layout = device.createPipelineLayout({ bindGroupLayouts });\n      const bindGroups = groups.map((group, i) => {\n        return device.createBindGroup({\n          layout: bindGroupLayouts[i],\n          entries: Array.from(group.bindings.entries()).map(\n            ([binding, id]) => ({ binding, resource: getBindingResource(id) })\n          ),\n        });\n      });\n      return { layout, bindGroups };\n    };\n\n    const allPasses: Map<string, CompiledPass> = new Map();\n    for (const [id, node] of Object.entries(renders)) {\n      const vertexShader = this.shaders_[node.vertexShader];\n      const fragmentShader = this.shaders_[node.fragmentShader];\n      if (!vertexShader || !fragmentShader) {\n        continue;\n      }\n\n      const { layout, bindGroups } = compileBindings(id);\n      const topology = node.topology ?? 'triangle-list';\n      const stripIndexFormat =\n        topology === 'line-strip' || topology === 'triangle-strip'\n          ? 'uint32'\n          : undefined;\n      const pipeline = device.createRenderPipeline({\n        layout,\n        vertex: {\n          module: this.shaders_[node.vertexShader],\n          entryPoint: node.vertexEntryPoint,\n        },\n        primitive: {\n          topology,\n          stripIndexFormat,\n          cullMode: 'none',\n        },\n        fragment: {\n          targets: [{ format: outputFormat }],\n          module: this.shaders_[node.fragmentShader],\n          entryPoint: node.fragmentEntryPoint,\n        },\n        depthStencil: {\n          format: 'depth24plus-stencil8',\n          depthWriteEnabled: true,\n          depthCompare: node.depthTest ?? 'always',\n        },\n      });\n      const encoder = device.createRenderBundleEncoder({\n        colorFormats: [outputFormat],\n        depthStencilFormat: 'depth24plus-stencil8',\n      });\n      encoder.setPipeline(pipeline);\n      bindGroups.forEach((group, i) => {\n        if (group) {\n          encoder.setBindGroup(i, group);\n        }\n      });\n      encoder.draw(node.numVertices, node.numInstances);\n      allPasses.set(id, {\n        type: 'render',\n        descriptor: node,\n        bundle: encoder.finish(),\n      });\n    }\n\n    for (const [id, node] of Object.entries(computes)) {\n      const shader = this.shaders_[node.shader];\n      if (!shader) {\n        continue;\n      }\n\n      const { layout, bindGroups } = compileBindings(id);\n      const pipeline = device.createComputePipeline({\n        layout,\n        compute: {\n          module: this.shaders_[node.shader],\n          entryPoint: node.entryPoint,\n        },\n      });\n      allPasses.set(id, {\n        type: 'compute',\n        descriptor: node,\n        bindGroups,\n        pipeline,\n      });\n    }\n\n    // Build an ordered list of passes based on the queueing dependency graph.\n    const edges = Object.values(this.blueprint_.edges ?? {});\n    const targets: Map<string, string> = new Map();\n    const startNodes: Set<string> = new Set(allPasses.keys());\n    for (const edge of edges) {\n      if (edge.type !== 'queue-dependency') {\n        continue;\n      }\n      targets.set(edge.source, edge.target);\n      startNodes.delete(edge.target);\n    }\n    if (startNodes.size === 0) {\n      throw new Error('No usable passes compiled');\n    }\n\n    let thisPhase = Array.from(startNodes);\n    while (this.passes_.length < allPasses.size) {\n      this.passes_.push(...thisPhase.map(id => allPasses.get(id)!));\n      const nextPhase = [];\n      for (const passId of thisPhase) {\n        const target = targets.get(passId);\n        if (target) {\n          nextPhase.push(target);\n        }\n      }\n      thisPhase = nextPhase;\n    }\n\n    return messages;\n  }\n\n  updateUniforms(uniforms: Record<string, any>) {\n    if (!this.gpu_.isAcquired || !this.builtinUniforms_) {\n      return;\n    }\n\n    const device = this.gpu_.device!;\n    const data = new ArrayBuffer(24);\n    const floats = new Float32Array(data);\n    const uints = new Uint32Array(data);\n    floats[0] = (uniforms['time'] as number) ?? 0;\n    floats[1] = (uniforms['timeDelta'] as number) ?? 0;\n    uints[2] = (uniforms['frame'] as number) ?? 0;\n    uints[4] = uniforms['resolution']?.width ?? 1;\n    uints[5] = uniforms['resolution']?.height ?? 1;\n    device.queue.writeBuffer(this.builtinUniforms_, 0, data, 0, 24);\n  }\n\n  execute(texture: GPUTexture, { width, height }: GPUExtent3DDict) {\n    if (!this.gpu_.isAcquired) {\n      return;\n    }\n\n    const device = this.gpu_.device!;\n    const encoder = device.createCommandEncoder();\n\n    // TODO: configurable depth/stencil state\n    if (\n      this.outputDepthStencilTexture_ === null ||\n      this.outputDepthStencilTextureSize_.width !== width ||\n      this.outputDepthStencilTextureSize_.height !== height\n    ) {\n      if (this.outputDepthStencilTexture_ !== null) {\n        this.outputDepthStencilTexture_.destroy();\n        this.outputDepthStencilTexture_ = null;\n      }\n\n      this.outputDepthStencilTexture_ = device.createTexture({\n        size: { width, height },\n        format: 'depth24plus-stencil8',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      this.outputDepthStencilTextureSize_ = { width, height };\n    }\n\n    for (const pass of this.passes_) {\n      if (pass.type === 'compute') {\n        const computePass = encoder.beginComputePass();\n        const dispatchSize = pass.descriptor.dispatchSize;\n        computePass.setPipeline(pass.pipeline);\n        pass.bindGroups.forEach((group, i) => {\n          if (group) {\n            computePass.setBindGroup(i, group);\n          }\n        });\n        computePass.dispatch(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n        computePass.endPass();\n      } else {\n        const loadValue = pass.descriptor.clear\n          ? pass.descriptor.clearColor ?? { r: 0, g: 0, b: 0, a: 1 }\n          : ('load' as const);\n        const renderPass = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              // @ts-ignore\n              view: texture.createView(),\n              loadValue,\n              storeOp: 'store' as const,\n            },\n          ],\n          depthStencilAttachment: {\n            view: this.outputDepthStencilTexture_.createView(),\n            depthLoadValue: pass.descriptor.clear ? 1 : 'load',\n            depthStoreOp: 'store',\n            stencilLoadValue: 1,\n            stencilStoreOp: 'store',\n          },\n        });\n        renderPass.executeBundles([pass.bundle]);\n        renderPass.endPass();\n      }\n    }\n\n    const commands = encoder.finish();\n    device.queue.submit([commands]);\n  }\n}\n","const REACQUIRE_ON_LOST_DELAY_MS = 1000;\n\ntype AcquiredHandler = (() => void) | (() => Promise<void>);\ntype LostHandler = (() => void) | (() => Promise<void>);\n\nexport class Gpu {\n  private adapter_: null | GPUAdapter;\n  private device_: null | GPUDevice;\n  private lost_: boolean;\n  private pendingAcquisition_: null | Promise<void>;\n\n  onAcquired: null | AcquiredHandler;\n  onLost: null | LostHandler;\n\n  constructor() {\n    this.adapter_ = null;\n    this.device_ = null;\n    this.lost_ = false;\n    this.pendingAcquisition_ = null;\n    this.onAcquired = null;\n    this.onLost = null;\n    this.acquire();\n  }\n\n  get isAcquired() {\n    return this.adapter_ !== null;\n  }\n  get isLost() {\n    return !this.isAcquired;\n  }\n  get adapter() {\n    return this.adapter_;\n  }\n  get device() {\n    return this.device_;\n  }\n\n  acquire = async () => {\n    if (this.pendingAcquisition_ === null) {\n      this.pendingAcquisition_ = this.acquireInternal_();\n    }\n    return this.pendingAcquisition_;\n  };\n\n  release = () => {\n    if (!this.isAcquired) {\n      throw new Error('not acquired');\n    }\n\n    this.adapter_ = null;\n    this.device_ = null;\n  };\n\n  async acquireInternal_() {\n    if (this.isAcquired) {\n      throw new Error('already acquired.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('no webgpu adapter available');\n    }\n\n    try {\n      const device = await adapter.requestDevice();\n      if (!device) {\n        throw new Error('no webgpu device available');\n      }\n      this.device_ = device;\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.pendingAcquisition_ = null;\n    this.adapter_ = adapter;\n    this.device_!.lost.then(this.onLost_);\n    if (this.onAcquired !== null) {\n      await this.onAcquired();\n    }\n  }\n\n  onLost_ = async () => {\n    console.warn('Lost GPU. Reacquiring after short delay...');\n\n    this.adapter_ = null;\n    this.device_ = null;\n    if (this.onLost != null) {\n      await this.onLost();\n    }\n    await new Promise(resolve =>\n      setTimeout(resolve, REACQUIRE_ON_LOST_DELAY_MS)\n    );\n  };\n}\n","import { deepCopy, deepEquals } from '../base/Util';\nimport { Blueprint } from './Blueprint';\nimport { CompileResult, Executable, ShaderCompilationInfo } from './Executable';\nimport { Gpu } from './Gpu';\n\nconst getContextFromCanvas = (\n  canvas: HTMLCanvasElement\n): null | GPUCanvasContext => {\n  const context = canvas.getContext('webgpu');\n  if (context === null) {\n    return null;\n  }\n\n  // @ts-ignore\n  return context as GPUCanvasContext;\n};\n\nexport class FrameProducer {\n  private gpu_: Gpu;\n  private preferredTargetTextureFormat_: GPUTextureFormat;\n\n  private lastUsedContext_?: GPUCanvasContext;\n  private lastUsedResolution_?: GPUExtent3DDict;\n\n  private startTime_?: number;\n  private lastFrameTime_?: number;\n  private frame_: number;\n\n  private blueprint_: null | Blueprint;\n  private lastCompiledDescriptor_: null | Blueprint;\n  private mostRecentPendingCompile_: null | Promise<CompileResult>;\n  private executable_: null | Executable;\n\n  onShadersCompiled?: (info: Record<string, ShaderCompilationInfo>) => void;\n\n  constructor() {\n    this.gpu_ = new Gpu();\n    this.gpu_.onAcquired = this.onGpuAcquired_;\n\n    this.frame_ = 0;\n\n    this.blueprint_ = null;\n    this.lastCompiledDescriptor_ = null;\n    this.mostRecentPendingCompile_ = null;\n    this.executable_ = null;\n\n    this.preferredTargetTextureFormat_ = 'bgra8unorm';\n  }\n\n  reconfigure() {\n    this.lastCompiledDescriptor_ = null;\n    this.executable_ = null;\n    this.tryCompile_();\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    if (this.blueprint_ && deepEquals(this.blueprint_, blueprint)) {\n      return;\n    }\n\n    this.blueprint_ = deepCopy(blueprint);\n    this.executable_ = null;\n    this.tryCompile_();\n  }\n\n  stop() {\n    this.blueprint_ = null;\n    this.executable_ = null;\n  }\n\n  render(canvas: HTMLCanvasElement, resolution: GPUExtent3DDict) {\n    if (!this.gpu_ || !this.gpu_.isAcquired) {\n      return null;\n    }\n\n    const context = getContextFromCanvas(canvas);\n    if (context === null) {\n      this.stop();\n      throw new Error('no webgpu context');\n    }\n\n    const device = this.gpu_.device!;\n    const outputFormat: GPUTextureFormat =\n      // @ts-ignore\n      context.getPreferredFormat(this.gpu_.adapter!);\n\n    if (\n      !this.lastUsedContext_ ||\n      !this.lastUsedResolution_ ||\n      this.lastUsedContext_ !== context ||\n      this.lastUsedResolution_.width !== resolution.width ||\n      this.lastUsedResolution_.height !== resolution.height\n    ) {\n      // @ts-ignore\n      context.configure({\n        device,\n        format: outputFormat,\n        size: { ...resolution },\n      });\n      this.lastUsedResolution_ = { ...resolution };\n    }\n\n    if (this.preferredTargetTextureFormat_ !== outputFormat) {\n      this.preferredTargetTextureFormat_ = outputFormat;\n      this.executable_ = null;\n    }\n\n    if (!this.executable_) {\n      if (!this.mostRecentPendingCompile_) {\n        this.tryCompile_();\n      }\n      return;\n    }\n\n    // This is an egregious hack to get consistent nearest-neighbor filtering on\n    // a scaled-up canvas texture in Chrome. See crbug.com/1044590.\n    canvas.style.filter = 'blur(0px)';\n\n    const now = new Date().getTime();\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n    const delta = now - (this.lastFrameTime_ ?? now);\n    this.lastFrameTime_ = now;\n    this.executable_.updateUniforms({\n      time: (now - this.startTime_) / 1000,\n      timeDelta: delta / 1000,\n      frame: this.frame_++,\n      resolution,\n    });\n\n    // @ts-ignore\n    const target = context.getCurrentTexture() as GPUTexture;\n    this.executable_.execute(target, resolution);\n  }\n\n  onGpuAcquired_ = () => {\n    this.executable_ = null;\n    this.tryCompile_();\n  };\n\n  tryCompile_ = async () => {\n    if (!this.gpu_.isAcquired || !this.blueprint_) {\n      return;\n    }\n\n    if (\n      this.lastCompiledDescriptor_ &&\n      deepEquals(this.lastCompiledDescriptor_, this.blueprint_)\n    ) {\n      return;\n    }\n\n    const descriptor = this.blueprint_;\n    const thisCompile = Executable.compile(\n      this.gpu_,\n      descriptor,\n      this.preferredTargetTextureFormat_\n    );\n    this.mostRecentPendingCompile_ = thisCompile;\n    const result = await thisCompile;\n    if (thisCompile !== this.mostRecentPendingCompile_) {\n      return;\n    }\n\n    this.lastCompiledDescriptor_ = descriptor;\n    this.mostRecentPendingCompile_ = null;\n    if (this.onShadersCompiled) {\n      this.onShadersCompiled(result.shaderInfo);\n    }\n    this.executable_ = result.executable ?? null;\n  };\n}\n","import 'codemirror/theme/3024-day.css';\nimport 'codemirror/theme/3024-night.css';\nimport 'codemirror/theme/abbott.css';\nimport 'codemirror/theme/abcdef.css';\nimport 'codemirror/theme/ambiance-mobile.css';\nimport 'codemirror/theme/ambiance.css';\nimport 'codemirror/theme/ayu-dark.css';\nimport 'codemirror/theme/ayu-mirage.css';\nimport 'codemirror/theme/base16-dark.css';\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/bespin.css';\nimport 'codemirror/theme/blackboard.css';\nimport 'codemirror/theme/cobalt.css';\nimport 'codemirror/theme/colorforth.css';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/duotone-dark.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/theme/elegant.css';\nimport 'codemirror/theme/erlang-dark.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/theme/hopscotch.css';\nimport 'codemirror/theme/icecoder.css';\nimport 'codemirror/theme/idea.css';\nimport 'codemirror/theme/isotope.css';\nimport 'codemirror/theme/juejin.css';\nimport 'codemirror/theme/lesser-dark.css';\nimport 'codemirror/theme/liquibyte.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/theme/material-darker.css';\nimport 'codemirror/theme/material-ocean.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/mbo.css';\nimport 'codemirror/theme/mdn-like.css';\nimport 'codemirror/theme/midnight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/moxer.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/theme/neo.css';\nimport 'codemirror/theme/night.css';\nimport 'codemirror/theme/nord.css';\nimport 'codemirror/theme/oceanic-next.css';\nimport 'codemirror/theme/panda-syntax.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/paraiso-light.css';\nimport 'codemirror/theme/pastel-on-dark.css';\nimport 'codemirror/theme/railscasts.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/theme/seti.css';\nimport 'codemirror/theme/shadowfox.css';\nimport 'codemirror/theme/solarized.css';\nimport 'codemirror/theme/ssms.css';\nimport 'codemirror/theme/the-matrix.css';\nimport 'codemirror/theme/tomorrow-night-bright.css';\nimport 'codemirror/theme/tomorrow-night-eighties.css';\nimport 'codemirror/theme/ttcn.css';\nimport 'codemirror/theme/twilight.css';\nimport 'codemirror/theme/vibrant-ink.css';\nimport 'codemirror/theme/xq-dark.css';\nimport 'codemirror/theme/xq-light.css';\nimport 'codemirror/theme/yeti.css';\nimport 'codemirror/theme/yonce.css';\nimport 'codemirror/theme/zenburn.css';\n\nexport const CODE_MIRROR_THEMES = [\n  '3024-day',\n  '3024-night',\n  'abbott',\n  'abcdef',\n  'ambiance-mobile',\n  'ambiance',\n  'ayu-dark',\n  'ayu-mirage',\n  'base16-dark',\n  'base16-light',\n  'bespin',\n  'blackboard',\n  'cobalt',\n  'colorforth',\n  'darcula',\n  'dracula',\n  'duotone-dark',\n  'duotone-light',\n  'eclipse',\n  'elegant',\n  'erlang-dark',\n  'gruvbox-dark',\n  'hopscotch',\n  'icecoder',\n  'idea',\n  'isotope',\n  'juejin',\n  'lesser-dark',\n  'liquibyte',\n  'lucario',\n  'material-darker',\n  'material-ocean',\n  'material-palenight',\n  'material',\n  'mbo',\n  'mdn-like',\n  'midnight',\n  'monokai',\n  'moxer',\n  'neat',\n  'neo',\n  'night',\n  'nord',\n  'oceanic-next',\n  'panda-syntax',\n  'paraiso-dark',\n  'paraiso-light',\n  'pastel-on-dark',\n  'railscasts',\n  'rubyblue',\n  'seti',\n  'shadowfox',\n  'solarized',\n  'ssms',\n  'the-matrix',\n  'tomorrow-night-bright',\n  'tomorrow-night-eighties',\n  'ttcn',\n  'twilight',\n  'vibrant-ink',\n  'xq-dark',\n  'xq-light',\n  'yeti',\n  'yonce',\n  'zenburn',\n];\n","import './LabeledField.css';\n\nimport React from 'react';\n\ninterface Props {\n  label: string;\n  children: React.ReactNode;\n}\n\nexport const LabeledField = ({ label, children }: Props) => {\n  return (\n    <div className=\"LabeledField\">\n      <div className=\"Label\">{label}</div>\n      <div className=\"Field\">{children}</div>\n    </div>\n  );\n};\n","import './ControlPanel.css';\n\nimport React from 'react';\nimport { toByteArray, fromByteArray } from 'base64-js';\n\nimport { deepCopy } from '../base/Util';\nimport { Blueprint } from '../gpu/Blueprint';\nimport { CODE_MIRROR_THEMES } from './CodeMirrorThemes';\nimport { DisplayConfig } from './Display';\nimport { LabeledField } from './LabeledField';\n\ninterface Props {\n  blueprint: Blueprint;\n  displayConfig: DisplayConfig;\n  onDisplayConfigChange: (change: Partial<DisplayConfig>) => void;\n  savedBlueprints: Record<string, Blueprint>;\n  onSaveBlueprint: (name: string) => void;\n  onLoadBlueprint: (name: string) => void;\n  onImportBlueprint: (blueprint: Blueprint) => void;\n  onDeleteBlueprint: (name: string) => void;\n  codeMirrorTheme: string;\n  onCodeMirrorThemeChange: (name: string) => void;\n}\n\ninterface State {\n  optionsVisible: boolean;\n  loadMenuVisible: boolean;\n  pasteMenuVisible: boolean;\n}\n\nexport class ControlPanel extends React.Component<Props, State> {\n  private pixelSizeToggleRef_: React.RefObject<HTMLInputElement>;\n  private pixelSizeRef_: React.RefObject<HTMLInputElement>;\n  private framebufferWidthRef_: React.RefObject<HTMLInputElement>;\n  private framebufferHeightRef_: React.RefObject<HTMLInputElement>;\n  private importRef_: React.RefObject<HTMLTextAreaElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      optionsVisible: false,\n      loadMenuVisible: false,\n      pasteMenuVisible: false,\n    };\n\n    this.pixelSizeToggleRef_ = React.createRef();\n    this.pixelSizeRef_ = React.createRef();\n    this.framebufferWidthRef_ = React.createRef();\n    this.framebufferHeightRef_ = React.createRef();\n    this.importRef_ = React.createRef();\n  }\n\n  render() {\n    const displayConfig = this.props.displayConfig;\n    const makeAspectOption = (ratio: string) => (\n      <label>\n        <input\n          type=\"radio\"\n          name=\"aspect\"\n          value={ratio}\n          onChange={this.setAspectRatio_}\n          checked={ratio === displayConfig.aspect}\n        />\n        {ratio}\n      </label>\n    );\n\n    return (\n      <div className=\"ControlPanel\">\n        <button\n          className=\"Toggle\"\n          title=\"Options\"\n          onClick={this.toggleOptions_}\n        >\n          ⚙️\n        </button>\n        <button\n          className=\"Toggle\"\n          title=\"Toggle Fullscreen\"\n          onClick={this.enterFullscreen_}\n        >\n          🖥️\n        </button>\n        {this.state.optionsVisible && (\n          <div className=\"OptionsPanel\">\n            <h1>Display Options</h1>\n            <h2>Aspect Ratio</h2>\n            {makeAspectOption('None')}\n            {makeAspectOption('1:1')}\n            {makeAspectOption('4:3')}\n            {makeAspectOption('16:9')}\n            {makeAspectOption('16:10')}\n            <h2>Resolution</h2>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"pixel\"\n                ref={this.pixelSizeToggleRef_}\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'pixel'}\n              />\n              Fixed Pixel Size\n              <input\n                type=\"number\"\n                name=\"pixelSize\"\n                value={displayConfig.resolution.pixelSize ?? 1}\n                ref={this.pixelSizeRef_}\n                style={{ width: '3em', marginLeft: '1em' }}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"framebuffer\"\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'framebuffer'}\n              />\n              Fixed Framebuffer Size\n              <input\n                type=\"text\"\n                name=\"framebufferWidth\"\n                style={{ width: '4em', marginLeft: '1em' }}\n                ref={this.framebufferWidthRef_}\n                value={displayConfig.resolution.framebufferSize?.width ?? 4}\n                onChange={this.updateResolution_}\n              />\n              x\n              <input\n                type=\"text\"\n                name=\"framebufferHeight\"\n                style={{ width: '4em' }}\n                ref={this.framebufferHeightRef_}\n                value={displayConfig.resolution.framebufferSize?.height ?? 4}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <h1>Editor Options</h1>\n            <LabeledField label=\"Theme\">\n              <select\n                value={this.props.codeMirrorTheme}\n                onChange={e =>\n                  this.props.onCodeMirrorThemeChange(e.currentTarget.value)\n                }\n              >\n                {CODE_MIRROR_THEMES.map(theme => {\n                  return (\n                    <option key={theme} value={theme}>\n                      {theme}\n                    </option>\n                  );\n                })}\n              </select>\n            </LabeledField>\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.saveBlueprint_}\n          title=\"Save Blueprint\"\n        >\n          💾\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.toggleLoadBlueprintPanel_}\n          title=\"Load Blueprint\"\n        >\n          📂\n        </button>\n        {this.state.loadMenuVisible && (\n          <div className=\"LoadBlueprintPanel\">\n            <h1>Saved Shaders</h1>\n            {Object.entries(this.props.savedBlueprints).map(\n              ([name, blueprint]) => {\n                return (\n                  <div key={name} className=\"LoadMenuItem\">\n                    <div\n                      className=\"LoadMenuName\"\n                      onClick={() => this.loadBlueprint_(name)}\n                    >\n                      {name}\n                    </div>\n                    <button\n                      className=\"LoadMenuRemove\"\n                      onClick={() => this.deleteBlueprint_(name)}\n                    >\n                      x\n                    </button>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.copyBlueprintToClipboard_}\n          title=\"Copy Blueprint To Clipboard\"\n        >\n          📋\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.togglePasteMenu_}\n          title=\"Paste Blueprint From Clipboard\"\n        >\n          ⬇\n        </button>\n        {this.state.pasteMenuVisible && (\n          <div className=\"PasteBlueprintPanel\">\n            <h1>Import From Clipboard</h1>\n            Paste it here:\n            <textarea ref={this.importRef_} />\n            <button title=\"Import\" onClick={this.importBlueprintFromClipboard_}>\n              Import\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  saveBlueprint_ = () => {\n    const name = prompt('Name it!');\n    if (name === null || name === '') {\n      return;\n    }\n\n    this.props.onSaveBlueprint(name);\n  };\n\n  loadBlueprint_ = (name: string) => {\n    this.props.onLoadBlueprint(name);\n    this.toggleLoadBlueprintPanel_();\n  };\n\n  copyBlueprintToClipboard_ = async () => {\n    const copy = deepCopy(this.props.blueprint);\n    for (const node of Object.values(copy.nodes)) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageData instanceof Blob) {\n        const bytes = new Uint8Array(await node.imageData.arrayBuffer());\n        node.imageDataSerialized = fromByteArray(bytes);\n        node.imageData = null;\n      }\n    }\n\n    navigator.clipboard.writeText(JSON.stringify(copy));\n  };\n\n  importBlueprintFromClipboard_ = () => {\n    this.togglePasteMenu_();\n\n    if (!this.importRef_.current) {\n      return;\n    }\n\n    const serializedBlueprint = this.importRef_.current.value;\n    const blueprint = JSON.parse(serializedBlueprint) as null | Blueprint;\n    if (!blueprint) {\n      return;\n    }\n\n    for (const node of Object.values(blueprint.nodes)) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageDataSerialized) {\n        const bytes = toByteArray(node.imageDataSerialized);\n        node.imageData = new Blob([bytes]);\n        node.imageDataSerialized = null;\n      }\n    }\n\n    this.props.onImportBlueprint(blueprint);\n  };\n\n  togglePasteMenu_ = () => {\n    this.setState((state, props) => ({\n      pasteMenuVisible: !state.pasteMenuVisible,\n    }));\n  };\n\n  deleteBlueprint_ = (name: string) => {\n    this.props.onDeleteBlueprint(name);\n  };\n\n  toggleLoadBlueprintPanel_ = () => {\n    this.setState((state, props) => ({\n      loadMenuVisible: !state.loadMenuVisible,\n    }));\n  };\n\n  toggleOptions_ = () => {\n    this.setState((state, props) => ({\n      optionsVisible: !state.optionsVisible,\n    }));\n  };\n\n  enterFullscreen_ = async () => {\n    document.querySelector('canvas')!.requestFullscreen();\n  };\n\n  setAspectRatio_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onDisplayConfigChange({ aspect: e.currentTarget.value });\n    this.toggleOptions_();\n  };\n\n  updateResolution_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const target = e.currentTarget!;\n    if (\n      target === this.pixelSizeToggleRef_.current ||\n      target.name === 'pixelSize'\n    ) {\n      const pixelSize = parseInt(this.pixelSizeRef_.current!.value);\n      if (!isNaN(pixelSize)) {\n        this.props.onDisplayConfigChange({\n          resolution: {\n            mode: 'pixel',\n            pixelSize,\n          },\n        });\n      }\n      return;\n    }\n\n    const framebufferSize = {\n      width: parseInt(this.framebufferWidthRef_.current!.value),\n      height: parseInt(this.framebufferHeightRef_.current!.value),\n    };\n    if (isNaN(framebufferSize.width) || isNaN(framebufferSize.height)) {\n      return;\n    }\n\n    this.props.onDisplayConfigChange({\n      resolution: {\n        mode: 'framebuffer',\n        framebufferSize,\n      },\n    });\n  };\n}\n","import './Display.css';\n\nimport React from 'react';\n\nexport interface DisplayConfig {\n  aspect: string;\n  resolution: {\n    mode: 'pixel' | 'framebuffer';\n    pixelSize?: number;\n    framebufferSize?: { width: number; height: number };\n  };\n}\n\ninterface Props {\n  render: (canvas: HTMLCanvasElement) => void;\n  config: DisplayConfig;\n}\n\nexport class Display extends React.Component<Props> {\n  private wrapperRef_: React.RefObject<HTMLDivElement>;\n  private canvasRef_: React.RefObject<HTMLCanvasElement>;\n  private pendingFrameRequest_: null | number;\n\n  constructor(props: Props) {\n    super(props);\n    this.wrapperRef_ = React.createRef();\n    this.canvasRef_ = React.createRef();\n    this.pendingFrameRequest_ = null;\n  }\n\n  componentDidMount() {\n    const renderNextFrame = () => {\n      const wrapper = this.wrapperRef_.current!;\n      const canvas = this.canvasRef_.current!;\n      const width = wrapper.clientWidth;\n      const height = wrapper.clientHeight;\n      if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n      }\n      this.props.render(canvas);\n      this.pendingFrameRequest_ = requestAnimationFrame(renderNextFrame);\n    };\n\n    renderNextFrame();\n  }\n\n  componentWillUnmount() {\n    if (this.pendingFrameRequest_ !== null) {\n      cancelAnimationFrame(this.pendingFrameRequest_);\n      this.pendingFrameRequest_ = null;\n    }\n  }\n\n  render() {\n    const config = this.props.config;\n    const [aspectX, aspectY] = config.aspect.split(':').map(s => parseInt(s));\n    const stretch = isNaN(aspectX) || isNaN(aspectY);\n    const computedWrapperStyle: React.CSSProperties = {\n      height: stretch ? '100%' : 'auto',\n      aspectRatio: stretch ? 'auto' : `${aspectX}/${aspectY}`,\n    };\n    return (\n      <div className=\"Display\">\n        <div\n          ref={this.wrapperRef_}\n          className=\"CanvasWrapper\"\n          style={computedWrapperStyle}\n        >\n          <canvas ref={this.canvasRef_} />\n        </div>\n      </div>\n    );\n  }\n}\n","import './Node.css';\n\nimport { ReactNode } from 'react';\nimport {\n  getBezierPath,\n  getEdgeCenter,\n  getMarkerEnd,\n  EdgeProps,\n} from 'react-flow-renderer';\n\nimport { Blueprint, EdgeDescriptorBase } from '../../gpu/Blueprint';\n\ntype UpdateFn<DescriptorType extends EdgeDescriptorBase> = (\n  update: Partial<DescriptorType>\n) => void;\n\ninterface EdgeData<DescriptorType extends EdgeDescriptorBase> {\n  blueprint: Blueprint;\n  edge: DescriptorType;\n  onChange: UpdateFn<DescriptorType>;\n  destroy: () => void;\n}\n\ntype RenderFn<DescriptorType extends EdgeDescriptorBase> = (\n  data: EdgeData<DescriptorType>\n) => ReactNode;\n\ninterface Params<DescriptorType extends EdgeDescriptorBase> {\n  render: RenderFn<DescriptorType>;\n  width: number;\n  height: number;\n}\n\nexport function makeEdgeType<DescriptorType extends EdgeDescriptorBase>(\n  params: Params<DescriptorType>\n) {\n  return ({\n    id,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    style = {},\n    data: anyData,\n    arrowHeadType,\n    markerEndId,\n  }: EdgeProps) => {\n    const path = getBezierPath({\n      sourceX,\n      sourceY,\n      sourcePosition,\n      targetX,\n      targetY,\n      targetPosition,\n    });\n    const end = getMarkerEnd(arrowHeadType, markerEndId);\n    const [centerX, centerY] = getEdgeCenter({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n    });\n    const data = anyData as EdgeData<DescriptorType>;\n    const edge = data.edge;\n    return (\n      <>\n        <path\n          id={id}\n          style={style}\n          className=\"react-flow__edge-path\"\n          d={path}\n          markerEnd={end}\n        />\n        <foreignObject\n          width={params.width}\n          height={params.height}\n          x={centerX - params.width / 2}\n          y={centerY - params.height / 2}\n        >\n          <div className={`Edge Edge-${edge.type}`}>{params.render(data)}</div>\n        </foreignObject>\n      </>\n    );\n  };\n}\n","import './Node.css';\n\nimport React from 'react';\n\nimport {\n  BufferBindingEdgeDescriptor,\n  BufferBindingStorageType,\n} from '../../gpu/Blueprint';\nimport { makeEdgeType } from './EdgeTypeFactory';\n\nexport const BufferBindingEdge = makeEdgeType<BufferBindingEdgeDescriptor>({\n  width: 150,\n  height: 85,\n  render: data => (\n    <div>\n      <button className=\"RemoveButton\" onClick={data.destroy}>\n        X\n      </button>\n      <select\n        value={data.edge.storageType}\n        style={{ width: '8em', marginLeft: '1em' }}\n        onChange={e =>\n          data.onChange({\n            storageType: e.currentTarget.value as BufferBindingStorageType,\n          })\n        }\n      >\n        <option value=\"storage-read\">Storage (r/o)</option>\n        <option value=\"storage\">Storage (r/w)</option>\n        <option value=\"uniform\">Uniform</option>\n        <option value=\"sampler\">Sampler</option>\n        <option value=\"texture\">Texture</option>\n      </select>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={data.edge.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={data.edge.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </div>\n  ),\n});\n","import './Node.css';\n\nimport React from 'react';\n\nimport { QueueDependencyEdgeDescriptor } from '../../gpu/Blueprint';\nimport { makeEdgeType } from './EdgeTypeFactory';\n\nexport const QueueDependencyEdge = makeEdgeType<QueueDependencyEdgeDescriptor>({\n  width: 24,\n  height: 24,\n  render: data => (\n    <div>\n      <button className=\"RemoveButton\" onClick={data.destroy}>\n        X\n      </button>\n    </div>\n  ),\n});\n","import './EditableLabel.css';\n\nimport React from 'react';\n\ninterface Props {\n  value: string;\n  enabled?: boolean;\n  emptyText?: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n  isEditing: boolean;\n}\n\nexport class EditableLabel extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value ?? '',\n      isEditing: false,\n    };\n  }\n\n  render() {\n    const isEmpty = this.state.value === '';\n    const isEditing = this.state.isEditing;\n    const editingClass = isEditing ? 'Editing' : 'NotEditing';\n    const emptyClass = isEmpty ? 'Empty' : 'NotEmpty';\n    const defaultValue = !isEmpty\n      ? this.state.value\n      : this.props.emptyText ?? '';\n    return (\n      <input\n        className={`EditableLabel ${editingClass} ${emptyClass}`}\n        type=\"text\"\n        onKeyDown={this.onKeyDown_}\n        onBlur={this.onFocusOut_}\n        defaultValue={defaultValue}\n        readOnly={!isEditing}\n        onClick={this.onClick_}\n        autoFocus\n      />\n    );\n  }\n\n  onClick_ = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.enabled === false) {\n      return;\n    }\n    this.setState({ isEditing: true });\n  };\n\n  commit_ = (untrimmedValue: string) => {\n    const value = untrimmedValue.trim();\n    if (value === '') {\n      this.setState({ isEditing: false });\n      return;\n    }\n    this.setState({ value, isEditing: false });\n    this.props.onChange(value);\n  };\n\n  onKeyDown_ = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      this.commit_(e.currentTarget.value);\n    } else if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  };\n\n  onFocusOut_ = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.commit_(e.currentTarget.value);\n  };\n}\n","import './Node.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { Blueprint, NodeDescriptorBase } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\n\ntype UpdateFn<DescriptorType extends NodeDescriptorBase> = (\n  update: Partial<DescriptorType>\n) => void;\n\ninterface NodeData<DescriptorType extends NodeDescriptorBase> {\n  blueprint: Blueprint;\n  node: DescriptorType;\n  onChange: UpdateFn<DescriptorType>;\n  destroy: () => void;\n}\n\nexport interface NodeProps<DescriptorType extends NodeDescriptorBase> {\n  data: NodeData<DescriptorType>;\n}\n\ninterface Props {\n  title: string;\n  node: NodeDescriptorBase;\n  onRename: (name: string) => void;\n  destroy: () => void;\n  children?: ReactNode;\n}\n\nexport const Node = (props: Props) => {\n  return (\n    <div className={`Node Node-${props.node.type}`}>\n      <button className=\"RemoveButton\" onClick={props.destroy}>\n        X\n      </button>\n      <div className=\"Title\">{props.title}</div>\n      <div className=\"Content\">\n        <LabeledField label=\"Name\">\n          <EditableLabel value={props.node.name} onChange={props.onRename} />\n        </LabeledField>\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","import { Connection } from 'react-flow-renderer';\n\nimport { Blueprint, EdgeDescriptor, NodeDescriptor } from '../../gpu/Blueprint';\n\ninterface ConnectionData {\n  source: NodeDescriptor;\n  target: NodeDescriptor;\n  sourceName: string;\n  targetName: string;\n  targetHandle: string;\n}\n\nfunction resolveConnection(\n  c: Connection,\n  blueprint: Blueprint\n): null | ConnectionData {\n  if (!c.source || !c.target) {\n    return null;\n  }\n\n  const source = blueprint.nodes[c.source];\n  const target = blueprint.nodes[c.target];\n  if (!source || !target || !c.targetHandle) {\n    return null;\n  }\n\n  return {\n    source,\n    target,\n    sourceName: c.source,\n    targetName: c.target,\n    targetHandle: c.targetHandle,\n  };\n}\n\nexport function isValidBindingConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (\n    data.source.type !== 'buffer' &&\n    data.source.type !== 'texture' &&\n    data.source.type !== 'sampler'\n  ) {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  if (data.targetHandle !== 'bindings') {\n    return false;\n  }\n\n  if (!blueprint.edges) {\n    return true;\n  }\n\n  return !Object.values(blueprint.edges).some((e: EdgeDescriptor) => {\n    return (\n      e.type === 'binding' &&\n      e.source === data.sourceName &&\n      e.target === data.targetName\n    );\n  });\n}\n\nexport function isValidQueueConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (data.source.type !== 'render' && data.source.type !== 'compute') {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  if (!blueprint.edges) {\n    return true;\n  }\n\n  return !Object.values(blueprint.edges).some((e: EdgeDescriptor) => {\n    return (\n      e.type === 'queue-dependency' &&\n      (e.source === data.sourceName || e.target === data.targetName)\n    );\n  });\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { RenderNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nfunction colorValue(c: GPUColorDict): string {\n  const p = (x: number) => `${x < 16 ? '0' : ''}${x.toString(16)}`;\n  const cp = [c.r, c.g, c.b].map(c => p(c * 255));\n  return `#${cp.join('')}`;\n}\n\nfunction parseColor(value: string): GPUColorDict {\n  const parseComponent = (index: number) =>\n    parseInt(value.slice(index, index + 2), 16) / 255;\n  return {\n    r: parseComponent(1),\n    g: parseComponent(3),\n    b: parseComponent(5),\n    a: 1,\n  };\n}\n\nexport const RenderNode = (props: NodeProps<RenderNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Render Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n\n        <LabeledField label=\"Vertex Shader\">\n          <select\n            value={node.vertexShader}\n            onChange={e =>\n              data.onChange({ vertexShader: e.currentTarget.value })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Vertex Entry Point\">\n          <EditableLabel\n            value={node.vertexEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ vertexEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Fragment Shader\">\n          <select\n            value={node.fragmentShader}\n            onChange={e =>\n              data.onChange({\n                fragmentShader: e.currentTarget.value,\n              })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Fragment Entry Point\">\n          <EditableLabel\n            value={node.fragmentEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ fragmentEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Topology\">\n          <select\n            value={node.topology ?? 'triangle-list'}\n            onChange={e =>\n              data.onChange({\n                topology: e.currentTarget.value as GPUPrimitiveTopology,\n              })\n            }\n          >\n            <option value=\"point-list\">Point List</option>\n            <option value=\"line-list\">Line List</option>\n            <option value=\"line-strip\">Line Strip</option>\n            <option value=\"triangle-list\">Triangle List</option>\n            <option value=\"triangle-strip\">Triangle Strip</option>\n          </select>\n        </LabeledField>\n        <LabeledField label=\"# Vertices\">\n          <input\n            type=\"number\"\n            value={node.numVertices}\n            onChange={e =>\n              data.onChange({\n                numVertices: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"# Instances\">\n          <input\n            type=\"number\"\n            value={node.numInstances}\n            onChange={e =>\n              data.onChange({\n                numInstances: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear\">\n          <input\n            type=\"checkbox\"\n            checked={node.clear ?? false}\n            onChange={e => data.onChange({ clear: !node.clear })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear Color\">\n          <input\n            type=\"color\"\n            value={colorValue(node.clearColor ?? { r: 0, g: 0, b: 0, a: 1 })}\n            onChange={e =>\n              data.onChange({ clearColor: parseColor(e.currentTarget.value) })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Depth Test\">\n          <select\n            value={node.depthTest ?? 'always'}\n            onChange={e =>\n              data.onChange({\n                depthTest: e.currentTarget.value as GPUCompareFunction,\n              })\n            }\n          >\n            <option value=\"never\">Never Pass</option>\n            <option value=\"less\">&lt;</option>\n            <option value=\"less-equal\">&lt;=</option>\n            <option value=\"equal\">=</option>\n            <option value=\"greater-equal\">&gt;=</option>\n            <option value=\"greater\">&gt;</option>\n            <option value=\"not-equal\">≠</option>\n            <option value=\"always\">Always Pass</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\n\nimport { SamplerBindingEdgeDescriptor } from '../../gpu/Blueprint';\nimport { makeEdgeType } from './EdgeTypeFactory';\n\nexport const SamplerBindingEdge = makeEdgeType<SamplerBindingEdgeDescriptor>({\n  width: 150,\n  height: 85,\n  render: data => (\n    <div>\n      <button className=\"RemoveButton\" onClick={data.destroy}>\n        X\n      </button>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={data.edge.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={data.edge.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </div>\n  ),\n});\n","import './Node.css';\n\nimport React from 'react';\n\nimport { TextureBindingEdgeDescriptor } from '../../gpu/Blueprint';\nimport { makeEdgeType } from './EdgeTypeFactory';\n\nexport const TextureBindingEdge = makeEdgeType<TextureBindingEdgeDescriptor>({\n  width: 150,\n  height: 85,\n  render: data => (\n    <div>\n      <button className=\"RemoveButton\" onClick={data.destroy}>\n        X\n      </button>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={data.edge.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={data.edge.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </div>\n  ),\n});\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nfunction getSelectedFile(input: HTMLInputElement): null | File {\n  if (!input.files || input.files.length === 0) {\n    return null;\n  }\n\n  return input.files[0];\n}\n\nasync function updateCanvasImage(\n  canvas: null | HTMLCanvasElement,\n  data: null | Blob\n) {\n  if (!canvas || !data) {\n    return;\n  }\n\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n\n  const image = await createImageBitmap(data);\n  if (!image) {\n    return;\n  }\n\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, 128, 128);\n}\n\ntype CanvasRef = React.RefObject<HTMLCanvasElement>;\n\nexport const TextureNode = (props: NodeProps<TextureNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const ref = canvasRef as CanvasRef;\n    if (ref.current && node.imageData instanceof Blob) {\n      updateCanvasImage(ref.current, node.imageData);\n    }\n  });\n\n  return (\n    <Node\n      title=\"Texture\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"TextureDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={e => {\n            const file = getSelectedFile(e.currentTarget);\n            if (file) {\n              data.onChange({ imageData: file });\n            }\n          }}\n        />\n        <canvas\n          id={node.name}\n          ref={canvasRef as CanvasRef}\n          className=\"Preview\"\n          width={128}\n          height={128}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './BlueprintEditor.css';\n\nimport React from 'react';\nimport ReactFlow, {\n  Connection,\n  Edge,\n  FlowElement,\n  Node,\n} from 'react-flow-renderer';\n\nimport { Blueprint, EdgeDescriptor, NodeDescriptor } from '../gpu/Blueprint';\nimport { BufferBindingEdge } from './nodes/BufferBindingEdge';\nimport { QueueDependencyEdge } from './nodes/QueueDependencyEdge';\nimport { BufferNode } from './nodes/BufferNode';\nimport { ComputeNode } from './nodes/ComputeNode';\nimport { RenderNode } from './nodes/RenderNode';\nimport { SamplerBindingEdge } from './nodes/SamplerBindingEdge';\nimport { SamplerNode } from './nodes/SamplerNode';\nimport { TextureBindingEdge } from './nodes/TextureBindingEdge';\nimport { TextureNode } from './nodes/TextureNode';\n\nconst NODE_TYPES = {\n  buffer: BufferNode,\n  texture: TextureNode,\n  compute: ComputeNode,\n  render: RenderNode,\n  sampler: SamplerNode,\n};\n\nconst EDGE_TYPES = {\n  'buffer-binding': BufferBindingEdge,\n  'queue-dependency': QueueDependencyEdge,\n  'sampler-binding': SamplerBindingEdge,\n  'texture-binding': TextureBindingEdge,\n};\n\ninterface Props {\n  blueprint: Blueprint;\n  onChange: () => void;\n}\n\nfunction getUnusedKey<T extends Record<string, any>>(\n  dict: T,\n  base: string\n): string {\n  for (let i = 1; ; ++i) {\n    const id = `${base}${i}`;\n    if (!dict.hasOwnProperty(id)) {\n      return id;\n    }\n  }\n}\n\nclass FlowErrorBounary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.log(error);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst isPassNode = (node: NodeDescriptor) =>\n  node.type === 'render' || node.type === 'compute';\n\nexport class BlueprintEditor extends React.Component<Props> {\n  private isMounted_: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.isMounted_ = false;\n  }\n\n  componentDidMount() {\n    this.isMounted_ = true;\n  }\n\n  componentWillUnmount() {\n    this.isMounted_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"BlueprintEditor\">\n        <FlowErrorBounary>\n          <ReactFlow\n            nodeTypes={NODE_TYPES}\n            edgeTypes={EDGE_TYPES}\n            elements={buildGraphFromBlueprint(\n              this.props.blueprint,\n              this.update_\n            )}\n            elementsSelectable={true}\n            nodesConnectable={true}\n            nodesDraggable={true}\n            onConnect={this.onConnect_}\n            onElementClick={this.onElementClick_}\n            onNodeDragStop={this.onMoveNode_}\n          >\n            <div className=\"Toolbar\">\n              <button onClick={this.addShader_}>+Shader</button>\n              <button onClick={this.addBuffer_}>+Buffer</button>\n              <button onClick={this.addTexture_}>+Texture</button>\n              <button onClick={this.addSampler_}>+Sampler</button>\n              <button onClick={this.addRenderPass_}>+Render Pass</button>\n              <button onClick={this.addComputePass_}>+Compute Pass</button>\n            </div>\n          </ReactFlow>\n        </FlowErrorBounary>\n      </div>\n    );\n  }\n\n  update_ = () => {\n    if (!this.isMounted_) {\n      return;\n    }\n\n    this.setState({\n      elements: buildGraphFromBlueprint(this.props.blueprint, this.update_),\n    });\n    this.props.onChange();\n  };\n\n  onConnect_ = (edge: Edge<any> | Connection) => {\n    const source = this.props.blueprint.nodes[edge.source!];\n    const target = this.props.blueprint.nodes[edge.target!];\n    if (!source || !target) {\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'buffer' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addBufferBinding_(edge.source!, edge.target!);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'texture' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTextureBinding_(edge.source!, edge.target!);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'sampler' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addSamplerBinding_(edge.source!, edge.target!);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      isPassNode(source) &&\n      edge.targetHandle === 'queueIn'\n    ) {\n      this.addQueueDependency_(edge.source!, edge.target!);\n      this.props.onChange();\n      return;\n    }\n  };\n\n  onElementClick_ = (\n    event: React.MouseEvent<Element, MouseEvent>,\n    element: Node<any> | Edge<any>\n  ) => {};\n\n  onMoveNode_ = (event: React.MouseEvent, node: Node) => {\n    node.data.node.position = { ...node.position };\n    this.update_();\n  };\n\n  addShader_ = () => {\n    const shaders = this.props.blueprint.shaders;\n    const id = getUnusedKey(shaders, 'shader');\n    shaders[id] = { name: id, code: '' };\n    this.update_();\n  };\n\n  addNode_ = (type: string, node: Partial<NodeDescriptor>) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, type);\n    nodes[id] = {\n      name: id,\n      type,\n      position: { x: 100, y: 100 },\n      ...node,\n    } as NodeDescriptor;\n    this.update_();\n  };\n\n  addEdge_ = (type: string, edge: Partial<EdgeDescriptor>) => {\n    const edges = this.props.blueprint.edges ?? {};\n    this.props.blueprint.edges = edges;\n\n    const id = getUnusedKey(edges, type);\n    edges[id] = {\n      type,\n      ...edge,\n    } as EdgeDescriptor;\n    this.update_();\n  };\n\n  addBuffer_ = () => {\n    this.addNode_('buffer', {\n      size: 16384,\n      position: { x: 100, y: 100 },\n      init: 'zero',\n    });\n  };\n\n  addTexture_ = () => {\n    this.addNode_('texture', {\n      position: { x: 100, y: 100 },\n      size: { width: 1024, height: 1024 },\n      format: 'rgba8unorm',\n      mipLevelCount: 1,\n      sampleCount: 1,\n    });\n  };\n\n  addSampler_ = () => {\n    this.addNode_('sampler', {\n      position: { x: 100, y: 100 },\n    });\n  };\n\n  addBufferBinding_ = (bufferId: string, passId: string) => {\n    this.addEdge_('binding', {\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: bufferId,\n      target: passId,\n    });\n  };\n\n  addTextureBinding_ = (textureId: string, passId: string) => {\n    this.addEdge_('binding', {\n      bindingType: 'texture',\n      group: 0,\n      binding: 1,\n      source: textureId,\n      target: passId,\n    });\n  };\n\n  addSamplerBinding_ = (textureId: string, passId: string) => {\n    this.addEdge_('binding', {\n      bindingType: 'sampler',\n      group: 0,\n      binding: 1,\n      source: textureId,\n      target: passId,\n    });\n  };\n\n  addQueueDependency_ = (source: string, target: string) => {\n    this.addEdge_('queue-dependency', { source: source, target: target });\n  };\n\n  addRenderPass_ = () => {\n    this.addNode_('render', {\n      vertexShader: '',\n      vertexEntryPoint: '',\n      fragmentShader: '',\n      fragmentEntryPoint: '',\n      topology: 'triangle-list',\n      numVertices: 4,\n      numInstances: 1,\n      indexed: false,\n      clear: true,\n      clearColor: { r: 0, g: 0, b: 0, a: 1 },\n    });\n  };\n\n  addComputePass_ = () => {\n    this.addNode_('compute', {\n      shader: '',\n      entryPoint: '',\n      dispatchSize: { x: 1, y: 1, z: 1 },\n    });\n  };\n}\n\nfunction buildGraphFromBlueprint(\n  blueprint: Blueprint,\n  onChange: () => void\n): FlowElement[] {\n  const elements: FlowElement[] = [];\n  Object.entries(blueprint.nodes).forEach(([id, node]) => {\n    elements.push({\n      id,\n      type: node.type,\n      data: {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(blueprint.nodes[id], update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          if (blueprint.edges) {\n            for (const [edgeId, edge] of Object.entries(blueprint.edges)) {\n              if (edge.source === id || edge.target === id) {\n                delete blueprint.edges[edgeId];\n              }\n            }\n          }\n          onChange();\n        },\n      },\n      position: node.position,\n    });\n  });\n\n  Object.entries(blueprint.edges ?? {}).forEach(([id, edge]) => {\n    const data = {\n      blueprint,\n      edge,\n      onChange: (update: any) => {\n        Object.assign(blueprint.edges![id], update);\n        onChange();\n      },\n      destroy: () => {\n        delete blueprint.edges![id];\n        onChange();\n      },\n    };\n\n    switch (edge.type) {\n      case 'binding':\n        elements.push({\n          id,\n          source: edge.source,\n          target: edge.target,\n          targetHandle: 'bindings',\n          type: `${edge.bindingType}-binding`,\n          data,\n        });\n        break;\n\n      case 'queue-dependency':\n        elements.push({\n          id,\n          source: edge.source,\n          target: edge.target,\n          targetHandle: 'queueIn',\n          type: 'queue-dependency',\n          data,\n        });\n        break;\n    }\n  });\n\n  return elements;\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { BufferInitializer, BufferNodeDescriptor } from '../../gpu/Blueprint';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const BufferNode = (props: NodeProps<BufferNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Buffer\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Size\">\n          <input\n            type=\"number\"\n            value={node.size}\n            style={{ width: '5em', textAlign: 'right' }}\n            onChange={e =>\n              data.onChange({ size: e.currentTarget.valueAsNumber })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Init\">\n          <select\n            value={node.init}\n            style={{ width: '10em' }}\n            onChange={e =>\n              data.onChange({\n                init: e.currentTarget.value as BufferInitializer,\n              })\n            }\n          >\n            <option value=\"zero\">Zero</option>\n            <option value=\"random-floats\">Random Floats</option>\n            <option value=\"random-uints\">Random Uints</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { ComputeNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nexport const ComputeNode = (props: NodeProps<ComputeNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Compute Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Shader\">\n          <select\n            value={node.shader}\n            onChange={e => data.onChange({ shader: e.currentTarget.value })}\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Entry Point\">\n          <EditableLabel\n            emptyText=\"None\"\n            value={node.entryPoint}\n            onChange={value => data.onChange({ entryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Dispatch Size\">\n          <div className=\"DispatchSize\">\n            <div className=\"DispatchSizeElement\">\n              X{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.x}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: e.currentTarget.valueAsNumber,\n                      y: node.dispatchSize.y,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Y{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.y}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: e.currentTarget.valueAsNumber,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Z{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.z}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: node.dispatchSize.y,\n                      z: e.currentTarget.valueAsNumber,\n                    },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const SamplerNode = (props: NodeProps<SamplerNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Sampler\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"SamplerDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './CodeEditor.css';\n\nimport 'codemirror/keymap/sublime';\n\nimport CodeMirror from '@uiw/react-codemirror';\nimport React from 'react';\n\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationInfo } from '../gpu/Executable';\n\nconst BUILTIN_WGSL_NUM_LINES = BUILTIN_UNIFORMS_WGSL.split(/\\r\\n|\\r|\\n/).length;\n\ninterface Props {\n  compilationInfo?: ShaderCompilationInfo;\n  contents: string;\n  mutable: boolean;\n  onChange: (contents: string) => void;\n  theme: string;\n}\n\nexport class CodeEditor extends React.Component<Props> {\n  private isDecorating_: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.isDecorating_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"CodeEditor\">\n        <CodeMirror\n          value={this.props.contents}\n          onChange={this.onChange_}\n          onUpdate={this.onUpdate_}\n          options={{\n            theme: this.props.theme,\n            keyMap: 'sublime',\n            mode: 'rust',\n            gutters: ['GutterMessages'],\n            readOnly: !this.props.mutable,\n          }}\n        />\n      </div>\n    );\n  }\n\n  onChange_ = (e: CodeMirror.Editor, change: CodeMirror.EditorChange[]) => {\n    this.props.onChange(e.getValue());\n  };\n\n  onUpdate_ = (e: CodeMirror.Editor) => {\n    if (this.isDecorating_) {\n      return;\n    }\n\n    this.isDecorating_ = true;\n    e.getAllMarks().forEach(m => m.clear());\n    e.clearGutter('GutterMessages');\n    for (const m of this.props.compilationInfo?.messages ?? []) {\n      const className = `MarkedText-${m.type}`;\n      const line = m.lineNum - BUILTIN_WGSL_NUM_LINES;\n      e.markText(\n        { line, ch: m.linePos - 1 },\n        { line, ch: m.linePos + m.length - 1 },\n        { className }\n      );\n      const marker = document.createElement('div');\n      marker.classList.add('Marker', `Marker-${m.type}`);\n      e.setGutterMarker(line, 'GutterMessages', marker);\n    }\n    this.isDecorating_ = false;\n  };\n}\n","import './TabContainer.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { EditableLabel } from './EditableLabel';\n\ninterface TabDescriptor {\n  key: string;\n  title: string;\n  mutable: boolean;\n  onClose?: () => void;\n  onRename?: (newName: string) => void;\n}\n\ninterface Props {\n  tabs: TabDescriptor[];\n  children: ReactNode;\n}\n\ninterface State {\n  activeTab: number;\n}\n\nexport class TabContainer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeTab: 0,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"TabContainer\">\n        {this.renderTabs_()}\n        <div className=\"ContentArea\">{this.renderActiveTabContent_()}</div>\n      </div>\n    );\n  }\n\n  renderTabs_() {\n    const children = React.Children.toArray(this.props.children);\n    return (\n      <div className=\"TabStrip\">\n        {this.props.tabs.map((tab, i) => {\n          const active = this.state.activeTab === i;\n          const z = this.props.tabs.length - i;\n          return (\n            <div\n              key={tab.key + tab.title}\n              style={{ zIndex: active ? children.length : z }}\n              className={`${active ? 'Tab Active' : 'Tab Inactive'}\n                          ${tab.mutable ? 'Removable' : 'Permanent'}`}\n              onClick={_ => this.setActiveTab_(i)}\n            >\n              <EditableLabel\n                enabled={tab.mutable && active}\n                value={tab.title}\n                onChange={tab.onRename ?? (() => ({}))}\n              />\n              {tab.mutable && (\n                <button\n                  className=\"RemoveButton\"\n                  onClick={e => {\n                    if (tab.onClose) {\n                      tab.onClose();\n                    }\n                    e.stopPropagation();\n                  }}\n                >\n                  x\n                </button>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  setActiveTab_(tab: number) {\n    this.setState({ activeTab: tab });\n  }\n\n  renderActiveTabContent_() {\n    const children = React.Children.toArray(this.props.children);\n    if (children.length === 0) {\n      return;\n    }\n\n    let tab = this.state.activeTab;\n    if (tab >= children.length) {\n      this.setActiveTab_(0);\n      return children[0];\n    }\n\n    return children[tab];\n  }\n}\n","import './Editor.css';\n\nimport React from 'react';\n\nimport { Blueprint } from '../gpu/Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationInfo } from '../gpu/Executable';\nimport { BlueprintEditor } from './BlueprintEditor';\nimport { CodeEditor } from './CodeEditor';\nimport { TabContainer } from './TabContainer';\n\ninterface Props {\n  blueprint: Blueprint;\n  onBlueprintChange: () => void;\n\n  compilationInfo: Record<string, ShaderCompilationInfo>;\n\n  codeMirrorTheme: string;\n}\n\nexport class Editor extends React.Component<Props> {\n  render() {\n    const shaders = Object.entries(this.props.blueprint.shaders);\n    return (\n      <div className=\"Editor\">\n        <TabContainer\n          tabs={[\n            { key: 'Blueprint', title: 'Blueprint', mutable: false },\n            { key: 'Uniforms', title: 'Uniforms', mutable: false },\n            ...shaders.map(([id, shader]) => ({\n              key: id,\n              title: shader.name,\n              mutable: true,\n              onClose: () => this.removeShader_(id),\n              onRename: (newName: string) => this.renameShader_(id, newName),\n            })),\n          ]}\n        >\n          <BlueprintEditor\n            blueprint={this.props.blueprint}\n            onChange={this.props.onBlueprintChange}\n          />\n          <CodeEditor\n            key=\"Uniforms\"\n            contents={BUILTIN_UNIFORMS_WGSL}\n            mutable={false}\n            onChange={() => ({})}\n            theme={this.props.codeMirrorTheme}\n          />\n          {shaders.map(([id, shader]) => (\n            <CodeEditor\n              key={id}\n              compilationInfo={this.props.compilationInfo[id]}\n              contents={shader.code}\n              mutable={true}\n              onChange={code => {\n                shader.code = code;\n                this.props.onBlueprintChange();\n              }}\n              theme={this.props.codeMirrorTheme}\n            />\n          ))}\n        </TabContainer>\n      </div>\n    );\n  }\n\n  removeShader_ = (id: string) => {\n    delete this.props.blueprint.shaders[id];\n    this.props.onBlueprintChange();\n  };\n\n  renameShader_ = (id: string, newName: string) => {\n    this.props.blueprint.shaders[id].name = newName;\n    this.props.onBlueprintChange();\n  };\n}\n","import './App.css';\n\nimport React from 'react';\n\nimport { LocalPersistent } from './base/LocalPersistent';\nimport { deepCopy } from './base/Util';\nimport { Blueprint, canonicalize } from './gpu/Blueprint';\nimport { ShaderCompilationInfo } from './gpu/Executable';\nimport { FrameProducer } from './gpu/FrameProducer';\nimport { ControlPanel } from './ui/ControlPanel';\nimport { Display, DisplayConfig } from './ui/Display';\nimport { Editor } from './ui/Editor';\nimport { AppState } from './AppState';\n\ninterface Props {\n  appState: LocalPersistent<AppState>;\n}\n\ninterface State extends AppState {\n  compilationInfo: Record<string, ShaderCompilationInfo>;\n}\n\nclass App extends React.Component<Props, State> {\n  private frameProducer_: FrameProducer;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      ...this.props.appState.value,\n      compilationInfo: {},\n    };\n\n    this.frameProducer_ = new FrameProducer();\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  }\n\n  componentDidMount() {\n    this.frameProducer_.onShadersCompiled = this.onShadersCompiled_;\n  }\n\n  componentDidUpdate() {\n    this.props.appState.value = this.state;\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  }\n\n  componentWillUnmount() {\n    this.frameProducer_.stop();\n  }\n\n  onDisplayConfigChange = (change: Partial<DisplayConfig>) => {\n    this.setState((state, props) => {\n      return {\n        displayConfig: Object.assign({ ...state.displayConfig }, change),\n      };\n    });\n  };\n\n  onFullscreenChange_ = () => {\n    this.frameProducer_.reconfigure();\n  };\n\n  onBlueprintChange_ = () => {\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  };\n\n  onShadersCompiled_ = (\n    compilationInfo: Record<string, ShaderCompilationInfo>\n  ) => {\n    this.setState({ compilationInfo });\n  };\n\n  onSaveBlueprint_ = (name: string) => {\n    this.setState((state, props) => ({\n      savedBlueprints: {\n        ...state.savedBlueprints,\n        [name]: deepCopy(state.blueprint),\n      },\n    }));\n  };\n\n  onLoadBlueprint_ = (name: string) => {\n    const blueprint = deepCopy(this.state.savedBlueprints[name]);\n    if (!blueprint) {\n      return;\n    }\n\n    canonicalize(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onImportBlueprint_ = (blueprint: Blueprint) => {\n    canonicalize(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onDeleteBlueprint_ = (name: string) => {\n    this.setState((state, props) => {\n      delete state.savedBlueprints[name];\n      return { savedBlueprints: state.savedBlueprints };\n    });\n  };\n\n  onCodeMirrorThemeChange_ = (name: string) => {\n    this.setState({ codeMirrorTheme: name });\n  };\n\n  render() {\n    const renderDisplay = (canvas: HTMLCanvasElement) => {\n      let resolution: { width: number; height: number };\n      const config = this.state.displayConfig;\n      if (config.resolution.mode === 'pixel') {\n        const pixelSize =\n          config.resolution.pixelSize! >= 1 ? config.resolution.pixelSize! : 1;\n        resolution = {\n          width: canvas.clientWidth / pixelSize,\n          height: canvas.clientHeight / pixelSize,\n        };\n      } else {\n        resolution = { ...config.resolution.framebufferSize! };\n      }\n\n      this.frameProducer_.render(canvas, resolution);\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-title\">WebGPU Playground</div>\n        </div>\n        <div className=\"App-top\">\n          <div className=\"App-canvas\">\n            <Display render={renderDisplay} config={this.state.displayConfig} />\n          </div>\n          <div className=\"App-editor\">\n            <Editor\n              compilationInfo={this.state.compilationInfo}\n              blueprint={this.state.blueprint}\n              onBlueprintChange={this.onBlueprintChange_}\n              codeMirrorTheme={this.state.codeMirrorTheme}\n            />\n          </div>\n        </div>\n        <div className=\"App-bottom\">\n          <ControlPanel\n            blueprint={this.state.blueprint}\n            displayConfig={this.state.displayConfig}\n            onDisplayConfigChange={this.onDisplayConfigChange}\n            savedBlueprints={this.state.savedBlueprints}\n            onSaveBlueprint={this.onSaveBlueprint_}\n            onLoadBlueprint={this.onLoadBlueprint_}\n            onImportBlueprint={this.onImportBlueprint_}\n            onDeleteBlueprint={this.onDeleteBlueprint_}\n            codeMirrorTheme={this.state.codeMirrorTheme}\n            onCodeMirrorThemeChange={this.onCodeMirrorThemeChange_}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { Blueprint } from './gpu/Blueprint';\nimport { BASIC } from './presets/Basic';\nimport { BOIDS } from './presets/Boids';\nimport { INSTANCES } from './presets/Instances';\nimport { DisplayConfig } from './ui/Display';\n\nexport interface AppState {\n  blueprint: Blueprint;\n  savedBlueprints: Record<string, Blueprint>;\n  displayConfig: DisplayConfig;\n  codeMirrorTheme: string;\n}\n\nexport const DEFAULT_APP_STATE: AppState = {\n  blueprint: {\n    nodes: {},\n    edges: {},\n    shaders: {},\n  },\n  savedBlueprints: {\n    Basic: BASIC,\n    Boids: BOIDS,\n    Instances: INSTANCES,\n  },\n  displayConfig: {\n    aspect: '1:1',\n    resolution: { mode: 'pixel', pixelSize: 1 },\n  },\n  codeMirrorTheme: 'monokai',\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u);\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u);\n  return vec4<f32>(x, y, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx +\n                            vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const BASIC: Blueprint = {\n  nodes: {\n    render1: {\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 1,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  },\n  edges: {},\n  shaders: {\n    vertex1: {\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  },\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst COMPUTE = `let kRule1Distance = 0.1;\nlet kRule2Distance = 0.025;\nlet kRule3Distance = 0.025;\nlet kRule1Scale = 0.02;\nlet kRule2Scale = 0.05;\nlet kRule3Scale = 0.005;\nlet kNumParticles = 1000u;\n\nstruct Particle {\n  pos: vec2<f32>;\n  vel: vec2<f32>;\n};\n\n[[block]] struct Particles {\n  particles: array<Particle>;\n};\n\n[[group(0), binding(1)]] var<storage, read> particlesA: Particles;\n[[group(0), binding(2)]] var<storage, read_write> particlesB: Particles;\n\n[[stage(compute), workgroup_size(1)]]\nfn main([[builtin(global_invocation_id)]] id: vec3<u32>) {\n  let index = id.x;\n  if (index >= kNumParticles) {\n    return;\n  }\n\n  var vPos = particlesA.particles[index].pos;\n  var vVel = particlesA.particles[index].vel;\n  var cMass = vec2<f32>(0.0, 0.0);\n  var cVel = vec2<f32>(0.0, 0.0);\n  var colVel = vec2<f32>(0.0, 0.0);\n  var cMassCount = 0u;\n  var cVelCount = 0u;\n  var pos: vec2<f32>;\n  var vel: vec2<f32>;\n\n  for (var i = 0u; i < kNumParticles; i = i + 1u) {\n    if (i == index) {\n      continue;\n    }\n    pos = particlesA.particles[i].pos.xy;\n    vel = particlesA.particles[i].vel.xy;\n    if (distance(pos, vPos) < kRule1Distance) {\n      cMass = cMass + pos;\n      cMassCount = cMassCount + 1u;\n    }\n    if (distance(pos, vPos) < kRule2Distance) {\n      colVel = colVel - (pos - vPos);\n    }\n    if (distance(pos, vPos) < kRule3Distance) {\n      cVel = cVel + vel;\n      cVelCount = cVelCount + 1u;\n    }\n  }\n\n  if (cMassCount > 0u) {\n    cMass = (cMass / vec2<f32>(f32(cMassCount), f32(cMassCount))) - vPos;\n  }\n\n  if (cVelCount > 0u) {\n    cVel = cVel / vec2<f32>(f32(cVelCount), f32(cVelCount));\n  }\n\n  vVel = vVel + (cMass * kRule1Scale) + (colVel * kRule2Scale) +\n      (cVel * kRule3Scale);\n\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 1.0);\n  vPos = vPos + (vVel * builtinUniforms.timeDelta * 0.25);\n\n  if (vPos.x < -1.0) {\n    vPos.x = vPos.x + 2.0;\n  }\n  if (vPos.x > 1.0) {\n    vPos.x = vPos.x - 2.0;\n  }\n  if (vPos.y < -1.0) {\n    vPos.y = vPos.y + 2.0;\n  }\n  if (vPos.y > 1.0) {\n    vPos.y = vPos.y - 2.0;\n  }\n\n  particlesB.particles[index].pos = vPos;\n  particlesB.particles[index].vel = vVel;\n}\n`;\n\nconst VERTEX = `struct Particle {\n  particlePos: vec2<f32>;\n  particleVel: vec2<f32>;\n};\n\n[[block]] struct Particles {\n  particles: array<Particle>;\n};\n\n[[group(0), binding(1)]] var<storage, read> particles: Particles;\n\nfn getPos(vid: u32) -> vec2<f32> {\n  return select(\n      vec2<f32>(-0.01, -0.02),\n      select(vec2<f32>(0.01, -0.02), vec2<f32>(0.00, 0.02), vid >= 2u),\n      vid >= 1u);\n}\n\n[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] vid: u32,\n        [[builtin(instance_index)]] id: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let angle = -atan2(particles.particles[id].particleVel.x, particles.particles[id].particleVel.y);\n  let ppos = getPos(vid);\n  let pos = vec2<f32>(ppos.x * cos(angle) - ppos.y * sin(angle),\n                      ppos.x * sin(angle) + ppos.y * cos(angle));\n  return vec4<f32>(pos + particles.particles[id].particlePos, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main() -> [[location(0)]] vec4<f32> {\n  return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n}\n`;\n\nexport const BOIDS: Blueprint = {\n  nodes: {\n    compute1: {\n      name: 'update A',\n      type: 'compute',\n      position: { x: 580, y: 50 },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: { x: 1000, y: 1, z: 1 },\n    },\n    render1: {\n      name: 'render boids',\n      position: { x: 580, y: 370 },\n      type: 'render',\n      indexed: false,\n      numVertices: 3,\n      numInstances: 1000,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n    compute2: {\n      name: 'update B',\n      type: 'compute',\n      position: { x: 580, y: 220 },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: { x: 1000, y: 1, z: 1 },\n    },\n    buffer1: {\n      name: 'particle data A',\n      position: { x: 10, y: 100 },\n      type: 'buffer',\n      size: 16000,\n      init: 'random-floats',\n    },\n    buffer2: {\n      name: 'particle data B',\n      position: { x: 10, y: 350 },\n      type: 'buffer',\n      size: 16000,\n      init: 'zero',\n    },\n  },\n  edges: {\n    binding1a: {\n      type: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'compute1',\n    },\n    binding1b: {\n      type: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'render1',\n    },\n    binding2: {\n      type: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer1',\n      target: 'compute2',\n    },\n    binding3: {\n      type: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer2',\n      target: 'compute2',\n    },\n    binding4: {\n      type: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer2',\n      target: 'compute1',\n    },\n  },\n  shaders: {\n    compute1: {\n      name: 'compute',\n      code: COMPUTE,\n    },\n    vertex1: {\n      name: 'vertex',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'fragment',\n      code: FRAGMENT,\n    },\n  },\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32,\n        [[builtin(instance_index)]] instance: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let t = builtinUniforms.time * 6.283 / 2.0;\n  let b = 1.0 + f32(instance / 10u) * 0.5;\n  let k = 0.5 + cos(t * 3.0) * 0.2;\n  let c = k * cos(t);\n  let s = k * sin(t);\n  let xo = cos(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let yo = sin(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u) * 0.3;\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u) * 0.3;\n  return vec4<f32>(x * c - y * s + xo, x * s + y * c + yo, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx + vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const INSTANCES: Blueprint = {\n  nodes: {\n    render1: {\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 30,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  },\n  edges: {},\n  shaders: {\n    vertex1: {\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  },\n};\n","type Closure = () => void;\n\nexport class Debouncer {\n  private minDelayMs_: number;\n  private lastInvocationMs_: null | number;\n  private pendingInvocation_: null | ReturnType<typeof setTimeout>;\n\n  constructor(minDelayMs: number) {\n    this.minDelayMs_ = minDelayMs;\n    this.lastInvocationMs_ = null;\n    this.pendingInvocation_ = null;\n  }\n\n  invoke(f: Closure) {\n    if (this.onCooldown()) {\n      this.scheduleSuppressed(f);\n      return;\n    }\n\n    this.invokeInternal(f);\n  }\n\n  private clearPendingInvocation() {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    this.pendingInvocation_ = null;\n  }\n\n  private invokeInternal(f: Closure) {\n    this.clearPendingInvocation();\n    this.lastInvocationMs_ = Date.now();\n    f();\n  }\n\n  private onCooldown(): boolean {\n    if (this.lastInvocationMs_ === null) {\n      return false;\n    }\n    return Date.now() - this.lastInvocationMs_ < this.minDelayMs_;\n  }\n\n  private scheduleSuppressed(f: Closure) {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    const delay = this.lastInvocationMs_! + this.minDelayMs_ - Date.now();\n    this.pendingInvocation_ = setTimeout(this.invoke.bind(this, f), delay);\n  }\n}\n","import { Debouncer } from './Debouncer';\n\nimport localForage from 'localforage';\n\nconst DEFAULT_DEBOUNCE_MS = 100;\n\ninterface Options<Type> {\n  key: string;\n  default: Type;\n  debounceMs?: number;\n}\n\nfunction deepUpdate(target: any, source: any): any {\n  const isObject = (x: any) => typeof x === 'object' && x !== null;\n  for (const [key, value] of Object.entries(source)) {\n    if (!target.hasOwnProperty(key)) {\n      if (Array.isArray(value)) {\n        target[key] = [...value];\n      } else if (isObject(value)) {\n        target[key] = deepUpdate({}, value);\n      } else {\n        target[key] = value;\n      }\n    } else if (isObject(value) && isObject(target[key])) {\n      deepUpdate(target[key], value);\n    }\n  }\n  return target;\n}\n\nexport class LocalPersistent<Type> {\n  private key_: string;\n  private cachedValue_: Type;\n  private debouncer_: Debouncer;\n\n  constructor(key: string, initialValue: Type, debounceMs: number) {\n    this.key_ = key;\n    this.cachedValue_ = initialValue;\n    this.debouncer_ = new Debouncer(debounceMs);\n  }\n\n  set value(value: Type) {\n    this.cachedValue_ = value;\n    this.debouncer_.invoke(() => localForage.setItem(this.key_, value));\n  }\n\n  get value(): Type {\n    return this.cachedValue_;\n  }\n}\n\nfunction loadValueFromLocalStorage<Type>(key: string): null | Type {\n  const serializedValue = localStorage[key];\n  let cachedValue = null;\n  if (serializedValue) {\n    cachedValue = JSON.parse(serializedValue) ?? null;\n  }\n  if (cachedValue !== null) {\n    return cachedValue as Type;\n  }\n  return null;\n}\n\nexport async function restoreLocalPersistent<Type>(\n  options: Options<Type>\n): Promise<LocalPersistent<Type>> {\n  const asyncCachedValue = localForage.getItem(options.key);\n  const cachedLegacyValue = loadValueFromLocalStorage<Type>(options.key);\n  const cachedValue = (await asyncCachedValue) as null | Type;\n  let restoredValue: null | Partial<Type> = null;\n  if (cachedValue !== null) {\n    restoredValue = cachedValue;\n  } else {\n    restoredValue = cachedLegacyValue ?? {};\n  }\n  return new LocalPersistent<Type>(\n    options.key,\n    deepUpdate(restoredValue, options.default),\n    options.debounceMs ?? DEFAULT_DEBOUNCE_MS\n  );\n}\n","import './index.css';\n\nimport localForage from 'localforage';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './App';\nimport { AppState, DEFAULT_APP_STATE } from './AppState';\nimport { restoreLocalPersistent } from './base/LocalPersistent';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'shady',\n  version: 1,\n  storeName: 'local_state',\n});\n\nasync function init() {\n  const state = await restoreLocalPersistent<AppState>({\n    key: 'gpu-app-state',\n    default: DEFAULT_APP_STATE,\n  });\n  render(\n    <React.StrictMode>\n      <App appState={state} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n"],"sourceRoot":""}