{"version":3,"sources":["../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","base/Util.tsx","gpu/Blueprint.tsx","gpu/Gpu.tsx","gpu/program/CompiledResourceCache.tsx","gpu/program/Buffer.tsx","gpu/program/Sampler.tsx","gpu/BuiltinUniforms.tsx","gpu/program/Shader.tsx","gpu/program/Texture.tsx","gpu/program/ProgramMap.tsx","gpu/program/CompiledResourceBundle.tsx","gpu/program/Executable.tsx","gpu/program/Linker.tsx","gpu/Program.tsx","gpu/FrameProducer.tsx","ui/CodeMirrorThemes.tsx","ui/LabeledField.tsx","ui/ControlPanel.tsx","ui/Display.tsx","ui/EditableLabel.tsx","ui/nodes/Node.tsx","ui/nodes/Validation.tsx","ui/nodes/BufferNode.tsx","base/Debouncer.tsx","ui/nodes/RenderNode.tsx","ui/nodes/TextureNode.tsx","ui/BlueprintEditor.tsx","ui/nodes/ComputeNode.tsx","ui/nodes/SamplerNode.tsx","ui/nodes/BufferBindingNode.tsx","ui/nodes/SamplerBindingNode.tsx","ui/nodes/TextureBindingNode.tsx","ui/nodes/CustomEdge.tsx","ui/CodeEditor.tsx","ui/TabContainer.tsx","ui/Editor.tsx","App.tsx","AppState.tsx","presets/Basic.tsx","presets/Boids.tsx","presets/Instances.tsx","base/LocalPersistent.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","doCopy","value","traversed","Array","isArray","has","add","x","Blob","copy","entries","k","v","undefined","deepCopy","Set","deepEquals","a","b","length","every","i","objectPromiseAll","object","from","key","fromEntries","deserializeBlueprint","serialized","blueprint","nodes","shaders","hasOwnProperty","versioned","version","console","log","node","shader","deserializeV1","deserializeV0","oldNode","uuid","oldShader","canonicalize","values","type","imageDataSerialized","bytes","toByteArray","imageData","serializeBlueprint","options","serializeBlobs","Uint8Array","arrayBuffer","fromByteArray","Gpu","adapter_","device_","lost_","pendingAcquisition_","onAcquired","onLost","acquire","acquireInternal_","release","isAcquired","onLost_","warn","setTimeout","this","navigator","gpu","requestAdapter","adapter","requestDevice","device","lost","CompiledResourceCache","compiler","compiler_","cache_","Map","filter","get","delete","dispose","resource","programMap","newCache","pendingUpdates","props","entry","needsRecompile","set","compile","update","fillRandomUint32Array","data","offset","byteLength","size","Math","min","view","Uint32Array","buffer","crypto","getRandomValues","Buffer","init","usage","size_","init_","usage_","buffer_","destroy","BufferCompiler","newDescriptor","bufferUsage","descriptor","mappedAtCreation","createBuffer","getMappedRange","uints","floats","Float32Array","forEach","unmap","createCompiledBufferCache","Sampler","sampler","sampler_","SamplerCompiler","createSampler","createCompiledSamplerCache","BUILTIN_UNIFORMS_WGSL","BUILTIN_WGSL_NUM_LINES","split","Shader","messages","code_","module_","messages_","ShaderCompiler","createShaderModule","compilationInfo","info","failed","message","push","lineNum","linePos","createCompiledShaderCache","Texture","bitmap","texture","imageData_","bitmap_","texture_","TextureCompiler","createImageBitmap","width","height","createTexture","format","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","createCompiledTextureCache","ProgramMap","buffers","textures","samplers","passes","bindings","textureUsage","passOrder","s","populate_","bindingNodes","queueDeps","incoming","outgoing","connectionType","target","populateBindings_","computePassOrder_","pass","group","groups","bindingNode","bindingType","compileBufferBinding_","compileTextureBinding_","compileSamplerBinding_","startNodes","thisPhase","nextPhase","added","targets","incomingDeps","passType","binding","bufferType","newUsage","storageType","GPUBufferUsage","STORAGE","UNIFORM","layoutEntry","visibility","visibilityForPass","addBindGroupEntry","groupBindings","GPUShaderStage","VERTEX","FRAGMENT","COMPUTE","CompiledResourceBundle","caches","lastCompile_","caches_","thisCompile","doCompile_","newResources","releaseKeysAndDisposeRemainder","Executable","passes_","outputDepthStencilTexture_","outputDepthStencilTextureSize_","submit","encodeCommands_","encoder","createCommandEncoder","encodeRenderCommands_","encodeComputeCommands_","finish","loadValue","clear","clearColor","r","g","depthStencilTexture","renderPass","beginRenderPass","colorAttachments","createView","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","executeBundles","bundle","endPass","computePass","beginComputePass","dispatchSize","setPipeline","pipeline","bindGroups","setBindGroup","dispatch","y","z","getResourceForBinding","resources","name","linkBindings","passId","builtinUniforms","layoutEntries","groupEntries","newLayoutEntries","newGroupEntries","unshift","bindGroupLayouts","layout","createBindGroupLayout","createBindGroup","pipelineLayout","createPipelineLayout","linkPass","outputFormat","vertexDescriptor","vertexShader","fragmentDescriptor","fragmentShader","topology","stripIndexFormat","createRenderPipeline","vertex","entryPoint","vertexEntryPoint","primitive","cullMode","fragment","fragmentEntryPoint","depthStencil","depthWriteEnabled","depthCompare","depthTest","createRenderBundleEncoder","colorFormats","depthStencilFormat","draw","numVertices","numInstances","linkRenderPass","shaderDescriptor","createComputePipeline","compute","linkComputePass","linkProgram","linkedPasses","Program","builtinUniforms_","resources_","executable_","blueprint_","outputFormat_","onShadersCompiled_","handler","compile_","uniforms","ArrayBuffer","writeBuffer","resolution","run","results","FrameProducer","gpu_","lastUsedContext_","lastUsedResolution_","startTime_","lastFrameTime_","frame_","program_","onGpuAcquired_","setBlueprint","onShadersCompiled","canvas","context","getContext","getContextFromCanvas","stop","getPreferredFormat","configure","style","now","Date","getTime","delta","updateUniforms","time","timeDelta","frame","getCurrentTexture","CODE_MIRROR_THEMES","LabeledField","label","children","className","ControlPanel","pixelSizeToggleRef_","pixelSizeRef_","framebufferWidthRef_","framebufferHeightRef_","importRef_","saveBlueprint_","prompt","onSaveBlueprint","loadBlueprint_","onLoadBlueprint","toggleLoadBlueprintPanel_","copyBlueprintToClipboard_","clipboard","JSON","stringify","writeText","importBlueprintFromClipboard_","togglePasteMenu_","current","serializedBlueprint","parse","onImportBlueprint","setState","state","pasteMenuVisible","deleteBlueprint_","onDeleteBlueprint","loadMenuVisible","toggleOptions_","optionsVisible","enterFullscreen_","document","querySelector","requestFullscreen","setAspectRatio_","onDisplayConfigChange","aspect","currentTarget","updateResolution_","framebufferSize","parseInt","isNaN","mode","pixelSize","React","createRef","displayConfig","makeAspectOption","ratio","onChange","checked","title","onClick","ref","marginLeft","codeMirrorTheme","onCodeMirrorThemeChange","theme","savedBlueprints","Component","Display","wrapperRef_","canvasRef_","pendingFrameRequest_","renderNextFrame","wrapper","clientWidth","clientHeight","render","requestAnimationFrame","cancelAnimationFrame","config","aspectX","aspectY","stretch","computedWrapperStyle","aspectRatio","EditableLabel","onClick_","enabled","isEditing","commit_","untrimmedValue","trim","onKeyDown_","onFocusOut_","isEmpty","editingClass","emptyClass","defaultValue","emptyText","onKeyDown","onBlur","readOnly","autoFocus","Node","onRename","resolveConnection","c","targetHandle","sourceName","targetName","isValidBindingConnection","some","isValidQueueConnection","Debouncer","minDelayMs","minDelayMs_","lastInvocationMs_","pendingInvocation_","f","onCooldown","scheduleSuppressed","invokeInternal","clearTimeout","clearPendingInvocation","delay","invoke","bind","colorValue","cp","toString","join","parseColor","parseComponent","index","image","drawImage","NODE_TYPES","position","isValidConnection","textAlign","valueAsNumber","canvasRef","useRef","useEffect","updateCanvasImage","accept","input","file","files","debouncer","max","isConnectable","EDGE_TYPES","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","anyData","arrowHeadType","markerEndId","path","getBezierPath","end","getMarkerEnd","getEdgeCenter","centerX","centerY","d","markerEnd","getUnusedKey","dict","base","FlowErrorBounary","error","errorInfo","isPassNode","BlueprintEditor","isMounted_","instance_","flowRef_","lastConnectStart_","lastConnectEnd_","update_","elements","buildGraphFromBlueprint","onLoad_","instance","onConnectStart_","clientX","clientY","onConnectStop_","onConnect_","edge","getBoundingClientRect","midpoint","project","addBufferBinding_","addTrivialBinding_","onElementClick_","event","element","onMoveNode_","addShader_","addNode_","addBuffer_","addTexture_","mipLevelCount","sampleCount","addSampler_","addRenderPass_","indexed","addComputePass_","nodeTypes","edgeTypes","elementsSelectable","nodesConnectable","nodesDraggable","onLoad","onConnectStart","onConnectStop","onConnect","onElementClick","onNodeDragStop","assign","otherId","otherNode","CodeEditor","isDecorating_","editorRef_","onChange_","change","getValue","onUpdate_","getAllMarks","m","clearGutter","compilationMessages","line","markText","ch","marker","createElement","classList","setGutterMarker","cm","editor","refresh","contents","onUpdate","keyMap","gutters","mutable","TabContainer","activeTab","numChildren","Children","count","tab","tabs","onActivate","renderTabs_","toArray","child","active","_","setActiveTab_","onClose","stopPropagation","Editor","refreshEditor","uniformsRef","refs","onBlueprintChange","removeShader","newName","renameShader","compilationResults","App","frameProducer_","onFullscreenChange_","reconfigure","onBlueprintChange_","onSaveBlueprint_","onLoadBlueprint_","reserialized","blueprints","onImportBlueprint_","onDeleteBlueprint_","onCodeMirrorThemeChange_","appState","DEFAULT_APP_STATE","Basic","Boids","Instances","deepUpdate","isObject","LocalPersistent","initialValue","debounceMs","key_","cachedValue_","debouncer_","localForage","setItem","loadValueFromLocalStorage","serializedValue","localStorage","cachedValue","restoreLocalPersistent","asyncCachedValue","getItem","cachedLegacyValue","restoredValue","default","StrictMode","getElementById","driver","INDEXEDDB","storeName"],"mappings":"uNAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,mBAAoB,CACnB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,GAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,uBAAwB,CACvB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,EACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,GAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,mBAAoB,CACnB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,yBAA0B,CACzB,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,EACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,GAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,WAAY,CACX,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,GAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,C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","file":"static/js/main.1e67dde5.chunk.js","sourcesContent":["var map = {\n\t\"./apl/apl.js\": [\n\t\t139,\n\t\t30\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t140,\n\t\t31\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t141,\n\t\t32\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t142,\n\t\t33\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t143,\n\t\t34\n\t],\n\t\"./clike/clike.js\": [\n\t\t128,\n\t\t2\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t144,\n\t\t35\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t145,\n\t\t36\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t146,\n\t\t37\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t129,\n\t\t38\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t147,\n\t\t39\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t148,\n\t\t40\n\t],\n\t\"./css/css.js\": [\n\t\t125,\n\t\t1\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t149,\n\t\t41\n\t],\n\t\"./d/d.js\": [\n\t\t150,\n\t\t42\n\t],\n\t\"./dart/dart.js\": [\n\t\t151,\n\t\t2,\n\t\t43\n\t],\n\t\"./diff/diff.js\": [\n\t\t152,\n\t\t44\n\t],\n\t\"./django/django.js\": [\n\t\t153,\n\t\t0,\n\t\t1,\n\t\t11\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t154,\n\t\t21\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t155,\n\t\t45\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t156,\n\t\t46\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t157,\n\t\t47\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t158,\n\t\t48\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t159,\n\t\t49\n\t],\n\t\"./elm/elm.js\": [\n\t\t160,\n\t\t50\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t161,\n\t\t51\n\t],\n\t\"./factor/factor.js\": [\n\t\t162,\n\t\t22\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t163,\n\t\t52\n\t],\n\t\"./forth/forth.js\": [\n\t\t164,\n\t\t53\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t165,\n\t\t54\n\t],\n\t\"./gas/gas.js\": [\n\t\t166,\n\t\t55\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t167,\n\t\t4,\n\t\t20\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t168,\n\t\t56\n\t],\n\t\"./go/go.js\": [\n\t\t169,\n\t\t57\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t170,\n\t\t58\n\t],\n\t\"./haml/haml.js\": [\n\t\t171,\n\t\t0,\n\t\t1,\n\t\t14\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t130,\n\t\t16\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t172,\n\t\t26\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t131,\n\t\t59\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t173,\n\t\t60\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t174,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t124,\n\t\t0,\n\t\t1,\n\t\t27\n\t],\n\t\"./http/http.js\": [\n\t\t175,\n\t\t61\n\t],\n\t\"./idl/idl.js\": [\n\t\t176,\n\t\t62\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t126,\n\t\t0\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t177,\n\t\t63\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t178,\n\t\t0,\n\t\t28\n\t],\n\t\"./julia/julia.js\": [\n\t\t179,\n\t\t64\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t180,\n\t\t65\n\t],\n\t\"./lua/lua.js\": [\n\t\t181,\n\t\t66\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t136,\n\t\t4\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t182,\n\t\t67\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t183,\n\t\t68\n\t],\n\t\"./meta.js\": [\n\t\t24\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t184,\n\t\t69\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t185,\n\t\t70\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t186,\n\t\t71\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t187,\n\t\t72\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t188,\n\t\t73\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t189,\n\t\t74\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t190,\n\t\t23\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t191,\n\t\t75\n\t],\n\t\"./octave/octave.js\": [\n\t\t192,\n\t\t76\n\t],\n\t\"./oz/oz.js\": [\n\t\t193,\n\t\t77\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t194,\n\t\t78\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t195,\n\t\t0,\n\t\t79\n\t],\n\t\"./perl/perl.js\": [\n\t\t196,\n\t\t80\n\t],\n\t\"./php/php.js\": [\n\t\t197,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t17\n\t],\n\t\"./pig/pig.js\": [\n\t\t198,\n\t\t81\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t199,\n\t\t82\n\t],\n\t\"./properties/properties.js\": [\n\t\t200,\n\t\t83\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t201,\n\t\t84\n\t],\n\t\"./pug/pug.js\": [\n\t\t137,\n\t\t0,\n\t\t1,\n\t\t3\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t202,\n\t\t85\n\t],\n\t\"./python/python.js\": [\n\t\t132,\n\t\t86\n\t],\n\t\"./q/q.js\": [\n\t\t203,\n\t\t87\n\t],\n\t\"./r/r.js\": [\n\t\t204,\n\t\t88\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t205,\n\t\t89\n\t],\n\t\"./rst/rst.js\": [\n\t\t206,\n\t\t13\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t127,\n\t\t90\n\t],\n\t\"./rust/rust.js\": [\n\t\t207,\n\t\t24\n\t],\n\t\"./sas/sas.js\": [\n\t\t208,\n\t\t91\n\t],\n\t\"./sass/sass.js\": [\n\t\t134,\n\t\t1,\n\t\t92\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t209,\n\t\t93\n\t],\n\t\"./shell/shell.js\": [\n\t\t210,\n\t\t94\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t211,\n\t\t95\n\t],\n\t\"./slim/slim.js\": [\n\t\t212,\n\t\t0,\n\t\t1,\n\t\t15\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t213,\n\t\t96\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t214,\n\t\t97\n\t],\n\t\"./solr/solr.js\": [\n\t\t215,\n\t\t98\n\t],\n\t\"./soy/soy.js\": [\n\t\t216,\n\t\t0,\n\t\t1,\n\t\t18\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t217,\n\t\t99\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t218,\n\t\t100\n\t],\n\t\"./sql/sql.js\": [\n\t\t219,\n\t\t101\n\t],\n\t\"./stex/stex.js\": [\n\t\t133,\n\t\t102\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t138,\n\t\t5\n\t],\n\t\"./swift/swift.js\": [\n\t\t220,\n\t\t103\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t221,\n\t\t104\n\t],\n\t\"./textile/textile.js\": [\n\t\t222,\n\t\t105\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t223,\n\t\t106\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t224,\n\t\t107\n\t],\n\t\"./toml/toml.js\": [\n\t\t225,\n\t\t108\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t226,\n\t\t0,\n\t\t1,\n\t\t12\n\t],\n\t\"./troff/troff.js\": [\n\t\t227,\n\t\t109\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t229,\n\t\t110\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t228,\n\t\t111\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t230,\n\t\t112\n\t],\n\t\"./twig/twig.js\": [\n\t\t231,\n\t\t19\n\t],\n\t\"./vb/vb.js\": [\n\t\t232,\n\t\t113\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t233,\n\t\t114\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t234,\n\t\t115\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t235,\n\t\t116\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t236,\n\t\t117\n\t],\n\t\"./vue/vue.js\": [\n\t\t237,\n\t\t0,\n\t\t1,\n\t\t5,\n\t\t3,\n\t\t9\n\t],\n\t\"./wast/wast.js\": [\n\t\t238,\n\t\t25\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t239,\n\t\t118\n\t],\n\t\"./xml/xml.js\": [\n\t\t123,\n\t\t119\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t240,\n\t\t120\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t241,\n\t\t121\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t242,\n\t\t29\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t135,\n\t\t122\n\t],\n\t\"./z80/z80.js\": [\n\t\t243,\n\t\t123\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 120;\nmodule.exports = webpackAsyncContext;","function doCopy<T>(value: T, traversed: Set<any>): T {\n  if (Array.isArray(value)) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n    return value.map(x => doCopy(x, traversed)) as any;\n  }\n\n  if (value instanceof Blob) {\n    return value;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n\n    const copy: Record<string, any> = {};\n    for (const [k, v] of Object.entries(value)) {\n      copy[k] = doCopy(v, traversed);\n    }\n    return copy as T;\n  }\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (\n    typeof value === 'number' ||\n    typeof value === 'string' ||\n    typeof value === 'boolean'\n  ) {\n    return value;\n  }\n\n  throw new Error('value not deep-copyable');\n}\n\nexport function deepCopy<T extends Record<string, any>>(value: T): T {\n  return doCopy(value, new Set());\n}\n\nexport function deepEquals<T extends Record<string, any>>(a: T, b: T): boolean {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n    return a.every((x, i) => deepEquals(x, b[i]));\n  }\n\n  if (a instanceof Blob || b instanceof Blob) {\n    return a === b;\n  }\n\n  if (typeof a === 'object' && a !== null) {\n    if (typeof b !== 'object' || b === null) {\n      return false;\n    }\n    return (\n      Object.keys(a).length === Object.keys(b).length &&\n      Object.keys(a).every(k => deepEquals(a[k], b[k]))\n    );\n  }\n\n  return a === b;\n}\n\n// Awaits all values on an object, and returns a new object with the same keys\n// but all promises resolved.\nexport async function objectPromiseAll(object: Record<string, any>) {\n  return Object.fromEntries(\n    await Promise.all(\n      Array.from(Object.entries(object)).map(async ([key, value]) => [\n        key,\n        await value,\n      ])\n    )\n  );\n}\n","import { toByteArray, fromByteArray } from 'base64-js';\n\nimport { deepCopy } from '../base/Util';\n\nexport type NodeID = string;\nexport type ShaderID = string;\n\nexport interface Blueprint {\n  nodes: Record<NodeID, NodeDescriptor>;\n  shaders: Record<ShaderID, ShaderDescriptor>;\n}\n\nexport type NodeDescriptor =\n  | BufferNodeDescriptor\n  | ComputeNodeDescriptor\n  | ConnectionNodeDescriptor\n  | RenderNodeDescriptor\n  | SamplerNodeDescriptor\n  | TextureNodeDescriptor;\n\nexport type ConnectionNodeDescriptor =\n  | BufferBindingNodeDescriptor\n  | QueueNodeDescriptor\n  | SamplerBindingNodeDescriptor\n  | TextureBindingNodeDescriptor;\n\nexport type NodeType =\n  | 'render'\n  | 'compute'\n  | 'buffer'\n  | 'texture'\n  | 'sampler'\n  | 'connection';\n\nexport interface NodeDescriptorBase {\n  id: NodeID;\n  name: string;\n  position: { x: number; y: number };\n  type: NodeType;\n}\n\nexport interface RenderNodeDescriptor extends NodeDescriptorBase {\n  type: 'render';\n\n  // TODO: Configuration for primitive state, depth/stencil, multisampling\n\n  vertexShader: ShaderID;\n  vertexEntryPoint: string;\n\n  fragmentShader: ShaderID;\n  fragmentEntryPoint: string;\n\n  topology?: GPUPrimitiveTopology;\n  indexed: boolean;\n  numVertices: number;\n  numInstances: number;\n\n  clear?: boolean;\n  clearColor?: GPUColorDict;\n\n  depthTest?: GPUCompareFunction;\n}\n\nexport interface ComputeNodeDescriptor extends NodeDescriptorBase {\n  type: 'compute';\n  shader: ShaderID;\n  entryPoint: string;\n  dispatchSize: { x: number; y: number; z: number };\n}\n\nexport type BufferInitializer = 'zero' | 'random-floats' | 'random-uints';\n\nexport interface BufferNodeDescriptor extends NodeDescriptorBase {\n  type: 'buffer';\n  size: number;\n  init?: BufferInitializer;\n}\n\nexport interface TextureNodeDescriptor extends NodeDescriptorBase {\n  type: 'texture';\n  imageData: null | Blob;\n  imageDataSerialized: null | string;\n  size: GPUExtent3DDict;\n  format: GPUTextureFormat;\n  mipLevelCount: number;\n  sampleCount: number;\n}\n\nexport interface SamplerNodeDescriptor extends NodeDescriptorBase {\n  type: 'sampler';\n\n  // TODO: Filtering, addressing, clamping, comparison, anisotropy.\n}\n\nexport interface ShaderDescriptor {\n  name: string;\n  id: ShaderID;\n  code: string;\n}\n\nexport type ConnectionType = 'binding' | 'queue';\n\nexport interface ConnectionNodeDescriptorBase extends NodeDescriptorBase {\n  type: 'connection';\n  connectionType: ConnectionType;\n  source: NodeID;\n  target: NodeID;\n}\n\nexport type BindingType = 'buffer' | 'sampler' | 'texture';\n\nexport interface BindingNodeDescriptorBase\n  extends ConnectionNodeDescriptorBase {\n  connectionType: 'binding';\n  bindingType: BindingType;\n  group: number;\n  binding: number;\n}\n\nexport type BufferBindingStorageType = 'storage-read' | 'storage' | 'uniform';\n\nexport interface BufferBindingNodeDescriptor extends BindingNodeDescriptorBase {\n  bindingType: 'buffer';\n  storageType: BufferBindingStorageType;\n}\n\nexport interface TextureBindingNodeDescriptor\n  extends BindingNodeDescriptorBase {\n  bindingType: 'texture';\n}\n\nexport interface SamplerBindingNodeDescriptor\n  extends BindingNodeDescriptorBase {\n  bindingType: 'sampler';\n}\n\nexport type BindingNodeDescriptor =\n  | BufferBindingNodeDescriptor\n  | SamplerBindingNodeDescriptor\n  | TextureBindingNodeDescriptor;\n\nexport interface QueueNodeDescriptor extends ConnectionNodeDescriptorBase {\n  connectionType: 'queue';\n}\n\ninterface SerializedBlueprintV0 {\n  nodes: Record<NodeID, NodeDescriptor>;\n  shaders: Record<ShaderID, ShaderDescriptor>;\n}\n\ninterface SerializedBlueprintV1 {\n  version: 1;\n  nodes: NodeDescriptor[];\n  shaders: ShaderDescriptor[];\n}\n\nexport type SerializedBlueprint =\n  | SerializedBlueprintV0\n  | VersionedSerializedBlueprint;\n\ntype VersionedSerializedBlueprint = SerializedBlueprintV1;\n\nfunction canonicalize(blueprint: Blueprint) {\n  for (const [id, node] of Object.entries(blueprint.nodes)) {\n    node.id = id;\n\n    const oldNode = node as any;\n    if (oldNode.uuid) {\n      delete oldNode.uuid;\n    }\n  }\n  for (const [id, shader] of Object.entries(blueprint.shaders)) {\n    shader.id = id;\n\n    const oldShader = shader as any;\n    if (oldShader.uuid) {\n      delete oldShader.uuid;\n    }\n  }\n}\n\nfunction deserializeV0(\n  serialized: SerializedBlueprintV0,\n  blueprint: Blueprint\n) {\n  for (const [id, node] of Object.entries(serialized.nodes)) {\n    blueprint.nodes[id] = deepCopy(node);\n  }\n  for (const [id, shader] of Object.entries(serialized.shaders)) {\n    blueprint.shaders[id] = deepCopy(shader);\n  }\n}\n\nfunction deserializeV1(\n  serialized: SerializedBlueprintV1,\n  blueprint: Blueprint\n) {\n  console.log(serialized);\n  for (const node of serialized.nodes) {\n    blueprint.nodes[node.id] = deepCopy(node);\n  }\n  for (const shader of serialized.shaders) {\n    blueprint.shaders[shader.id] = deepCopy(shader);\n  }\n}\n\nexport function deserializeBlueprint(\n  serialized: SerializedBlueprint\n): Blueprint {\n  const blueprint: Blueprint = { nodes: {}, shaders: {} };\n\n  if (!serialized.hasOwnProperty('version')) {\n    deserializeV0(serialized as SerializedBlueprintV0, blueprint);\n  } else {\n    const versioned = serialized as VersionedSerializedBlueprint;\n    switch (versioned.version) {\n      case 1:\n        deserializeV1(versioned as SerializedBlueprintV1, blueprint);\n        break;\n    }\n  }\n\n  canonicalize(blueprint);\n\n  for (const node of Object.values(blueprint.nodes)) {\n    if (node.type !== 'texture') {\n      continue;\n    }\n\n    if (node.imageDataSerialized) {\n      const bytes = toByteArray(node.imageDataSerialized);\n      node.imageData = new Blob([bytes]);\n      node.imageDataSerialized = null;\n    }\n  }\n\n  return blueprint;\n}\n\ninterface SerializationOptions {\n  serializeBlobs?: boolean;\n}\n\nexport async function serializeBlueprint(\n  blueprint: Blueprint,\n  options?: SerializationOptions\n): Promise<SerializedBlueprintV1> {\n  const serialized: SerializedBlueprintV1 = {\n    version: 1,\n    nodes: deepCopy(Object.values(blueprint.nodes)),\n    shaders: deepCopy(Object.values(blueprint.shaders)),\n  };\n  if (options && options.serializeBlobs) {\n    for (const node of serialized.nodes) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageData instanceof Blob) {\n        const bytes = new Uint8Array(await node.imageData.arrayBuffer());\n        node.imageDataSerialized = fromByteArray(bytes);\n        node.imageData = null;\n      }\n    }\n  }\n  return serialized;\n}\n","const REACQUIRE_ON_LOST_DELAY_MS = 1000;\n\ntype AcquiredHandler = (() => void) | (() => Promise<void>);\ntype LostHandler = (() => void) | (() => Promise<void>);\n\nexport class Gpu {\n  private adapter_: null | GPUAdapter;\n  private device_: null | GPUDevice;\n  private lost_: boolean;\n  private pendingAcquisition_: null | Promise<void>;\n\n  onAcquired: null | AcquiredHandler;\n  onLost: null | LostHandler;\n\n  constructor() {\n    this.adapter_ = null;\n    this.device_ = null;\n    this.lost_ = false;\n    this.pendingAcquisition_ = null;\n    this.onAcquired = null;\n    this.onLost = null;\n    this.acquire();\n  }\n\n  get isAcquired() {\n    return this.adapter_ !== null;\n  }\n  get isLost() {\n    return !this.isAcquired;\n  }\n  get adapter() {\n    return this.adapter_;\n  }\n  get device() {\n    return this.device_;\n  }\n\n  acquire = async () => {\n    if (this.pendingAcquisition_ === null) {\n      this.pendingAcquisition_ = this.acquireInternal_();\n    }\n    return this.pendingAcquisition_;\n  };\n\n  release = () => {\n    if (!this.isAcquired) {\n      throw new Error('not acquired');\n    }\n\n    this.adapter_ = null;\n    this.device_ = null;\n  };\n\n  async acquireInternal_() {\n    if (this.isAcquired) {\n      throw new Error('already acquired.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('no webgpu adapter available');\n    }\n\n    try {\n      const device = await adapter.requestDevice();\n      if (!device) {\n        throw new Error('no webgpu device available');\n      }\n      this.device_ = device;\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.pendingAcquisition_ = null;\n    this.adapter_ = adapter;\n    this.device_!.lost.then(this.onLost_);\n    if (this.onAcquired !== null) {\n      await this.onAcquired();\n    }\n  }\n\n  onLost_ = async () => {\n    console.warn('Lost GPU. Reacquiring after short delay...');\n\n    this.adapter_ = null;\n    this.device_ = null;\n    if (this.onLost != null) {\n      await this.onLost();\n    }\n    await new Promise(resolve =>\n      setTimeout(resolve, REACQUIRE_ON_LOST_DELAY_MS)\n    );\n  };\n}\n","import { NodeID } from '../Blueprint';\nimport { ProgramMap } from './ProgramMap';\n\ninterface HasId {\n  id: NodeID;\n}\n\nexport interface CompiledResource {\n  dispose: () => void;\n}\n\ntype Cache<Resource extends CompiledResource> = Map<NodeID, null | Resource>;\n\nexport interface ResourceCompiler<\n  Props extends HasId,\n  Resource extends CompiledResource\n> {\n  needsRecompile(\n    newProps: Props,\n    resource: Resource,\n    programMap: ProgramMap\n  ): boolean;\n  compile(props: Props, programMap: ProgramMap): Promise<null | Resource>;\n}\n\nexport class CompiledResourceCache<\n  Props extends HasId,\n  Resource extends CompiledResource\n> {\n  private readonly compiler_: ResourceCompiler<Props, Resource>;\n  private readonly cache_: Cache<Resource>;\n\n  constructor(compiler: ResourceCompiler<Props, Resource>) {\n    this.compiler_ = compiler;\n    this.cache_ = new Map();\n  }\n\n  get keys() {\n    return this.cache_.keys();\n  }\n\n  get entries() {\n    return Array.from(this.cache_.entries()).filter(\n      ([key, value]) => value !== null\n    ) as [[NodeID, Resource]];\n  }\n\n  get(id: NodeID): null | Resource {\n    return this.cache_.get(id) ?? null;\n  }\n\n  releaseKeysAndDisposeRemainder(keys: Iterable<NodeID>) {\n    for (const key of keys) {\n      this.cache_.delete(key);\n    }\n\n    this.dispose();\n  }\n\n  dispose() {\n    for (const resource of Object.values(this.cache_)) {\n      if (resource !== null) {\n        resource.dispose();\n      }\n    }\n  }\n\n  async compile(\n    entries: Iterable<Props>,\n    programMap: ProgramMap\n  ): Promise<CompiledResourceCache<Props, Resource>> {\n    const newCache = new CompiledResourceCache<Props, Resource>(this.compiler_);\n    const pendingUpdates: Map<Props, Promise<null | Resource>> = new Map();\n    for (const props of entries) {\n      const entry = this.cache_.get(props.id);\n      if (entry && !this.compiler_.needsRecompile(props, entry, programMap)) {\n        newCache.cache_.set(props.id, entry);\n      } else {\n        pendingUpdates.set(props, this.compiler_.compile(props, programMap));\n      }\n    }\n\n    for (const [props, update] of pendingUpdates.entries()) {\n      newCache.cache_.set(props.id, await update);\n    }\n    return newCache;\n  }\n}\n","import { BufferInitializer, BufferNodeDescriptor } from '../Blueprint';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nfunction fillRandomUint32Array(data: Uint32Array) {\n  for (let offset = 0; offset < data.byteLength; offset += 65536) {\n    const size = Math.min(65536, data.byteLength - offset);\n    const view = new Uint32Array(data.buffer, offset, size / 4);\n    crypto.getRandomValues(view);\n  }\n}\n\nexport class Buffer implements CompiledResource {\n  private readonly size_: number;\n  private readonly init_: BufferInitializer;\n  private readonly usage_: GPUBufferUsageFlags;\n  private readonly buffer_: GPUBuffer;\n\n  constructor(\n    size: number,\n    init: BufferInitializer,\n    usage: GPUBufferUsageFlags,\n    buffer: GPUBuffer\n  ) {\n    this.size_ = size;\n    this.init_ = init;\n    this.usage_ = usage;\n    this.buffer_ = buffer;\n  }\n\n  get size() {\n    return this.size_;\n  }\n  get init() {\n    return this.init_;\n  }\n  get usage() {\n    return this.usage_;\n  }\n  get buffer() {\n    return this.buffer_;\n  }\n\n  dispose() {\n    this.buffer_.destroy();\n  }\n}\n\nexport class BufferCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: BufferNodeDescriptor,\n    buffer: Buffer,\n    programMap: ProgramMap\n  ) {\n    return (\n      newDescriptor.size !== buffer.size ||\n      newDescriptor.init !== buffer.init ||\n      programMap.bufferUsage.get(newDescriptor.id) !== buffer.usage\n    );\n  }\n\n  async compile(descriptor: BufferNodeDescriptor, programMap: ProgramMap) {\n    const usage = programMap.bufferUsage.get(descriptor.id);\n    if (!usage) {\n      // No need to do anything, this buffer isn't used by anyone.\n      return null;\n    }\n\n    const mappedAtCreation = descriptor.init !== 'zero';\n    const buffer = this.device_.createBuffer({\n      size: descriptor.size,\n      usage,\n      mappedAtCreation,\n    });\n    if (!buffer) {\n      return null;\n    }\n\n    if (mappedAtCreation) {\n      const data = buffer.getMappedRange(0, descriptor.size);\n      const uints = new Uint32Array(data);\n      const floats = new Float32Array(data);\n      fillRandomUint32Array(uints);\n      if (descriptor.init === 'random-floats') {\n        uints.forEach((x, i) => {\n          floats[i] = x / 2 ** 31 - 1;\n        });\n      }\n      buffer.unmap();\n    }\n\n    return new Buffer(\n      descriptor.size,\n      descriptor.init ?? 'zero',\n      usage,\n      buffer\n    );\n  }\n}\n\nexport type CompiledBufferCache = CompiledResourceCache<\n  BufferNodeDescriptor,\n  Buffer\n>;\n\nexport function createCompiledBufferCache(\n  device: GPUDevice\n): CompiledBufferCache {\n  return new CompiledResourceCache<BufferNodeDescriptor, Buffer>(\n    new BufferCompiler(device)\n  );\n}\n","import { SamplerNodeDescriptor } from '../Blueprint';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nexport class Sampler implements CompiledResource {\n  private readonly sampler_: GPUSampler;\n\n  constructor(sampler: GPUSampler) {\n    this.sampler_ = sampler;\n  }\n\n  get sampler() {\n    return this.sampler_;\n  }\n\n  dispose() {}\n}\n\nexport class SamplerCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: SamplerNodeDescriptor,\n    sampler: Sampler,\n    programMap: ProgramMap\n  ) {\n    return false;\n  }\n\n  async compile(descriptor: SamplerNodeDescriptor, programMap: ProgramMap) {\n    return new Sampler(this.device_.createSampler());\n  }\n}\n\nexport type CompiledSamplerCache = CompiledResourceCache<\n  SamplerNodeDescriptor,\n  Sampler\n>;\n\nexport function createCompiledSamplerCache(\n  device: GPUDevice\n): CompiledSamplerCache {\n  return new CompiledResourceCache<SamplerNodeDescriptor, Sampler>(\n    new SamplerCompiler(device)\n  );\n}\n","import { UniformLayout } from './UniformLayout';\n\nexport const BUILTIN_UNIFORMS_WGSL = `// All shader sources are prefixed with the definitions below, providing a\n// set of builtin uniform inputs which are updated by the application before\n// each frame iteration.\n[[block]] struct BuiltinUniforms {\n  // The time in seconds since the application loaded.\n  time: f32;\n\n  // The time in seconds since the last frame iteration. Zero for the first\n  // frame.\n  timeDelta: f32;\n\n  // The count of the current frame. The first frame is frame 0.\n  frame: u32;\n\n  // The resolution in pixels of the main output texture displayed by the app.\n  [[align(16)]] resolution: vec2<u32>;\n};\n\n// All builtin uniforms are accessible to all shaders through this global.\n[[group(0), binding(0)]] var<uniform> builtinUniforms: BuiltinUniforms;\n`;\n\nexport const BUILTIN_UNIFORMS: UniformLayout = {\n  fields: [\n    { name: 'time', type: 'f32' },\n    { name: 'timeDelta', type: 'f32' },\n    { name: 'frame', type: 'u32' },\n    { name: 'resolution', type: { vectorType: 'vec2', componentType: 'u32' } },\n  ],\n};\n","import { ShaderDescriptor } from '../Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../BuiltinUniforms';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nconst BUILTIN_WGSL_NUM_LINES = BUILTIN_UNIFORMS_WGSL.split(/\\r\\n|\\r|\\n/).length;\n\nexport type ShaderCompilationMessageType = 'info' | 'warning' | 'error';\n\nexport interface ShaderCompilationMessage {\n  message: string;\n  type: ShaderCompilationMessageType;\n  lineNum: number;\n  linePos: number;\n  offset: number;\n  length: number;\n}\n\nexport interface ShaderCompilationResult {\n  module: null | GPUShaderModule;\n  messages: ShaderCompilationMessage[];\n}\n\nexport class Shader implements CompiledResource {\n  private readonly code_: string;\n  private readonly module_: null | GPUShaderModule;\n  private readonly messages_: ShaderCompilationMessage[];\n\n  constructor(\n    code: string,\n    module: null | GPUShaderModule,\n    messages: ShaderCompilationMessage[]\n  ) {\n    this.code_ = code;\n    this.module_ = module;\n    this.messages_ = messages;\n  }\n\n  get code() {\n    return this.code_;\n  }\n  get module() {\n    return this.module_;\n  }\n  get messages() {\n    return this.messages_;\n  }\n\n  dispose() {}\n}\n\nexport class ShaderCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: ShaderDescriptor,\n    shader: Shader,\n    programMap: ProgramMap\n  ) {\n    return newDescriptor.code !== shader.code;\n  }\n\n  async compile(descriptor: ShaderDescriptor, programMap: ProgramMap) {\n    const module = this.device_.createShaderModule({\n      code: BUILTIN_UNIFORMS_WGSL + descriptor.code,\n    });\n    const info = await module.compilationInfo();\n    let failed = false;\n    const messages = [];\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        failed = true;\n      }\n      messages.push({\n        message: message.message,\n        type: message.type as ShaderCompilationMessageType,\n        lineNum: message.lineNum - BUILTIN_WGSL_NUM_LINES,\n        linePos: message.linePos,\n        offset: message.offset,\n        length: message.length,\n      });\n    }\n\n    return new Shader(descriptor.code, failed ? null : module, messages);\n  }\n}\n\nexport type CompiledShaderCache = CompiledResourceCache<\n  ShaderDescriptor,\n  Shader\n>;\n\nexport function createCompiledShaderCache(\n  device: GPUDevice\n): CompiledShaderCache {\n  return new CompiledResourceCache<ShaderDescriptor, Shader>(\n    new ShaderCompiler(device)\n  );\n}\n","import { TextureNodeDescriptor } from '../Blueprint';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nexport class Texture implements CompiledResource {\n  private readonly imageData_: Blob;\n  private readonly bitmap_: ImageBitmap;\n  private readonly texture_: GPUTexture;\n\n  constructor(imageData: Blob, bitmap: ImageBitmap, texture: GPUTexture) {\n    this.imageData_ = imageData;\n    this.bitmap_ = bitmap;\n    this.texture_ = texture;\n  }\n\n  get imageData() {\n    return this.imageData_;\n  }\n\n  get bitmap() {\n    return this.bitmap_;\n  }\n\n  get texture() {\n    return this.texture_;\n  }\n\n  dispose() {\n    this.texture_.destroy();\n  }\n}\n\nexport class TextureCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: TextureNodeDescriptor,\n    texture: Texture,\n    programMap: ProgramMap\n  ) {\n    return newDescriptor.imageData !== texture.imageData;\n  }\n\n  async compile(descriptor: TextureNodeDescriptor, programMap: ProgramMap) {\n    if (!descriptor.imageData) {\n      return null;\n    }\n\n    const bitmap = await createImageBitmap(descriptor.imageData);\n    const size = { width: bitmap.width, height: bitmap.height };\n    const texture = this.device_.createTexture({\n      size,\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    this.device_.queue.copyExternalImageToTexture(\n      { source: bitmap },\n      { texture },\n      size\n    );\n    return new Texture(descriptor.imageData, bitmap, texture);\n  }\n}\n\nexport type CompiledTextureCache = CompiledResourceCache<\n  TextureNodeDescriptor,\n  Texture\n>;\n\nexport function createCompiledTextureCache(\n  device: GPUDevice\n): CompiledTextureCache {\n  return new CompiledResourceCache<TextureNodeDescriptor, Texture>(\n    new TextureCompiler(device)\n  );\n}\n","import { deepCopy } from '../../base/Util';\nimport {\n  Blueprint,\n  BindingNodeDescriptor,\n  BufferBindingNodeDescriptor,\n  BufferNodeDescriptor,\n  ComputeNodeDescriptor,\n  NodeID,\n  RenderNodeDescriptor,\n  SamplerBindingNodeDescriptor,\n  SamplerNodeDescriptor,\n  ShaderDescriptor,\n  TextureBindingNodeDescriptor,\n  TextureNodeDescriptor,\n} from '../Blueprint';\n\n// TODO: This should be devised dynamically from device limits.\nconst kMaxBindGroups = 4;\n\nexport type PassNode = RenderNodeDescriptor | ComputeNodeDescriptor;\n\nexport type ShaderMap = Map<NodeID, ShaderDescriptor>;\nexport type BufferMap = Map<NodeID, BufferNodeDescriptor>;\nexport type TextureMap = Map<NodeID, TextureNodeDescriptor>;\nexport type SamplerMap = Map<NodeID, SamplerNodeDescriptor>;\nexport type PassMap = Map<NodeID, PassNode>;\n\nexport type BindableNode =\n  | BufferNodeDescriptor\n  | TextureNodeDescriptor\n  | SamplerNodeDescriptor;\n\nexport interface BindGroupEntry {\n  layoutEntry: GPUBindGroupLayoutEntry;\n  node: BindableNode;\n}\n\nexport type BindGroup = Map<number, BindGroupEntry>;\nexport type BindingsMap = Map<NodeID, BindGroup[]>;\n\nexport type PassType = 'render' | 'compute';\n\nexport type BufferUsageMap = Map<NodeID, GPUBufferUsageFlags>;\nexport type TextureUsageMap = Map<NodeID, GPUTextureUsageFlags>;\n\ninterface QueueDeps {\n  // Maps each pass ID to the set of pass IDs which depend upon it.\n  incoming: Map<NodeID, Set<NodeID>>;\n\n  // Maps each pass ID to the set of pass IDs on which it depends.\n  outgoing: Map<NodeID, Set<NodeID>>;\n}\n\nexport class ProgramMap {\n  public readonly blueprint: Blueprint;\n  public readonly shaders: ShaderMap;\n  public readonly buffers: BufferMap;\n  public readonly textures: TextureMap;\n  public readonly samplers: SamplerMap;\n  public readonly passes: PassMap;\n  public readonly bindings: BindingsMap;\n  public readonly bufferUsage: BufferUsageMap;\n  public readonly textureUsage: TextureUsageMap;\n  public readonly passOrder: NodeID[];\n\n  constructor(blueprint: Blueprint) {\n    this.blueprint = deepCopy(blueprint);\n    this.shaders = new Map(\n      Object.values(this.blueprint.shaders).map(s => [s.id, s])\n    );\n    this.buffers = new Map();\n    this.textures = new Map();\n    this.samplers = new Map();\n    this.passes = new Map();\n    this.bindings = new Map();\n    this.bufferUsage = new Map();\n    this.textureUsage = new Map();\n    this.passOrder = [];\n    this.populate_();\n  }\n\n  populate_() {\n    const bindingNodes = [];\n    const queueDeps = { incoming: new Map(), outgoing: new Map() };\n    for (const [id, node] of Object.entries(this.blueprint.nodes)) {\n      switch (node.type) {\n        case 'buffer':\n          this.buffers.set(id, node);\n          break;\n\n        case 'texture':\n          this.textures.set(id, node);\n          break;\n\n        case 'sampler':\n          this.samplers.set(id, node);\n          break;\n\n        case 'connection':\n          switch (node.connectionType) {\n            case 'binding':\n              bindingNodes.push(node);\n              break;\n\n            case 'queue':\n              const incoming = queueDeps.incoming.get(node.target) ?? new Set();\n              const outgoing = queueDeps.outgoing.get(node.source) ?? new Set();\n              incoming.add(node.source);\n              outgoing.add(node.target);\n              queueDeps.incoming.set(node.target, incoming);\n              queueDeps.outgoing.set(node.source, outgoing);\n              break;\n          }\n          break;\n\n        case 'compute':\n          this.passes.set(id, node);\n          break;\n\n        case 'render':\n          this.passes.set(id, node);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.populateBindings_(bindingNodes);\n    this.computePassOrder_(queueDeps);\n  }\n\n  populateBindings_(bindingNodes: BindingNodeDescriptor[]) {\n    for (const node of bindingNodes) {\n      const pass = this.passes.get(node.target);\n      if (!pass) {\n        console.warn(`ignoring unknown pass: ${node.target}`);\n        continue;\n      }\n      if (node.group >= kMaxBindGroups) {\n        console.warn(`invalid bind group ${node.group}`);\n        continue;\n      }\n      let groups = this.bindings.get(node.target);\n      if (!groups) {\n        groups = [];\n        this.bindings.set(node.target, groups);\n      }\n\n      const bindingNode = this.blueprint.nodes[node.source];\n      if (!bindingNode || bindingNode.type !== node.bindingType) {\n        console.warn(`ignoring unknown binding source ${node.source}`);\n        continue;\n      }\n      switch (node.bindingType) {\n        case 'buffer':\n          const buffer = this.buffers.get(bindingNode.id);\n          if (!buffer) {\n            console.warn(`ignoring unknown buffer: ${node.source}`);\n            continue;\n          }\n          this.compileBufferBinding_(pass.type, groups, buffer, node);\n          break;\n\n        case 'texture':\n          const texture = this.textures.get(bindingNode.id);\n          if (!texture) {\n            console.warn(`ignoring unknown texture: ${node.source}`);\n            continue;\n          }\n          this.compileTextureBinding_(pass.type, groups, texture, node);\n          break;\n\n        case 'sampler':\n          const sampler = this.samplers.get(bindingNode.id);\n          if (!sampler) {\n            console.warn(`ignoring unknown sampler: ${node.source}`);\n            continue;\n          }\n          this.compileSamplerBinding_(pass.type, groups, sampler, node);\n          break;\n      }\n    }\n  }\n\n  computePassOrder_(queueDeps: QueueDeps) {\n    // The initial working set is the set of all passes with no incoming queue\n    // dependencies.\n    const startNodes: Set<NodeID> = new Set(this.passes.keys());\n    for (const target of queueDeps.incoming.keys()) {\n      startNodes.delete(target);\n    }\n\n    // Iteratively append nodes as their dependencies are met.\n    let thisPhase = Array.from(startNodes);\n    while (thisPhase.length !== 0) {\n      this.passOrder.push(...thisPhase);\n      const nextPhase: NodeID[] = [];\n      for (const added of thisPhase) {\n        const targets = queueDeps.outgoing.get(added);\n        if (!targets) {\n          continue;\n        }\n        for (const target of targets.values()) {\n          const incomingDeps = queueDeps.incoming.get(target);\n          if (incomingDeps) {\n            incomingDeps.delete(added);\n            if (incomingDeps.size === 0) {\n              nextPhase.push(target);\n            }\n          }\n        }\n      }\n      thisPhase = nextPhase;\n    }\n  }\n\n  compileBufferBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    buffer: BufferNodeDescriptor,\n    binding: BufferBindingNodeDescriptor\n  ) {\n    let newUsage = 0;\n    let bufferType: GPUBufferBindingType;\n    switch (binding.storageType) {\n      case 'storage-read':\n        newUsage = GPUBufferUsage.STORAGE;\n        bufferType = 'read-only-storage';\n        break;\n\n      case 'storage':\n        newUsage = GPUBufferUsage.STORAGE;\n        bufferType = 'storage';\n        break;\n\n      case 'uniform':\n        newUsage = GPUBufferUsage.UNIFORM;\n        bufferType = 'uniform';\n        break;\n    }\n\n    this.bufferUsage.set(\n      buffer.id,\n      (this.bufferUsage.get(buffer.id) ?? 0) | newUsage\n    );\n\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      buffer: { type: bufferType },\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, buffer);\n  }\n\n  compileTextureBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    texture: TextureNodeDescriptor,\n    binding: TextureBindingNodeDescriptor\n  ) {\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      texture: {},\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, texture);\n  }\n\n  compileSamplerBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    sampler: SamplerNodeDescriptor,\n    binding: SamplerBindingNodeDescriptor\n  ) {\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      sampler: {},\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, sampler);\n  }\n}\n\nfunction addBindGroupEntry(\n  groups: BindGroup[],\n  group: number,\n  layoutEntry: GPUBindGroupLayoutEntry,\n  node: BindableNode\n) {\n  while (group >= groups.length) {\n    groups.push(new Map());\n  }\n  const binding = layoutEntry.binding;\n  const groupBindings = groups[group];\n  if (groupBindings.has(binding)) {\n    console.warn(`ignoring duplicate binding (${group}, ${binding})`);\n    return;\n  }\n  groupBindings.set(binding, { layoutEntry, node });\n}\n\nfunction visibilityForPass(passType: PassType): GPUShaderStageFlags {\n  if (passType === 'render') {\n    return GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT;\n  }\n  return GPUShaderStage.COMPUTE;\n}\n","import { objectPromiseAll } from '../../base/Util';\nimport { Blueprint } from '../Blueprint';\nimport { CompiledBufferCache, createCompiledBufferCache } from './Buffer';\nimport { CompiledSamplerCache, createCompiledSamplerCache } from './Sampler';\nimport { CompiledShaderCache, createCompiledShaderCache } from './Shader';\nimport { CompiledTextureCache, createCompiledTextureCache } from './Texture';\nimport { ProgramMap } from './ProgramMap';\n\ninterface Caches {\n  readonly shaders: CompiledShaderCache;\n  readonly buffers: CompiledBufferCache;\n  readonly textures: CompiledTextureCache;\n  readonly samplers: CompiledSamplerCache;\n}\n\nexport class CompiledResourceBundle {\n  private device_: GPUDevice;\n  private lastCompile_: null | Promise<CompiledResourceBundle>;\n  private caches_: Caches;\n\n  public programMap: null | ProgramMap;\n\n  constructor(device: GPUDevice, programMap?: ProgramMap, caches?: Caches) {\n    this.device_ = device;\n    this.lastCompile_ = null;\n    if (!caches) {\n      this.caches_ = {\n        shaders: createCompiledShaderCache(device),\n        buffers: createCompiledBufferCache(device),\n        textures: createCompiledTextureCache(device),\n        samplers: createCompiledSamplerCache(device),\n      };\n    } else {\n      this.caches_ = caches;\n    }\n\n    this.programMap = programMap ?? null;\n  }\n\n  get shaders() {\n    return this.caches_.shaders;\n  }\n  get buffers() {\n    return this.caches_.buffers;\n  }\n  get textures() {\n    return this.caches_.textures;\n  }\n  get samplers() {\n    return this.caches_.samplers;\n  }\n\n  async compile(blueprint: Blueprint): Promise<CompiledResourceBundle> {\n    const thisCompile = this.doCompile_(blueprint);\n    this.lastCompile_ = thisCompile;\n    const newResources = await thisCompile;\n    if (this.lastCompile_ !== thisCompile) {\n      return this.lastCompile_!;\n    }\n\n    this.caches_.shaders.releaseKeysAndDisposeRemainder(\n      newResources.shaders.keys\n    );\n    this.caches_.buffers.releaseKeysAndDisposeRemainder(\n      newResources.buffers.keys\n    );\n    this.caches_.textures.releaseKeysAndDisposeRemainder(\n      newResources.textures.keys\n    );\n    this.caches_.samplers.releaseKeysAndDisposeRemainder(\n      newResources.samplers.keys\n    );\n    return newResources;\n  }\n\n  async doCompile_(blueprint: Blueprint): Promise<CompiledResourceBundle> {\n    const programMap = new ProgramMap(blueprint);\n    const shaders = this.caches_.shaders.compile(\n      programMap.shaders.values(),\n      programMap\n    );\n    const buffers = this.caches_.buffers.compile(\n      programMap.buffers.values(),\n      programMap\n    );\n    const textures = this.caches_.textures.compile(\n      programMap.textures.values(),\n      programMap\n    );\n    const samplers = this.caches_.samplers.compile(\n      programMap.samplers.values(),\n      programMap\n    );\n    return new CompiledResourceBundle(\n      this.device_,\n      programMap,\n      await objectPromiseAll({ shaders, buffers, textures, samplers })\n    );\n  }\n}\n","import { ComputeNodeDescriptor, RenderNodeDescriptor } from '../Blueprint';\n\nexport type PassType = 'render' | 'compute';\n\nexport type LinkedPass = LinkedRenderPass | LinkedComputePass;\n\nexport interface LinkedRenderPass {\n  type: 'render';\n  descriptor: RenderNodeDescriptor;\n  bundle: GPURenderBundle;\n}\n\nexport interface LinkedComputePass {\n  type: 'compute';\n  descriptor: ComputeNodeDescriptor;\n  bindGroups: GPUBindGroup[];\n  pipeline: GPUComputePipeline;\n}\n\nexport class Executable {\n  private readonly device_: GPUDevice;\n  private readonly passes_: LinkedPass[];\n  private outputDepthStencilTexture_: null | GPUTexture;\n  private outputDepthStencilTextureSize_: GPUExtent3DDict;\n\n  constructor(device: GPUDevice, passes: LinkedPass[]) {\n    this.device_ = device;\n    this.passes_ = passes;\n    this.outputDepthStencilTexture_ = null;\n    this.outputDepthStencilTextureSize_ = { width: 0, height: 0 };\n  }\n\n  run(texture: GPUTexture, { width, height }: GPUExtent3DDict) {\n    const device = this.device_;\n\n    // TODO: configurable depth/stencil state\n    if (\n      this.outputDepthStencilTexture_ === null ||\n      this.outputDepthStencilTextureSize_.width !== width ||\n      this.outputDepthStencilTextureSize_.height !== height\n    ) {\n      if (this.outputDepthStencilTexture_ !== null) {\n        this.outputDepthStencilTexture_.destroy();\n        this.outputDepthStencilTexture_ = null;\n      }\n\n      this.outputDepthStencilTexture_ = device.createTexture({\n        size: { width, height },\n        format: 'depth24plus-stencil8',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      this.outputDepthStencilTextureSize_ = { width, height };\n    }\n\n    device.queue.submit([this.encodeCommands_(texture)]);\n  }\n\n  encodeCommands_(texture: GPUTexture) {\n    const encoder = this.device_.createCommandEncoder();\n    for (const pass of this.passes_) {\n      switch (pass.type) {\n        case 'render':\n          this.encodeRenderCommands_(pass, encoder, texture);\n          break;\n\n        case 'compute':\n          this.encodeComputeCommands_(pass, encoder);\n          break;\n      }\n    }\n    return encoder.finish();\n  }\n\n  encodeRenderCommands_(\n    pass: LinkedRenderPass,\n    encoder: GPUCommandEncoder,\n    texture: GPUTexture\n  ) {\n    const loadValue = pass.descriptor.clear\n      ? pass.descriptor.clearColor ?? { r: 0, g: 0, b: 0, a: 1 }\n      : ('load' as const);\n    const depthStencilTexture = this.outputDepthStencilTexture_!;\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: texture.createView(),\n          loadValue,\n          storeOp: 'store' as const,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthLoadValue: pass.descriptor.clear ? 1 : 'load',\n        depthStoreOp: 'store',\n        stencilLoadValue: 1,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPass.executeBundles([pass.bundle]);\n    renderPass.endPass();\n  }\n\n  encodeComputeCommands_(pass: LinkedComputePass, encoder: GPUCommandEncoder) {\n    const computePass = encoder.beginComputePass();\n    const dispatchSize = pass.descriptor.dispatchSize;\n    computePass.setPipeline(pass.pipeline);\n    pass.bindGroups.forEach((group, i) => {\n      computePass.setBindGroup(i, group);\n    });\n    computePass.dispatch(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n    computePass.endPass();\n  }\n}\n","import {\n  Blueprint,\n  ComputeNodeDescriptor,\n  NodeID,\n  RenderNodeDescriptor,\n} from '../Blueprint';\nimport { CompiledResourceBundle } from './CompiledResourceBundle';\nimport {\n  LinkedComputePass,\n  LinkedPass,\n  LinkedRenderPass,\n  Executable,\n} from './Executable';\nimport { BindGroupEntry, PassNode } from './ProgramMap';\n\ninterface LinkedBindings {\n  pipelineLayout: GPUPipelineLayout;\n  bindGroups: GPUBindGroup[];\n}\n\nfunction getResourceForBinding(\n  entry: BindGroupEntry,\n  resources: CompiledResourceBundle\n): null | GPUBindingResource {\n  const node = entry.node;\n  switch (node.type) {\n    case 'buffer':\n      const buffer = resources.buffers.get(node.id);\n      if (!buffer) {\n        console.warn(`unable to bind missing buffer ${node.name}`);\n        return null;\n      }\n      return { buffer: buffer.buffer };\n\n    case 'texture':\n      const texture = resources.textures.get(node.id);\n      if (!texture) {\n        console.warn(`unable to bind missing texture ${node.name}`);\n        return null;\n      }\n      return texture.texture.createView();\n\n    case 'sampler':\n      const sampler = resources.samplers.get(node.id);\n      if (!sampler) {\n        console.warn(`unable to bind missing sampler ${node.name}`);\n        return null;\n      }\n      return sampler.sampler;\n  }\n}\n\nfunction linkBindings(\n  passId: NodeID,\n  device: GPUDevice,\n  resources: CompiledResourceBundle,\n  visibility: GPUShaderStageFlags,\n  builtinUniforms: GPUBuffer\n): LinkedBindings {\n  const groups = resources.programMap!.bindings.get(passId) ?? [];\n  const layoutEntries: GPUBindGroupLayoutEntry[][] = [];\n  const groupEntries: GPUBindGroupEntry[][] = [];\n  for (const group of groups) {\n    const newLayoutEntries: GPUBindGroupLayoutEntry[] = [];\n    const newGroupEntries: GPUBindGroupEntry[] = [];\n    for (const entry of group.values()) {\n      const resource = getResourceForBinding(entry, resources);\n      if (!resource) {\n        continue;\n      }\n\n      newLayoutEntries.push(entry.layoutEntry);\n      newGroupEntries.push({\n        binding: entry.layoutEntry.binding,\n        resource,\n      });\n    }\n    layoutEntries.push(newLayoutEntries);\n    groupEntries.push(newGroupEntries);\n  }\n\n  if (layoutEntries.length === 0) {\n    layoutEntries.push([]);\n    groupEntries.push([]);\n  }\n\n  layoutEntries[0].unshift({\n    binding: 0,\n    visibility,\n    buffer: { type: 'uniform' },\n  });\n  groupEntries[0].unshift({\n    binding: 0,\n    resource: { buffer: builtinUniforms },\n  });\n\n  const bindGroupLayouts: GPUBindGroupLayout[] = [];\n  const bindGroups: GPUBindGroup[] = [];\n  layoutEntries.forEach((entries, i) => {\n    const layout = device.createBindGroupLayout({ entries });\n    bindGroupLayouts.push(layout);\n    bindGroups.push(\n      device.createBindGroup({\n        layout,\n        entries: groupEntries[i],\n      })\n    );\n  });\n\n  const pipelineLayout = device.createPipelineLayout({ bindGroupLayouts });\n  return { pipelineLayout, bindGroups };\n}\n\nfunction linkRenderPass(\n  device: GPUDevice,\n  id: NodeID,\n  node: RenderNodeDescriptor,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | LinkedRenderPass {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const vertexDescriptor = blueprint.shaders[node.vertexShader];\n  const fragmentDescriptor = blueprint.shaders[node.fragmentShader];\n  if (!vertexDescriptor || !fragmentDescriptor) {\n    return null;\n  }\n  const vertexShader = resources.shaders.get(vertexDescriptor.id);\n  const fragmentShader = resources.shaders.get(fragmentDescriptor.id);\n  if (\n    !vertexShader ||\n    !fragmentShader ||\n    !vertexShader.module ||\n    !fragmentShader.module\n  ) {\n    return null;\n  }\n\n  const bindings = linkBindings(\n    id,\n    device,\n    resources,\n    GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    builtinUniforms\n  );\n  const topology = node.topology ?? 'triangle-list';\n  const stripIndexFormat =\n    topology === 'line-strip' || topology === 'triangle-strip'\n      ? 'uint32'\n      : undefined;\n  const pipeline = device.createRenderPipeline({\n    layout: bindings.pipelineLayout,\n    vertex: {\n      module: vertexShader.module,\n      entryPoint: node.vertexEntryPoint,\n    },\n    primitive: {\n      topology,\n      stripIndexFormat,\n      cullMode: 'none',\n    },\n    fragment: {\n      targets: [{ format: outputFormat }],\n      module: fragmentShader.module,\n      entryPoint: node.fragmentEntryPoint,\n    },\n    depthStencil: {\n      format: 'depth24plus-stencil8',\n      depthWriteEnabled: true,\n      depthCompare: node.depthTest ?? 'always',\n    },\n  });\n  const encoder = device.createRenderBundleEncoder({\n    colorFormats: [outputFormat],\n    depthStencilFormat: 'depth24plus-stencil8',\n  });\n  encoder.setPipeline(pipeline);\n  bindings.bindGroups.forEach((group, i) => {\n    if (group) {\n      encoder.setBindGroup(i, group);\n    }\n  });\n  encoder.draw(node.numVertices, node.numInstances);\n  return {\n    type: 'render',\n    descriptor: node,\n    bundle: encoder.finish(),\n  };\n}\n\nfunction linkComputePass(\n  device: GPUDevice,\n  id: NodeID,\n  node: ComputeNodeDescriptor,\n  builtinUniforms: GPUBuffer,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | LinkedComputePass {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const shaderDescriptor = blueprint.shaders[node.shader];\n  if (!shaderDescriptor) {\n    return null;\n  }\n  const shader = resources.shaders.get(shaderDescriptor.id);\n  if (!shader || !shader.module) {\n    return null;\n  }\n\n  const bindings = linkBindings(\n    id,\n    device,\n    resources,\n    GPUShaderStage.COMPUTE,\n    builtinUniforms\n  );\n  const pipeline = device.createComputePipeline({\n    layout: bindings.pipelineLayout,\n    compute: {\n      module: shader.module,\n      entryPoint: node.entryPoint,\n    },\n  });\n  return {\n    type: 'compute',\n    descriptor: node,\n    bindGroups: bindings.bindGroups,\n    pipeline,\n  };\n}\n\nfunction linkPass(\n  device: GPUDevice,\n  id: NodeID,\n  node: PassNode,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | LinkedPass {\n  if (node.type === 'render') {\n    return linkRenderPass(\n      device,\n      id,\n      node,\n      builtinUniforms,\n      outputFormat,\n      resources,\n      blueprint\n    );\n  }\n  return linkComputePass(\n    device,\n    id,\n    node,\n    builtinUniforms,\n    resources,\n    blueprint\n  );\n}\n\nexport function linkProgram(\n  device: GPUDevice,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | Executable {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const passes = resources.programMap.passes;\n  const linkedPasses = resources.programMap.passOrder.map(id =>\n    linkPass(\n      device,\n      id,\n      passes.get(id)!,\n      builtinUniforms,\n      outputFormat,\n      resources,\n      blueprint\n    )\n  );\n  return new Executable(\n    device,\n    linkedPasses.filter(pass => pass !== null) as LinkedPass[]\n  );\n}\n","import { Blueprint, ShaderID } from './Blueprint';\nimport { CompiledResourceBundle } from './program/CompiledResourceBundle';\nimport { Executable } from './program/Executable';\nimport { linkProgram } from './program/Linker';\nimport { ShaderCompilationMessage } from './program/Shader';\n\nexport type ShaderCompilationResults = Map<\n  ShaderID,\n  ShaderCompilationMessage[]\n>;\n\nexport type ShadersCompiledHandler = (\n  results: ShaderCompilationResults\n) => void;\n\nexport class Program {\n  private readonly device_: GPUDevice;\n  private readonly builtinUniforms_: GPUBuffer;\n  private resources_: CompiledResourceBundle;\n  private executable_: null | Executable;\n  private blueprint_: null | Blueprint;\n  private outputFormat_: GPUTextureFormat;\n  private onShadersCompiled_: null | ShadersCompiledHandler;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n    this.builtinUniforms_ = device.createBuffer({\n      size: 24,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    this.executable_ = null;\n    this.blueprint_ = null;\n    this.resources_ = new CompiledResourceBundle(device);\n    this.outputFormat_ = 'bgra8unorm';\n    this.onShadersCompiled_ = null;\n  }\n\n  get resources() {\n    return this.resources_;\n  }\n\n  set onShadersCompiled(handler: null | ShadersCompiledHandler) {\n    this.onShadersCompiled_ = handler;\n  }\n\n  dispose() {\n    this.builtinUniforms_.destroy();\n    this.resources_.shaders.dispose();\n    this.resources_.buffers.dispose();\n    this.resources_.textures.dispose();\n    this.resources_.samplers.dispose();\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    this.blueprint_ = blueprint;\n    this.compile_();\n  }\n\n  updateUniforms(uniforms: Record<string, any>) {\n    const device = this.device_;\n    const data = new ArrayBuffer(24);\n    const floats = new Float32Array(data);\n    const uints = new Uint32Array(data);\n    floats[0] = (uniforms['time'] as number) ?? 0;\n    floats[1] = (uniforms['timeDelta'] as number) ?? 0;\n    uints[2] = (uniforms['frame'] as number) ?? 0;\n    uints[4] = uniforms['resolution']?.width ?? 1;\n    uints[5] = uniforms['resolution']?.height ?? 1;\n    device.queue.writeBuffer(this.builtinUniforms_, 0, data, 0, 24);\n  }\n\n  run(\n    texture: GPUTexture,\n    resolution: GPUExtent3DDict,\n    outputFormat: GPUTextureFormat\n  ) {\n    if (this.outputFormat_ !== outputFormat && this.blueprint_ !== null) {\n      this.executable_ = null;\n      this.outputFormat_ = outputFormat;\n      this.compile_();\n      return;\n    }\n\n    if (this.executable_ === null) {\n      return;\n    }\n\n    this.executable_.run(texture, resolution);\n  }\n\n  async compile_() {\n    const blueprint = this.blueprint_!;\n    this.resources_ = await this.resources_.compile(blueprint);\n    if (this.onShadersCompiled_) {\n      const results = new Map();\n      for (const [id, shader] of this.resources_.shaders.entries) {\n        results.set(id, shader.messages);\n      }\n      this.onShadersCompiled_(results);\n    }\n    this.executable_ = linkProgram(\n      this.device_,\n      this.builtinUniforms_,\n      this.outputFormat_,\n      this.resources_,\n      blueprint\n    );\n  }\n}\n","import { deepCopy, deepEquals } from '../base/Util';\nimport { Blueprint } from './Blueprint';\nimport { Gpu } from './Gpu';\nimport { Program, ShadersCompiledHandler } from './Program';\n\nconst getContextFromCanvas = (\n  canvas: HTMLCanvasElement\n): null | GPUCanvasContext => {\n  return canvas.getContext('webgpu') as null | GPUCanvasContext;\n};\n\nexport class FrameProducer {\n  private gpu_: Gpu;\n\n  private lastUsedContext_?: GPUCanvasContext;\n  private lastUsedResolution_?: GPUExtent3DDict;\n\n  private startTime_?: number;\n  private lastFrameTime_?: number;\n  private frame_: number;\n\n  private blueprint_: null | Blueprint;\n  private program_: null | Program;\n\n  private onShadersCompiled_?: ShadersCompiledHandler;\n\n  constructor() {\n    this.gpu_ = new Gpu();\n    this.gpu_.onAcquired = this.onGpuAcquired_;\n    this.frame_ = 0;\n    this.blueprint_ = null;\n    this.program_ = null;\n  }\n\n  reconfigure() {}\n\n  set onShadersCompiled(handler: ShadersCompiledHandler) {\n    this.onShadersCompiled_ = handler;\n    if (this.program_) {\n      this.program_.onShadersCompiled = handler;\n    }\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    if (this.blueprint_ && deepEquals(this.blueprint_, blueprint)) {\n      return;\n    }\n\n    this.blueprint_ = deepCopy(blueprint);\n    if (this.program_) {\n      this.program_.setBlueprint(blueprint);\n    }\n  }\n\n  stop() {\n    this.blueprint_ = null;\n    this.program_ = null;\n  }\n\n  render(canvas: HTMLCanvasElement, resolution: GPUExtent3DDict) {\n    if (!this.gpu_ || !this.gpu_.isAcquired || !this.program_) {\n      return;\n    }\n\n    const context = getContextFromCanvas(canvas);\n    if (context === null) {\n      this.stop();\n      throw new Error('no webgpu context');\n    }\n\n    const device = this.gpu_.device!;\n    const outputFormat: GPUTextureFormat = context.getPreferredFormat(\n      this.gpu_.adapter!\n    );\n\n    if (\n      !this.lastUsedContext_ ||\n      !this.lastUsedResolution_ ||\n      this.lastUsedContext_ !== context ||\n      this.lastUsedResolution_.width !== resolution.width ||\n      this.lastUsedResolution_.height !== resolution.height\n    ) {\n      context.configure({\n        device,\n        format: outputFormat,\n        size: { ...resolution },\n      });\n      this.lastUsedResolution_ = { ...resolution };\n    }\n\n    // This is an egregious hack to get consistent nearest-neighbor filtering on\n    // a scaled-up canvas texture in Chrome. See crbug.com/1044590.\n    canvas.style.filter = 'blur(0px)';\n\n    const now = new Date().getTime();\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n    const delta = now - (this.lastFrameTime_ ?? now);\n    this.lastFrameTime_ = now;\n\n    this.program_.updateUniforms({\n      time: (now - this.startTime_) / 1000,\n      timeDelta: delta / 1000,\n      frame: this.frame_++,\n      resolution,\n    });\n    this.program_.run(context.getCurrentTexture(), resolution, outputFormat);\n  }\n\n  onGpuAcquired_ = () => {\n    if (this.program_) {\n      this.program_.dispose();\n    }\n    this.program_ = new Program(this.gpu_.device!);\n    if (this.blueprint_) {\n      this.program_.setBlueprint(this.blueprint_);\n    }\n    if (this.onShadersCompiled_) {\n      this.program_.onShadersCompiled = this.onShadersCompiled_;\n    }\n  };\n}\n","import 'codemirror/theme/3024-day.css';\nimport 'codemirror/theme/3024-night.css';\nimport 'codemirror/theme/abbott.css';\nimport 'codemirror/theme/abcdef.css';\nimport 'codemirror/theme/ambiance-mobile.css';\nimport 'codemirror/theme/ambiance.css';\nimport 'codemirror/theme/ayu-dark.css';\nimport 'codemirror/theme/ayu-mirage.css';\nimport 'codemirror/theme/base16-dark.css';\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/bespin.css';\nimport 'codemirror/theme/blackboard.css';\nimport 'codemirror/theme/cobalt.css';\nimport 'codemirror/theme/colorforth.css';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/duotone-dark.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/theme/elegant.css';\nimport 'codemirror/theme/erlang-dark.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/theme/hopscotch.css';\nimport 'codemirror/theme/icecoder.css';\nimport 'codemirror/theme/idea.css';\nimport 'codemirror/theme/isotope.css';\nimport 'codemirror/theme/juejin.css';\nimport 'codemirror/theme/lesser-dark.css';\nimport 'codemirror/theme/liquibyte.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/theme/material-darker.css';\nimport 'codemirror/theme/material-ocean.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/mbo.css';\nimport 'codemirror/theme/mdn-like.css';\nimport 'codemirror/theme/midnight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/moxer.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/theme/neo.css';\nimport 'codemirror/theme/night.css';\nimport 'codemirror/theme/nord.css';\nimport 'codemirror/theme/oceanic-next.css';\nimport 'codemirror/theme/panda-syntax.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/paraiso-light.css';\nimport 'codemirror/theme/pastel-on-dark.css';\nimport 'codemirror/theme/railscasts.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/theme/seti.css';\nimport 'codemirror/theme/shadowfox.css';\nimport 'codemirror/theme/solarized.css';\nimport 'codemirror/theme/ssms.css';\nimport 'codemirror/theme/the-matrix.css';\nimport 'codemirror/theme/tomorrow-night-bright.css';\nimport 'codemirror/theme/tomorrow-night-eighties.css';\nimport 'codemirror/theme/ttcn.css';\nimport 'codemirror/theme/twilight.css';\nimport 'codemirror/theme/vibrant-ink.css';\nimport 'codemirror/theme/xq-dark.css';\nimport 'codemirror/theme/xq-light.css';\nimport 'codemirror/theme/yeti.css';\nimport 'codemirror/theme/yonce.css';\nimport 'codemirror/theme/zenburn.css';\n\nexport const CODE_MIRROR_THEMES = [\n  '3024-day',\n  '3024-night',\n  'abbott',\n  'abcdef',\n  'ambiance-mobile',\n  'ambiance',\n  'ayu-dark',\n  'ayu-mirage',\n  'base16-dark',\n  'base16-light',\n  'bespin',\n  'blackboard',\n  'cobalt',\n  'colorforth',\n  'darcula',\n  'dracula',\n  'duotone-dark',\n  'duotone-light',\n  'eclipse',\n  'elegant',\n  'erlang-dark',\n  'gruvbox-dark',\n  'hopscotch',\n  'icecoder',\n  'idea',\n  'isotope',\n  'juejin',\n  'lesser-dark',\n  'liquibyte',\n  'lucario',\n  'material-darker',\n  'material-ocean',\n  'material-palenight',\n  'material',\n  'mbo',\n  'mdn-like',\n  'midnight',\n  'monokai',\n  'moxer',\n  'neat',\n  'neo',\n  'night',\n  'nord',\n  'oceanic-next',\n  'panda-syntax',\n  'paraiso-dark',\n  'paraiso-light',\n  'pastel-on-dark',\n  'railscasts',\n  'rubyblue',\n  'seti',\n  'shadowfox',\n  'solarized',\n  'ssms',\n  'the-matrix',\n  'tomorrow-night-bright',\n  'tomorrow-night-eighties',\n  'ttcn',\n  'twilight',\n  'vibrant-ink',\n  'xq-dark',\n  'xq-light',\n  'yeti',\n  'yonce',\n  'zenburn',\n];\n","import './LabeledField.css';\n\nimport React from 'react';\n\ninterface Props {\n  label: string;\n  children: React.ReactNode;\n}\n\nexport const LabeledField = ({ label, children }: Props) => {\n  return (\n    <div className=\"LabeledField\">\n      <div className=\"Label\">{label}</div>\n      <div className=\"Field\">{children}</div>\n    </div>\n  );\n};\n","import './ControlPanel.css';\n\nimport React from 'react';\n\nimport {\n  Blueprint,\n  deserializeBlueprint,\n  serializeBlueprint,\n  SerializedBlueprint,\n} from '../gpu/Blueprint';\nimport { CODE_MIRROR_THEMES } from './CodeMirrorThemes';\nimport { DisplayConfig } from './Display';\nimport { LabeledField } from './LabeledField';\n\ninterface Props {\n  blueprint: Blueprint;\n  displayConfig: DisplayConfig;\n  onDisplayConfigChange: (change: Partial<DisplayConfig>) => void;\n  savedBlueprints: Record<string, SerializedBlueprint>;\n  onSaveBlueprint: (name: string) => void;\n  onLoadBlueprint: (name: string) => void;\n  onImportBlueprint: (blueprint: SerializedBlueprint) => void;\n  onDeleteBlueprint: (name: string) => void;\n  codeMirrorTheme: string;\n  onCodeMirrorThemeChange: (name: string) => void;\n}\n\ninterface State {\n  optionsVisible: boolean;\n  loadMenuVisible: boolean;\n  pasteMenuVisible: boolean;\n}\n\nexport class ControlPanel extends React.Component<Props, State> {\n  private pixelSizeToggleRef_: React.RefObject<HTMLInputElement>;\n  private pixelSizeRef_: React.RefObject<HTMLInputElement>;\n  private framebufferWidthRef_: React.RefObject<HTMLInputElement>;\n  private framebufferHeightRef_: React.RefObject<HTMLInputElement>;\n  private importRef_: React.RefObject<HTMLTextAreaElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      optionsVisible: false,\n      loadMenuVisible: false,\n      pasteMenuVisible: false,\n    };\n\n    this.pixelSizeToggleRef_ = React.createRef();\n    this.pixelSizeRef_ = React.createRef();\n    this.framebufferWidthRef_ = React.createRef();\n    this.framebufferHeightRef_ = React.createRef();\n    this.importRef_ = React.createRef();\n  }\n\n  render() {\n    const displayConfig = this.props.displayConfig;\n    const makeAspectOption = (ratio: string) => (\n      <label>\n        <input\n          type=\"radio\"\n          name=\"aspect\"\n          value={ratio}\n          onChange={this.setAspectRatio_}\n          checked={ratio === displayConfig.aspect}\n        />\n        {ratio}\n      </label>\n    );\n\n    return (\n      <div className=\"ControlPanel\">\n        <button\n          className=\"Toggle\"\n          title=\"Options\"\n          onClick={this.toggleOptions_}\n        >\n          ⚙️\n        </button>\n        <button\n          className=\"Toggle\"\n          title=\"Toggle Fullscreen\"\n          onClick={this.enterFullscreen_}\n        >\n          🖥️\n        </button>\n        {this.state.optionsVisible && (\n          <div className=\"OptionsPanel\">\n            <h1>Display Options</h1>\n            <h2>Aspect Ratio</h2>\n            {makeAspectOption('None')}\n            {makeAspectOption('1:1')}\n            {makeAspectOption('4:3')}\n            {makeAspectOption('16:9')}\n            {makeAspectOption('16:10')}\n            <h2>Resolution</h2>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"pixel\"\n                ref={this.pixelSizeToggleRef_}\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'pixel'}\n              />\n              Fixed Pixel Size\n              <input\n                type=\"number\"\n                name=\"pixelSize\"\n                value={displayConfig.resolution.pixelSize ?? 1}\n                ref={this.pixelSizeRef_}\n                style={{ width: '3em', marginLeft: '1em' }}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"framebuffer\"\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'framebuffer'}\n              />\n              Fixed Framebuffer Size\n              <input\n                type=\"text\"\n                name=\"framebufferWidth\"\n                style={{ width: '4em', marginLeft: '1em' }}\n                ref={this.framebufferWidthRef_}\n                value={displayConfig.resolution.framebufferSize?.width ?? 4}\n                onChange={this.updateResolution_}\n              />\n              x\n              <input\n                type=\"text\"\n                name=\"framebufferHeight\"\n                style={{ width: '4em' }}\n                ref={this.framebufferHeightRef_}\n                value={displayConfig.resolution.framebufferSize?.height ?? 4}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <h1>Editor Options</h1>\n            <LabeledField label=\"Theme\">\n              <select\n                value={this.props.codeMirrorTheme}\n                onChange={e =>\n                  this.props.onCodeMirrorThemeChange(e.currentTarget.value)\n                }\n              >\n                {CODE_MIRROR_THEMES.map(theme => {\n                  return (\n                    <option key={theme} value={theme}>\n                      {theme}\n                    </option>\n                  );\n                })}\n              </select>\n            </LabeledField>\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.saveBlueprint_}\n          title=\"Save Blueprint\"\n        >\n          💾\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.toggleLoadBlueprintPanel_}\n          title=\"Load Blueprint\"\n        >\n          📂\n        </button>\n        {this.state.loadMenuVisible && (\n          <div className=\"LoadBlueprintPanel\">\n            <h1>Saved Shaders</h1>\n            {Object.entries(this.props.savedBlueprints).map(\n              ([name, blueprint]) => {\n                return (\n                  <div key={name} className=\"LoadMenuItem\">\n                    <div\n                      className=\"LoadMenuName\"\n                      onClick={() => this.loadBlueprint_(name)}\n                    >\n                      {name}\n                    </div>\n                    <button\n                      className=\"LoadMenuRemove\"\n                      onClick={() => this.deleteBlueprint_(name)}\n                    >\n                      x\n                    </button>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.copyBlueprintToClipboard_}\n          title=\"Copy Blueprint To Clipboard\"\n        >\n          📋\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.togglePasteMenu_}\n          title=\"Paste Blueprint From Clipboard\"\n        >\n          ⬇\n        </button>\n        {this.state.pasteMenuVisible && (\n          <div className=\"PasteBlueprintPanel\">\n            <h1>Import From Clipboard</h1>\n            Paste it here:\n            <textarea ref={this.importRef_} />\n            <button title=\"Import\" onClick={this.importBlueprintFromClipboard_}>\n              Import\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  saveBlueprint_ = () => {\n    const name = prompt('Name it!');\n    if (name === null || name === '') {\n      return;\n    }\n\n    this.props.onSaveBlueprint(name);\n  };\n\n  loadBlueprint_ = (name: string) => {\n    this.props.onLoadBlueprint(name);\n    this.toggleLoadBlueprintPanel_();\n  };\n\n  copyBlueprintToClipboard_ = async () => {\n    navigator.clipboard.writeText(\n      JSON.stringify(\n        await serializeBlueprint(this.props.blueprint, { serializeBlobs: true })\n      )\n    );\n  };\n\n  importBlueprintFromClipboard_ = () => {\n    this.togglePasteMenu_();\n\n    if (!this.importRef_.current) {\n      return;\n    }\n\n    const serializedBlueprint = this.importRef_.current.value;\n    const serialized = JSON.parse(\n      serializedBlueprint\n    ) as null | SerializedBlueprint;\n    if (!serialized) {\n      return;\n    }\n\n    this.props.onImportBlueprint(deserializeBlueprint(serialized));\n  };\n\n  togglePasteMenu_ = () => {\n    this.setState((state, props) => ({\n      pasteMenuVisible: !state.pasteMenuVisible,\n    }));\n  };\n\n  deleteBlueprint_ = (name: string) => {\n    this.props.onDeleteBlueprint(name);\n  };\n\n  toggleLoadBlueprintPanel_ = () => {\n    this.setState((state, props) => ({\n      loadMenuVisible: !state.loadMenuVisible,\n    }));\n  };\n\n  toggleOptions_ = () => {\n    this.setState((state, props) => ({\n      optionsVisible: !state.optionsVisible,\n    }));\n  };\n\n  enterFullscreen_ = async () => {\n    document.querySelector('canvas')!.requestFullscreen();\n  };\n\n  setAspectRatio_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onDisplayConfigChange({ aspect: e.currentTarget.value });\n    this.toggleOptions_();\n  };\n\n  updateResolution_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const target = e.currentTarget!;\n    if (\n      target === this.pixelSizeToggleRef_.current ||\n      target.name === 'pixelSize'\n    ) {\n      const pixelSize = parseInt(this.pixelSizeRef_.current!.value);\n      if (!isNaN(pixelSize)) {\n        this.props.onDisplayConfigChange({\n          resolution: {\n            mode: 'pixel',\n            pixelSize,\n          },\n        });\n      }\n      return;\n    }\n\n    const framebufferSize = {\n      width: parseInt(this.framebufferWidthRef_.current!.value),\n      height: parseInt(this.framebufferHeightRef_.current!.value),\n    };\n    if (isNaN(framebufferSize.width) || isNaN(framebufferSize.height)) {\n      return;\n    }\n\n    this.props.onDisplayConfigChange({\n      resolution: {\n        mode: 'framebuffer',\n        framebufferSize,\n      },\n    });\n  };\n}\n","import './Display.css';\n\nimport React from 'react';\n\nexport interface DisplayConfig {\n  aspect: string;\n  resolution: {\n    mode: 'pixel' | 'framebuffer';\n    pixelSize?: number;\n    framebufferSize?: { width: number; height: number };\n  };\n}\n\ninterface Props {\n  render: (canvas: HTMLCanvasElement) => void;\n  config: DisplayConfig;\n}\n\nexport class Display extends React.Component<Props> {\n  private wrapperRef_: React.RefObject<HTMLDivElement>;\n  private canvasRef_: React.RefObject<HTMLCanvasElement>;\n  private pendingFrameRequest_: null | number;\n\n  constructor(props: Props) {\n    super(props);\n    this.wrapperRef_ = React.createRef();\n    this.canvasRef_ = React.createRef();\n    this.pendingFrameRequest_ = null;\n  }\n\n  componentDidMount() {\n    const renderNextFrame = () => {\n      const wrapper = this.wrapperRef_.current!;\n      const canvas = this.canvasRef_.current!;\n      const width = wrapper.clientWidth;\n      const height = wrapper.clientHeight;\n      if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n      }\n      this.props.render(canvas);\n      this.pendingFrameRequest_ = requestAnimationFrame(renderNextFrame);\n    };\n\n    renderNextFrame();\n  }\n\n  componentWillUnmount() {\n    if (this.pendingFrameRequest_ !== null) {\n      cancelAnimationFrame(this.pendingFrameRequest_);\n      this.pendingFrameRequest_ = null;\n    }\n  }\n\n  render() {\n    const config = this.props.config;\n    const [aspectX, aspectY] = config.aspect.split(':').map(s => parseInt(s));\n    const stretch = isNaN(aspectX) || isNaN(aspectY);\n    const computedWrapperStyle: React.CSSProperties = {\n      height: stretch ? '100%' : 'auto',\n      aspectRatio: stretch ? 'auto' : `${aspectX}/${aspectY}`,\n    };\n    return (\n      <div className=\"Display\">\n        <div\n          ref={this.wrapperRef_}\n          className=\"CanvasWrapper\"\n          style={computedWrapperStyle}\n        >\n          <canvas ref={this.canvasRef_} />\n        </div>\n      </div>\n    );\n  }\n}\n","import './EditableLabel.css';\n\nimport React from 'react';\n\ninterface Props {\n  value: string;\n  enabled?: boolean;\n  emptyText?: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n  isEditing: boolean;\n}\n\nexport class EditableLabel extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value ?? '',\n      isEditing: false,\n    };\n  }\n\n  render() {\n    const isEmpty = this.state.value === '';\n    const isEditing = this.state.isEditing;\n    const editingClass = isEditing ? 'Editing' : 'NotEditing';\n    const emptyClass = isEmpty ? 'Empty' : 'NotEmpty';\n    const defaultValue = !isEmpty\n      ? this.state.value\n      : this.props.emptyText ?? '';\n    return (\n      <input\n        className={`EditableLabel ${editingClass} ${emptyClass}`}\n        type=\"text\"\n        onKeyDown={this.onKeyDown_}\n        onBlur={this.onFocusOut_}\n        defaultValue={defaultValue}\n        readOnly={!isEditing}\n        onClick={this.onClick_}\n        autoFocus\n      />\n    );\n  }\n\n  onClick_ = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.enabled === false) {\n      return;\n    }\n    this.setState({ isEditing: true });\n  };\n\n  commit_ = (untrimmedValue: string) => {\n    const value = untrimmedValue.trim();\n    if (value === '') {\n      this.setState({ isEditing: false });\n      return;\n    }\n    this.setState({ value, isEditing: false });\n    this.props.onChange(value);\n  };\n\n  onKeyDown_ = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      this.commit_(e.currentTarget.value);\n    } else if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  };\n\n  onFocusOut_ = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.commit_(e.currentTarget.value);\n  };\n}\n","import './Node.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { Blueprint, NodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\n\ntype UpdateFn<DescriptorType extends NodeDescriptor> = (\n  update: Partial<DescriptorType>\n) => void;\n\ninterface NodeData<DescriptorType extends NodeDescriptor> {\n  blueprint: Blueprint;\n  node: DescriptorType;\n  onChange: UpdateFn<DescriptorType>;\n  destroy: () => void;\n}\n\nexport interface NodeProps<DescriptorType extends NodeDescriptor> {\n  data: NodeData<DescriptorType>;\n}\n\ninterface Props {\n  title?: string;\n  className?: string;\n  node: NodeDescriptor;\n  onRename?: (name: string) => void;\n  destroy: () => void;\n  children?: ReactNode;\n}\n\nexport const Node = (props: Props) => {\n  return (\n    <div className={`Node Node-${props.node.type} ${props.className}`}>\n      <button className=\"RemoveButton\" onClick={props.destroy}></button>\n      <div className=\"Title\">{props.title}</div>\n      <div className=\"Content\">\n        {props.onRename ? (\n          <LabeledField label=\"Name\">\n            <EditableLabel value={props.node.name} onChange={props.onRename} />\n          </LabeledField>\n        ) : (\n          <div />\n        )}\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","import { Connection } from 'react-flow-renderer';\n\nimport { Blueprint, NodeDescriptor, NodeID } from '../../gpu/Blueprint';\n\ninterface ConnectionData {\n  source: NodeDescriptor;\n  target: NodeDescriptor;\n  sourceName: NodeID;\n  targetName: NodeID;\n  targetHandle: string;\n}\n\nfunction resolveConnection(\n  c: Connection,\n  blueprint: Blueprint\n): null | ConnectionData {\n  if (!c.source || !c.target) {\n    return null;\n  }\n\n  const source = blueprint.nodes[c.source];\n  const target = blueprint.nodes[c.target];\n  if (!source || !target || !c.targetHandle) {\n    return null;\n  }\n\n  return {\n    source,\n    target,\n    sourceName: c.source,\n    targetName: c.target,\n    targetHandle: c.targetHandle,\n  };\n}\n\nexport function isValidBindingConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (\n    data.source.type !== 'buffer' &&\n    data.source.type !== 'texture' &&\n    data.source.type !== 'sampler'\n  ) {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  if (data.targetHandle !== 'bindings') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: NodeDescriptor) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'binding' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n\nexport function isValidQueueConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (data.source.type !== 'render' && data.source.type !== 'compute') {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: NodeDescriptor) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'queue' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { BufferInitializer, BufferNodeDescriptor } from '../../gpu/Blueprint';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const BufferNode = (props: NodeProps<BufferNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Buffer\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Size\">\n          <input\n            type=\"number\"\n            value={node.size}\n            style={{ width: '5em', textAlign: 'right' }}\n            onChange={e =>\n              data.onChange({ size: e.currentTarget.valueAsNumber })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Init\">\n          <select\n            value={node.init}\n            style={{ width: '9em' }}\n            onChange={e =>\n              data.onChange({\n                init: e.currentTarget.value as BufferInitializer,\n              })\n            }\n          >\n            <option value=\"zero\">Zero</option>\n            <option value=\"random-floats\">Random Floats</option>\n            <option value=\"random-uints\">Random Uints</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","type Closure = () => void;\n\nexport class Debouncer {\n  private minDelayMs_: number;\n  private lastInvocationMs_: null | number;\n  private pendingInvocation_: null | ReturnType<typeof setTimeout>;\n\n  constructor(minDelayMs: number) {\n    this.minDelayMs_ = minDelayMs;\n    this.lastInvocationMs_ = null;\n    this.pendingInvocation_ = null;\n  }\n\n  invoke(f: Closure) {\n    if (this.onCooldown()) {\n      this.scheduleSuppressed(f);\n      return;\n    }\n\n    this.invokeInternal(f);\n  }\n\n  private clearPendingInvocation() {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    this.pendingInvocation_ = null;\n  }\n\n  private invokeInternal(f: Closure) {\n    this.clearPendingInvocation();\n    this.lastInvocationMs_ = Date.now();\n    f();\n  }\n\n  private onCooldown(): boolean {\n    if (this.lastInvocationMs_ === null) {\n      return false;\n    }\n    return Date.now() - this.lastInvocationMs_ < this.minDelayMs_;\n  }\n\n  private scheduleSuppressed(f: Closure) {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    const delay = this.lastInvocationMs_! + this.minDelayMs_ - Date.now();\n    this.pendingInvocation_ = setTimeout(this.invoke.bind(this, f), delay);\n  }\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { Debouncer } from '../../base/Debouncer';\nimport { RenderNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nfunction colorValue(c: GPUColorDict): string {\n  const p = (x: number) => `${x < 16 ? '0' : ''}${x.toString(16)}`;\n  const cp = [c.r, c.g, c.b].map(c => p(c * 255));\n  return `#${cp.join('')}`;\n}\n\nfunction parseColor(value: string): GPUColorDict {\n  const parseComponent = (index: number) =>\n    parseInt(value.slice(index, index + 2), 16) / 255;\n  return {\n    r: parseComponent(1),\n    g: parseComponent(3),\n    b: parseComponent(5),\n    a: 1,\n  };\n}\n\nexport const RenderNode = (props: NodeProps<RenderNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const debouncer = new Debouncer(30);\n  return (\n    <Node\n      title=\"Render Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n\n        <LabeledField label=\"Vertex Shader\">\n          <select\n            value={node.vertexShader}\n            onChange={e =>\n              data.onChange({ vertexShader: e.currentTarget.value })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Vertex Entry Point\">\n          <EditableLabel\n            value={node.vertexEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ vertexEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Fragment Shader\">\n          <select\n            value={node.fragmentShader}\n            onChange={e =>\n              data.onChange({\n                fragmentShader: e.currentTarget.value,\n              })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Fragment Entry Point\">\n          <EditableLabel\n            value={node.fragmentEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ fragmentEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Topology\">\n          <select\n            value={node.topology ?? 'triangle-list'}\n            onChange={e =>\n              data.onChange({\n                topology: e.currentTarget.value as GPUPrimitiveTopology,\n              })\n            }\n          >\n            <option value=\"point-list\">Point List</option>\n            <option value=\"line-list\">Line List</option>\n            <option value=\"line-strip\">Line Strip</option>\n            <option value=\"triangle-list\">Triangle List</option>\n            <option value=\"triangle-strip\">Triangle Strip</option>\n          </select>\n        </LabeledField>\n        <LabeledField label=\"# Vertices\">\n          <input\n            type=\"number\"\n            value={node.numVertices}\n            onChange={e =>\n              data.onChange({\n                numVertices: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"# Instances\">\n          <input\n            type=\"number\"\n            value={node.numInstances}\n            onChange={e =>\n              data.onChange({\n                numInstances: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear\">\n          <input\n            type=\"checkbox\"\n            checked={node.clear ?? false}\n            onChange={e => data.onChange({ clear: !node.clear })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear Color\">\n          <input\n            type=\"color\"\n            value={colorValue(node.clearColor ?? { r: 0, g: 0, b: 0, a: 1 })}\n            onChange={e =>\n              debouncer.invoke(() =>\n                data.onChange({ clearColor: parseColor(e.currentTarget.value) })\n              )\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Depth Test\">\n          <select\n            value={node.depthTest ?? 'always'}\n            onChange={e =>\n              data.onChange({\n                depthTest: e.currentTarget.value as GPUCompareFunction,\n              })\n            }\n          >\n            <option value=\"never\">Never Pass</option>\n            <option value=\"less\">&lt;</option>\n            <option value=\"less-equal\">&lt;=</option>\n            <option value=\"equal\">=</option>\n            <option value=\"greater-equal\">&gt;=</option>\n            <option value=\"greater\">&gt;</option>\n            <option value=\"not-equal\">≠</option>\n            <option value=\"always\">Always Pass</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nfunction getSelectedFile(input: HTMLInputElement): null | File {\n  if (!input.files || input.files.length === 0) {\n    return null;\n  }\n\n  return input.files[0];\n}\n\nasync function updateCanvasImage(\n  canvas: null | HTMLCanvasElement,\n  data: null | Blob\n) {\n  if (!canvas || !data) {\n    return;\n  }\n\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n\n  const image = await createImageBitmap(data);\n  if (!image) {\n    return;\n  }\n\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, 128, 128);\n}\n\ntype CanvasRef = React.RefObject<HTMLCanvasElement>;\n\nexport const TextureNode = (props: NodeProps<TextureNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const ref = canvasRef as CanvasRef;\n    if (ref.current && node.imageData instanceof Blob) {\n      updateCanvasImage(ref.current, node.imageData);\n    }\n  });\n\n  return (\n    <Node\n      title=\"Texture\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"TextureDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={e => {\n            const file = getSelectedFile(e.currentTarget);\n            if (file) {\n              data.onChange({ imageData: file });\n            }\n          }}\n        />\n        <canvas\n          id={node.name}\n          ref={canvasRef as CanvasRef}\n          className=\"Preview\"\n          width={128}\n          height={128}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './BlueprintEditor.css';\n\nimport React from 'react';\nimport ReactFlow, {\n  ArrowHeadType,\n  Connection,\n  Edge,\n  FlowElement,\n  Node,\n  OnLoadParams,\n  XYPosition,\n} from 'react-flow-renderer';\n\nimport {\n  Blueprint,\n  BufferBindingStorageType,\n  NodeDescriptor,\n  NodeID,\n  ShaderID,\n} from '../gpu/Blueprint';\nimport { BufferBindingNode } from './nodes/BufferBindingNode';\nimport { CustomEdge } from './nodes/CustomEdge';\nimport { BufferNode } from './nodes/BufferNode';\nimport { ComputeNode } from './nodes/ComputeNode';\nimport { RenderNode } from './nodes/RenderNode';\nimport { SamplerBindingNode } from './nodes/SamplerBindingNode';\nimport { SamplerNode } from './nodes/SamplerNode';\nimport { TextureBindingNode } from './nodes/TextureBindingNode';\nimport { TextureNode } from './nodes/TextureNode';\n\nconst NODE_TYPES = {\n  buffer: BufferNode,\n  texture: TextureNode,\n  compute: ComputeNode,\n  render: RenderNode,\n  sampler: SamplerNode,\n  'buffer-binding': BufferBindingNode,\n  'sampler-binding': SamplerBindingNode,\n  'texture-binding': TextureBindingNode,\n};\n\nconst EDGE_TYPES = {\n  'custom-edge': CustomEdge,\n};\n\ninterface Props {\n  blueprint: Blueprint;\n  onChange: () => void;\n}\n\nfunction getUnusedKey<ID extends ShaderID | NodeID, T extends Record<ID, any>>(\n  dict: T,\n  base: ID\n): ID {\n  for (let i = 1; ; ++i) {\n    const id = `${base}${i}` as ID;\n    if (!dict.hasOwnProperty(id)) {\n      return id;\n    }\n  }\n}\n\nclass FlowErrorBounary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.log(error);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst isPassNode = (node: NodeDescriptor) =>\n  node.type === 'render' || node.type === 'compute';\n\nexport class BlueprintEditor extends React.Component<Props> {\n  private isMounted_: boolean;\n  private instance_: null | OnLoadParams;\n  private flowRef_: React.RefObject<HTMLDivElement>;\n  private lastConnectStart_: null | XYPosition;\n  private lastConnectEnd_: null | XYPosition;\n\n  constructor(props: Props) {\n    super(props);\n    this.isMounted_ = false;\n    this.instance_ = null;\n    this.flowRef_ = React.createRef();\n    this.lastConnectStart_ = null;\n    this.lastConnectEnd_ = null;\n  }\n\n  componentDidMount() {\n    this.isMounted_ = true;\n  }\n\n  componentWillUnmount() {\n    this.isMounted_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"BlueprintEditor\">\n        <FlowErrorBounary>\n          <ReactFlow\n            ref={this.flowRef_}\n            nodeTypes={NODE_TYPES}\n            edgeTypes={EDGE_TYPES}\n            elements={buildGraphFromBlueprint(\n              this.props.blueprint,\n              this.update_\n            )}\n            elementsSelectable={false}\n            nodesConnectable={true}\n            nodesDraggable={true}\n            onLoad={this.onLoad_}\n            onConnectStart={this.onConnectStart_}\n            onConnectStop={this.onConnectStop_}\n            onConnect={this.onConnect_}\n            onElementClick={this.onElementClick_}\n            onNodeDragStop={this.onMoveNode_}\n          >\n            <div className=\"Toolbar\">\n              <button onClick={this.addShader_}>+Shader</button>\n              <button onClick={this.addBuffer_}>+Buffer</button>\n              <button onClick={this.addTexture_}>+Texture</button>\n              <button onClick={this.addSampler_}>+Sampler</button>\n              <button onClick={this.addRenderPass_}>+Render Pass</button>\n              <button onClick={this.addComputePass_}>+Compute Pass</button>\n            </div>\n          </ReactFlow>\n        </FlowErrorBounary>\n      </div>\n    );\n  }\n\n  update_ = () => {\n    if (!this.isMounted_) {\n      return;\n    }\n\n    this.setState({\n      elements: buildGraphFromBlueprint(this.props.blueprint, this.update_),\n    });\n    this.props.onChange();\n  };\n\n  onLoad_ = (instance: OnLoadParams) => {\n    this.instance_ = instance;\n  };\n\n  onConnectStart_ = (e: React.MouseEvent) => {\n    this.lastConnectStart_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnectStop_ = (e: any) => {\n    this.lastConnectEnd_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnect_ = (edge: Edge<any> | Connection) => {\n    const source = this.props.blueprint.nodes[edge.source!];\n    const target = this.props.blueprint.nodes[edge.target!];\n    if (!source || !target) {\n      return;\n    }\n\n    let position = { x: 100, y: 100 };\n    if (\n      this.instance_ &&\n      this.lastConnectStart_ !== null &&\n      this.lastConnectEnd_ !== null &&\n      this.flowRef_.current\n    ) {\n      const view = this.flowRef_.current.getBoundingClientRect();\n      const midpoint = {\n        x:\n          (this.lastConnectStart_.x + this.lastConnectEnd_.x) / 2 - view.x - 60,\n        y:\n          (this.lastConnectStart_.y + this.lastConnectEnd_.y) / 2 - view.y - 40,\n      };\n      position = this.instance_.project(midpoint);\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'buffer' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addBufferBinding_(\n        edge.source!,\n        edge.target!,\n        position,\n        'storage-read'\n      );\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'texture' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTrivialBinding_('texture', edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'sampler' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTrivialBinding_('sampler', edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      isPassNode(source) &&\n      edge.targetHandle === 'queueIn'\n    ) {\n      const nodes = this.props.blueprint.nodes;\n      const id = getUnusedKey(nodes, `queue-dep`);\n      nodes[id] = {\n        id,\n        name: '',\n        position,\n        type: 'connection',\n        connectionType: 'queue',\n        source: edge.source!,\n        target: edge.target!,\n      };\n      this.props.onChange();\n      return;\n    }\n  };\n\n  onElementClick_ = (\n    event: React.MouseEvent<Element, MouseEvent>,\n    element: Node<any> | Edge<any>\n  ) => {};\n\n  onMoveNode_ = (event: React.MouseEvent, node: Node) => {\n    node.data.node.position = { ...node.position };\n    this.update_();\n  };\n\n  addShader_ = () => {\n    const shaders = this.props.blueprint.shaders;\n    const id = getUnusedKey(shaders, 'shader');\n    shaders[id] = { name: id, id, code: '' };\n    this.update_();\n  };\n\n  addNode_ = (type: string, node: Partial<NodeDescriptor>) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, type);\n    nodes[id] = {\n      id,\n      name: id,\n      type,\n      position: { x: 100, y: 100 },\n      ...node,\n    } as NodeDescriptor;\n    this.update_();\n  };\n\n  addBuffer_ = () => {\n    this.addNode_('buffer', {\n      size: 16384,\n      position: { x: 100, y: 100 },\n      init: 'zero',\n    });\n  };\n\n  addTexture_ = () => {\n    this.addNode_('texture', {\n      position: { x: 100, y: 100 },\n      size: { width: 1024, height: 1024 },\n      format: 'rgba8unorm',\n      mipLevelCount: 1,\n      sampleCount: 1,\n    });\n  };\n\n  addSampler_ = () => {\n    this.addNode_('sampler', {\n      position: { x: 100, y: 100 },\n    });\n  };\n\n  addBufferBinding_ = (\n    source: NodeID,\n    target: NodeID,\n    position: XYPosition,\n    storageType: BufferBindingStorageType\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, `binding-buffer`);\n    nodes[id] = {\n      id,\n      name: '',\n      position,\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      source,\n      target,\n      group: 0,\n      binding: 1,\n      storageType,\n    };\n  };\n\n  addTrivialBinding_ = (\n    type: 'sampler' | 'texture',\n    source: NodeID,\n    target: NodeID,\n    position: XYPosition\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, `binding-${type}`);\n    nodes[id] = {\n      id,\n      name: '',\n      position,\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: type,\n      source,\n      target,\n      group: 0,\n      binding: 1,\n    };\n  };\n\n  addRenderPass_ = () => {\n    this.addNode_('render', {\n      vertexShader: '',\n      vertexEntryPoint: '',\n      fragmentShader: '',\n      fragmentEntryPoint: '',\n      topology: 'triangle-list',\n      numVertices: 4,\n      numInstances: 1,\n      indexed: false,\n      clear: true,\n      clearColor: { r: 0, g: 0, b: 0, a: 1 },\n    });\n  };\n\n  addComputePass_ = () => {\n    this.addNode_('compute', {\n      shader: '',\n      entryPoint: '',\n      dispatchSize: { x: 1, y: 1, z: 1 },\n    });\n  };\n}\n\nfunction buildGraphFromBlueprint(\n  blueprint: Blueprint,\n  onChange: () => void\n): FlowElement[] {\n  const elements: FlowElement[] = [];\n  Object.entries(blueprint.nodes).forEach(([id, node]) => {\n    if (node.type !== 'connection') {\n      elements.push({\n        id,\n        type: node.type,\n        data: {\n          blueprint,\n          node,\n          onChange: (update: any) => {\n            Object.assign(blueprint.nodes[id], update);\n            onChange();\n          },\n          destroy: () => {\n            delete blueprint.nodes[id];\n            for (const [otherId, otherNode] of Object.entries(\n              blueprint.nodes\n            )) {\n              if (\n                otherNode.type === 'connection' &&\n                (otherNode.source === id || otherNode.target === id)\n              ) {\n                delete blueprint.nodes[otherId];\n              }\n            }\n            onChange();\n          },\n        },\n        position: node.position,\n      });\n    } else if (node.connectionType === 'binding') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id: `${id}-node`,\n        type: `${node.bindingType}-binding`,\n        data,\n        position: node.position,\n      });\n      elements.push({\n        id: `${id}-source-edge`,\n        source: node.source,\n        target: `${id}-node`,\n      });\n      elements.push({\n        id: `${id}-target-edge`,\n        source: `${id}-node`,\n        target: node.target,\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n      });\n    } else if (node.connectionType === 'queue') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id,\n        source: node.source,\n        target: node.target,\n        targetHandle: 'queueIn',\n        type: 'custom-edge',\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n        data,\n      });\n    }\n  });\n\n  return elements;\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { ComputeNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nexport const ComputeNode = (props: NodeProps<ComputeNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Compute Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Shader\">\n          <select\n            value={node.shader}\n            onChange={e => data.onChange({ shader: e.currentTarget.value })}\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Entry Point\">\n          <EditableLabel\n            emptyText=\"None\"\n            value={node.entryPoint}\n            onChange={value => data.onChange({ entryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Dispatch Size\">\n          <div className=\"DispatchSize\">\n            <div className=\"DispatchSizeElement\">\n              X{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.x}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: e.currentTarget.valueAsNumber,\n                      y: node.dispatchSize.y,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Y{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.y}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: e.currentTarget.valueAsNumber,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Z{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.z}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: node.dispatchSize.y,\n                      z: e.currentTarget.valueAsNumber,\n                    },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const SamplerNode = (props: NodeProps<SamplerNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Sampler\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"SamplerDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport {\n  BufferBindingNodeDescriptor,\n  BufferBindingStorageType,\n} from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const BufferBindingNode = (\n  props: NodeProps<BufferBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node className=\"BufferBinding\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <select\n        value={node.storageType}\n        onChange={e =>\n          data.onChange({\n            storageType: e.currentTarget.value as BufferBindingStorageType,\n          })\n        }\n      >\n        <option value=\"storage-read\">Storage (r/o)</option>\n        <option value=\"storage\">Storage (r/w)</option>\n        <option value=\"uniform\">Uniform</option>\n        <option value=\"sampler\">Sampler</option>\n        <option value=\"texture\">Texture</option>\n      </select>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerBindingNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const SamplerBindingNode = (\n  props: NodeProps<SamplerBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureBindingNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const TextureBindingNode = (\n  props: NodeProps<TextureBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport {\n  getBezierPath,\n  getEdgeCenter,\n  getMarkerEnd,\n  EdgeProps,\n} from 'react-flow-renderer';\n\ninterface Data {\n  destroy?: () => void;\n}\n\nexport const CustomEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data: anyData,\n  arrowHeadType,\n  markerEndId,\n}: EdgeProps) => {\n  const path = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n  const end = getMarkerEnd(arrowHeadType, markerEndId);\n  const [centerX, centerY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n  const data = anyData as Data;\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={path}\n        markerEnd={end}\n      />\n      {data.destroy && (\n        <foreignObject width={16} height={16} x={centerX - 8} y={centerY - 8}>\n          <div className=\"Edge\">\n            <button className=\"RemoveButton\" onClick={data.destroy} />\n          </div>\n        </foreignObject>\n      )}\n    </>\n  );\n};\n","import './CodeEditor.css';\n\nimport 'codemirror/keymap/sublime';\n\nimport CodeMirror, { IEditorInstance } from '@uiw/react-codemirror';\nimport React from 'react';\n\nimport { ShaderCompilationMessage } from '../gpu/program/Shader';\n\ninterface Props {\n  compilationMessages?: ShaderCompilationMessage[];\n  contents: string;\n  mutable: boolean;\n  onChange: (contents: string) => void;\n  theme: string;\n}\n\nexport class CodeEditor extends React.Component<Props> {\n  private isDecorating_: boolean;\n  private editorRef_: React.RefObject<IEditorInstance>;\n\n  constructor(props: Props) {\n    super(props);\n    this.isDecorating_ = false;\n    this.editorRef_ = React.createRef();\n  }\n\n  refresh() {\n    const cm = this.editorRef_.current;\n    if (cm) {\n      cm.editor.refresh();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"CodeEditor\">\n        <CodeMirror\n          ref={this.editorRef_}\n          value={this.props.contents}\n          onChange={this.onChange_}\n          onUpdate={this.onUpdate_}\n          options={{\n            theme: this.props.theme,\n            keyMap: 'sublime',\n            mode: 'rust',\n            gutters: ['GutterMessages'],\n            readOnly: !this.props.mutable,\n          }}\n        />\n      </div>\n    );\n  }\n\n  onChange_ = (e: CodeMirror.Editor, change: CodeMirror.EditorChange) => {\n    this.props.onChange(e.getValue());\n  };\n\n  onUpdate_ = (e: CodeMirror.Editor) => {\n    if (this.isDecorating_) {\n      return;\n    }\n\n    this.isDecorating_ = true;\n    e.getAllMarks().forEach(m => m.clear());\n    e.clearGutter('GutterMessages');\n    for (const m of this.props.compilationMessages ?? []) {\n      const className = `MarkedText-${m.type}`;\n      const line = m.lineNum;\n      e.markText(\n        { line, ch: m.linePos - 1 },\n        { line, ch: m.linePos + m.length - 1 },\n        { className }\n      );\n      const marker = document.createElement('div');\n      marker.classList.add('Marker', `Marker-${m.type}`);\n      e.setGutterMarker(line, 'GutterMessages', marker);\n    }\n    this.isDecorating_ = false;\n  };\n}\n","import './TabContainer.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { EditableLabel } from './EditableLabel';\n\ninterface TabDescriptor {\n  key: string;\n  title: string;\n  mutable: boolean;\n  onActivate?: () => void;\n  onClose?: () => void;\n  onRename?: (newName: string) => void;\n}\n\ninterface Props {\n  tabs: TabDescriptor[];\n  children: ReactNode;\n}\n\ninterface State {\n  activeTab: number;\n}\n\nexport class TabContainer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeTab: 0,\n    };\n  }\n\n  componentDidUpdate() {\n    const numChildren = React.Children.count(this.props.children);\n    if (this.state.activeTab >= numChildren) {\n      this.setState({ activeTab: numChildren - 1 });\n    } else {\n      const tab = this.props.tabs[this.state.activeTab];\n      if (tab.onActivate) {\n        tab.onActivate();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"TabContainer\">\n        {this.renderTabs_()}\n        <div className=\"ContentArea\">\n          {React.Children.toArray(this.props.children).map((child, i) => {\n            const active = i === this.state.activeTab;\n            return (\n              <div\n                key={i}\n                className={`Content ${active ? 'Active' : 'Inactive'}`}\n              >\n                {child}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderTabs_() {\n    return (\n      <div className=\"TabStrip\">\n        {this.props.tabs.map((tab, i) => {\n          const active = this.state.activeTab === i;\n          return (\n            <div\n              key={tab.key + tab.title}\n              className={`${active ? 'Tab Active' : 'Tab Inactive'}\n                          ${tab.mutable ? 'Removable' : 'Permanent'}`}\n              onClick={_ => this.setActiveTab_(i)}\n            >\n              <EditableLabel\n                enabled={tab.mutable && active}\n                value={tab.title}\n                onChange={tab.onRename ?? (() => ({}))}\n              />\n              {tab.mutable && (\n                <button\n                  className=\"RemoveButton\"\n                  onClick={e => {\n                    if (tab.onClose) {\n                      tab.onClose();\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  setActiveTab_(tab: number) {\n    this.setState({ activeTab: tab });\n  }\n}\n","import './Editor.css';\n\nimport React from 'react';\n\nimport { Blueprint, ShaderID } from '../gpu/Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationResults } from '../gpu/Program';\nimport { BlueprintEditor } from './BlueprintEditor';\nimport { CodeEditor } from './CodeEditor';\nimport { TabContainer } from './TabContainer';\n\ninterface Props {\n  blueprint: Blueprint;\n  onBlueprintChange: () => void;\n\n  compilationResults: ShaderCompilationResults;\n\n  codeMirrorTheme: string;\n}\n\nexport const Editor = (props: Props) => {\n  const removeShader = (id: ShaderID) => {\n    delete props.blueprint.shaders[id];\n    props.onBlueprintChange();\n  };\n\n  const renameShader = (id: ShaderID, newName: string) => {\n    props.blueprint.shaders[id].name = newName;\n    props.onBlueprintChange();\n  };\n\n  const refreshEditor = (ref: React.RefObject<CodeEditor>) => {\n    if (ref.current) {\n      ref.current.refresh();\n    }\n  };\n\n  const shaders = Object.entries(props.blueprint.shaders);\n  const uniformsRef: React.RefObject<CodeEditor> = React.createRef();\n  const refs: React.RefObject<CodeEditor>[] = shaders.map(() =>\n    React.createRef()\n  );\n\n  return (\n    <div className=\"Editor\">\n      <TabContainer\n        tabs={[\n          { key: 'Blueprint', title: 'Blueprint', mutable: false },\n          {\n            key: 'Uniforms',\n            title: 'Uniforms',\n            mutable: false,\n            onActivate: () => {\n              refreshEditor(uniformsRef);\n            },\n          },\n          ...shaders.map(([id, shader], index) => ({\n            key: id,\n            title: shader.name,\n            mutable: true,\n            onActivate: () => {\n              refreshEditor(refs[index]);\n            },\n            onClose: () => removeShader(id),\n            onRename: (newName: string) => renameShader(id, newName),\n          })),\n        ]}\n      >\n        <BlueprintEditor\n          blueprint={props.blueprint}\n          onChange={props.onBlueprintChange}\n        />\n        <CodeEditor\n          ref={uniformsRef}\n          key=\"Uniforms\"\n          contents={BUILTIN_UNIFORMS_WGSL}\n          mutable={false}\n          onChange={() => ({})}\n          theme={props.codeMirrorTheme}\n        />\n        {shaders.map(([id, shader], index) => (\n          <CodeEditor\n            key={id}\n            ref={refs[index]}\n            compilationMessages={props.compilationResults.get(shader.id)}\n            contents={shader.code}\n            mutable={true}\n            onChange={code => {\n              shader.code = code;\n              props.onBlueprintChange();\n            }}\n            theme={props.codeMirrorTheme}\n          />\n        ))}\n      </TabContainer>\n    </div>\n  );\n};\n","import './App.css';\n\nimport React from 'react';\n\nimport { LocalPersistent } from './base/LocalPersistent';\nimport { deepCopy } from './base/Util';\nimport {\n  Blueprint,\n  deserializeBlueprint,\n  serializeBlueprint,\n  SerializedBlueprint,\n} from './gpu/Blueprint';\nimport { FrameProducer } from './gpu/FrameProducer';\nimport { ShaderCompilationResults } from './gpu/Program';\nimport { ControlPanel } from './ui/ControlPanel';\nimport { Display, DisplayConfig } from './ui/Display';\nimport { Editor } from './ui/Editor';\nimport { AppState } from './AppState';\n\ninterface Props {\n  appState: LocalPersistent<AppState>;\n}\n\ninterface State extends AppState {\n  compilationResults: ShaderCompilationResults;\n}\n\nclass App extends React.Component<Props, State> {\n  private frameProducer_: FrameProducer;\n  private blueprint_: Blueprint;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      ...this.props.appState.value,\n      compilationResults: new Map(),\n    };\n\n    this.blueprint_ = deserializeBlueprint(this.state.blueprint);\n\n    this.frameProducer_ = new FrameProducer();\n    this.frameProducer_.setBlueprint(this.blueprint_);\n  }\n\n  componentDidMount() {\n    this.frameProducer_.onShadersCompiled = this.onShadersCompiled_;\n  }\n\n  componentDidUpdate() {\n    this.props.appState.value = this.state;\n    this.frameProducer_.setBlueprint(this.blueprint_);\n  }\n\n  componentWillUnmount() {\n    this.frameProducer_.stop();\n  }\n\n  onDisplayConfigChange = (change: Partial<DisplayConfig>) => {\n    this.setState((state, props) => {\n      return {\n        displayConfig: Object.assign({ ...state.displayConfig }, change),\n      };\n    });\n  };\n\n  onFullscreenChange_ = () => {\n    this.frameProducer_.reconfigure();\n  };\n\n  onBlueprintChange_ = () => {\n    this.frameProducer_.setBlueprint(this.blueprint_);\n  };\n\n  onShadersCompiled_ = (compilationResults: ShaderCompilationResults) => {\n    this.setState({ compilationResults });\n  };\n\n  onSaveBlueprint_ = async (name: string) => {\n    const serialized = await serializeBlueprint(this.blueprint_);\n    this.setState((state, props) => ({\n      savedBlueprints: {\n        ...state.savedBlueprints,\n        [name]: serialized,\n      },\n    }));\n  };\n\n  onLoadBlueprint_ = async (name: string) => {\n    const blueprint = this.state.savedBlueprints[name];\n    if (!blueprint) {\n      return;\n    }\n\n    this.blueprint_ = deserializeBlueprint(blueprint);\n    const reserialized = await serializeBlueprint(this.blueprint_);\n\n    this.setState(state => {\n      const blueprints = state.savedBlueprints;\n      blueprints[name] = reserialized;\n      return {\n        blueprint: deepCopy(blueprint),\n        savedBlueprints: blueprints,\n      };\n    });\n  };\n\n  onImportBlueprint_ = (blueprint: SerializedBlueprint) => {\n    this.blueprint_ = deserializeBlueprint(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onDeleteBlueprint_ = (name: string) => {\n    this.setState((state, props) => {\n      delete state.savedBlueprints[name];\n      return { savedBlueprints: state.savedBlueprints };\n    });\n  };\n\n  onCodeMirrorThemeChange_ = (name: string) => {\n    this.setState({ codeMirrorTheme: name });\n  };\n\n  render() {\n    const renderDisplay = (canvas: HTMLCanvasElement) => {\n      let resolution: { width: number; height: number };\n      const config = this.state.displayConfig;\n      if (config.resolution.mode === 'pixel') {\n        const pixelSize =\n          config.resolution.pixelSize! >= 1 ? config.resolution.pixelSize! : 1;\n        resolution = {\n          width: canvas.clientWidth / pixelSize,\n          height: canvas.clientHeight / pixelSize,\n        };\n      } else {\n        resolution = { ...config.resolution.framebufferSize! };\n      }\n\n      this.frameProducer_.render(canvas, resolution);\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-title\">WebGPU Playground</div>\n        </div>\n        <div className=\"App-top\">\n          <div className=\"App-canvas\">\n            <Display render={renderDisplay} config={this.state.displayConfig} />\n          </div>\n          <div className=\"App-editor\">\n            <Editor\n              compilationResults={this.state.compilationResults}\n              blueprint={this.blueprint_}\n              onBlueprintChange={this.onBlueprintChange_}\n              codeMirrorTheme={this.state.codeMirrorTheme}\n            />\n          </div>\n        </div>\n        <div className=\"App-bottom\">\n          <ControlPanel\n            blueprint={this.blueprint_}\n            displayConfig={this.state.displayConfig}\n            onDisplayConfigChange={this.onDisplayConfigChange}\n            savedBlueprints={this.state.savedBlueprints}\n            onSaveBlueprint={this.onSaveBlueprint_}\n            onLoadBlueprint={this.onLoadBlueprint_}\n            onImportBlueprint={this.onImportBlueprint_}\n            onDeleteBlueprint={this.onDeleteBlueprint_}\n            codeMirrorTheme={this.state.codeMirrorTheme}\n            onCodeMirrorThemeChange={this.onCodeMirrorThemeChange_}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { SerializedBlueprint } from './gpu/Blueprint';\nimport { BASIC } from './presets/Basic';\nimport { BOIDS } from './presets/Boids';\nimport { INSTANCES } from './presets/Instances';\nimport { DisplayConfig } from './ui/Display';\n\nexport interface AppState {\n  blueprint: SerializedBlueprint;\n  savedBlueprints: Record<string, SerializedBlueprint>;\n  displayConfig: DisplayConfig;\n  codeMirrorTheme: string;\n}\n\nexport const DEFAULT_APP_STATE: AppState = {\n  blueprint: {\n    nodes: {},\n    shaders: {},\n  },\n  savedBlueprints: {\n    Basic: BASIC,\n    Boids: BOIDS,\n    Instances: INSTANCES,\n  },\n  displayConfig: {\n    aspect: '1:1',\n    resolution: { mode: 'pixel', pixelSize: 1 },\n  },\n  codeMirrorTheme: 'paraiso-dark',\n};\n","import { SerializedBlueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u);\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u);\n  return vec4<f32>(x, y, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx +\n                            vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const BASIC: SerializedBlueprint = {\n  version: 1,\n  nodes: [\n    {\n      id: 'render1',\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 1,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  ],\n  shaders: [\n    {\n      id: 'vertex1',\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    {\n      id: 'fragment1',\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  ],\n};\n","import { SerializedBlueprint } from '../gpu/Blueprint';\n\nexport const BOIDS: SerializedBlueprint = {\n  version: 1,\n  nodes: [\n    {\n      id: 'compute1',\n      name: 'first update',\n      type: 'compute',\n      position: {\n        x: 223,\n        y: 438,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 2000,\n        y: 1,\n        z: 1,\n      },\n    },\n    {\n      id: 'buffer1',\n      name: 'buffer1',\n      type: 'buffer',\n      position: {\n        x: -55,\n        y: -35,\n      },\n      size: 32000,\n      init: 'random-floats',\n    },\n    {\n      id: 'buffer2',\n      name: 'buffer2',\n      type: 'buffer',\n      position: {\n        x: 610,\n        y: 19,\n      },\n      size: 32000,\n      init: 'zero',\n    },\n    {\n      id: 'render1',\n      name: 'render boids',\n      position: {\n        x: -262,\n        y: 374,\n      },\n      type: 'render',\n      indexed: false,\n      numVertices: 3,\n      numInstances: 1000,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n    {\n      id: 'compute2',\n      name: 'update B',\n      type: 'compute',\n      position: {\n        x: 658,\n        y: 442,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 1000,\n        y: 1,\n        z: 1,\n      },\n    },\n    {\n      id: 'binding1a',\n      name: '',\n      position: {\n        x: 65,\n        y: 210,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'compute1',\n    },\n    {\n      id: 'binding1b',\n      name: '',\n      position: {\n        x: -191,\n        y: 140,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'render1',\n    },\n    {\n      id: 'binding2',\n      name: '',\n      position: {\n        x: 220,\n        y: 218,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer1',\n      target: 'compute2',\n    },\n    {\n      id: 'binding3',\n      name: '',\n      position: {\n        x: 713,\n        y: 179,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer2',\n      target: 'compute2',\n    },\n    {\n      id: 'binding4',\n      name: '',\n      position: {\n        x: 566,\n        y: 181,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer2',\n      target: 'compute1',\n    },\n    {\n      id: 'queue1',\n      name: '',\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'render1',\n      target: 'compute1',\n      type: 'connection',\n      connectionType: 'queue',\n    },\n    {\n      id: 'queue2',\n      name: '',\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'compute1',\n      target: 'compute2',\n      type: 'connection',\n      connectionType: 'queue',\n    },\n  ],\n  shaders: [\n    {\n      id: 'compute1',\n      name: 'compute',\n      code: 'let kRule1Distance = 0.1;\\nlet kRule2Distance = 0.025;\\nlet kRule3Distance = 0.025;\\nlet kRule1Scale = 0.02;\\nlet kRule2Scale = 0.05;\\nlet kRule3Scale = 0.005;\\nlet kNumParticles = 2000u;\\n\\nstruct Particle {\\n  pos: vec2<f32>;\\n  vel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particlesA: Particles;\\n[[group(0), binding(2)]] var<storage, read_write> particlesB: Particles;\\n\\n[[stage(compute), workgroup_size(1)]]\\nfn main([[builtin(global_invocation_id)]] id: vec3<u32>) {\\n  let index = id.x;\\n  if (index >= kNumParticles) {\\n    return;\\n  }\\n\\n  var vPos = particlesA.particles[index].pos;\\n  var vVel = particlesA.particles[index].vel;\\n  var cMass = vec2<f32>(0.0, 0.0);\\n  var cVel = vec2<f32>(0.0, 0.0);\\n  var colVel = vec2<f32>(0.0, 0.0);\\n  var cMassCount = 0u;\\n  var cVelCount = 0u;\\n  var pos: vec2<f32>;\\n  var vel: vec2<f32>;\\n\\n  for (var i = 0u; i < kNumParticles; i = i + 1u) {\\n    if (i == index) {\\n      continue;\\n    }\\n    pos = particlesA.particles[i].pos.xy;\\n    vel = particlesA.particles[i].vel.xy;\\n    if (distance(pos, vPos) < kRule1Distance) {\\n      cMass = cMass + pos;\\n      cMassCount = cMassCount + 1u;\\n    }\\n    if (distance(pos, vPos) < kRule2Distance) {\\n      colVel = colVel - (pos - vPos);\\n    }\\n    if (distance(pos, vPos) < kRule3Distance) {\\n      cVel = cVel + vel;\\n      cVelCount = cVelCount + 1u;\\n    }\\n  }\\n\\n  if (cMassCount > 0u) {\\n    cMass = (cMass / vec2<f32>(f32(cMassCount), f32(cMassCount))) - vPos;\\n  }\\n\\n  if (cVelCount > 0u) {\\n    cVel = cVel / vec2<f32>(f32(cVelCount), f32(cVelCount));\\n  }\\n\\n  vVel = vVel + (cMass * kRule1Scale) + (colVel * kRule2Scale) +\\n      (cVel * kRule3Scale);\\n\\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 1.0);\\n  vPos = vPos + (vVel * builtinUniforms.timeDelta * 0.25);\\n\\n  if (vPos.x < -1.0) {\\n    vPos.x = vPos.x + 2.0;\\n  }\\n  if (vPos.x > 1.0) {\\n    vPos.x = vPos.x - 2.0;\\n  }\\n  if (vPos.y < -1.0) {\\n    vPos.y = vPos.y + 2.0;\\n  }\\n  if (vPos.y > 1.0) {\\n    vPos.y = vPos.y - 2.0;\\n  }\\n\\n  particlesB.particles[index].pos = vPos;\\n  particlesB.particles[index].vel = vVel;\\n}\\n',\n    },\n    {\n      id: 'vertex1',\n      name: 'vertex',\n      code: 'struct Particle {\\n  particlePos: vec2<f32>;\\n  particleVel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particles: Particles;\\n\\nfn getPos(vid: u32) -> vec2<f32> {\\n  return select(\\n      vec2<f32>(-0.01, -0.02),\\n      select(vec2<f32>(0.01, -0.02), vec2<f32>(0.00, 0.02), vid >= 2u),\\n      vid >= 1u);\\n}\\n\\n[[stage(vertex)]]\\nfn main([[builtin(vertex_index)]] vid: u32,\\n        [[builtin(instance_index)]] id: u32)\\n    -> [[builtin(position)]] vec4<f32> {\\n  let angle = -atan2(particles.particles[id].particleVel.x, particles.particles[id].particleVel.y);\\n  let ppos = getPos(vid);\\n  let pos = vec2<f32>(ppos.x * cos(angle) - ppos.y * sin(angle),\\n                      ppos.x * sin(angle) + ppos.y * cos(angle));\\n  return vec4<f32>(pos + particles.particles[id].particlePos, 0.0, 1.0);\\n}\\n',\n    },\n    {\n      id: 'fragment1',\n      name: 'fragment',\n      code: '[[stage(fragment)]]\\nfn main() -> [[location(0)]] vec4<f32> {\\n  return vec4<f32>(0.0, 1.0, 0.0, 1.0);\\n}\\n',\n    },\n  ],\n};\n","import { SerializedBlueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32,\n        [[builtin(instance_index)]] instance: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let t = builtinUniforms.time * 6.283 / 2.0;\n  let b = 1.0 + f32(instance / 10u) * 0.5;\n  let k = 0.5 + cos(t * 3.0) * 0.2;\n  let c = k * cos(t);\n  let s = k * sin(t);\n  let xo = cos(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let yo = sin(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u) * 0.3;\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u) * 0.3;\n  return vec4<f32>(x * c - y * s + xo, x * s + y * c + yo, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx + vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const INSTANCES: SerializedBlueprint = {\n  version: 1,\n  nodes: [\n    {\n      id: 'render1',\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 30,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  ],\n  shaders: [\n    {\n      id: 'vertex1',\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    {\n      id: 'fragment1',\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  ],\n};\n","import { Debouncer } from './Debouncer';\n\nimport localForage from 'localforage';\n\nconst DEFAULT_DEBOUNCE_MS = 100;\n\ninterface Options<Type> {\n  key: string;\n  default: Type;\n  debounceMs?: number;\n}\n\nfunction deepUpdate(target: any, source: any): any {\n  const isObject = (x: any) => typeof x === 'object' && x !== null;\n  for (const [key, value] of Object.entries(source)) {\n    if (!target.hasOwnProperty(key)) {\n      if (Array.isArray(value)) {\n        target[key] = [...value];\n      } else if (isObject(value)) {\n        target[key] = deepUpdate({}, value);\n      } else {\n        target[key] = value;\n      }\n    } else if (isObject(value) && isObject(target[key])) {\n      deepUpdate(target[key], value);\n    }\n  }\n  return target;\n}\n\nexport class LocalPersistent<Type> {\n  private key_: string;\n  private cachedValue_: Type;\n  private debouncer_: Debouncer;\n\n  constructor(key: string, initialValue: Type, debounceMs: number) {\n    this.key_ = key;\n    this.cachedValue_ = initialValue;\n    this.debouncer_ = new Debouncer(debounceMs);\n  }\n\n  set value(value: Type) {\n    this.cachedValue_ = value;\n    this.debouncer_.invoke(() => localForage.setItem(this.key_, value));\n  }\n\n  get value(): Type {\n    return this.cachedValue_;\n  }\n}\n\nfunction loadValueFromLocalStorage<Type>(key: string): null | Type {\n  const serializedValue = localStorage[key];\n  let cachedValue = null;\n  if (serializedValue) {\n    cachedValue = JSON.parse(serializedValue) ?? null;\n  }\n  if (cachedValue !== null) {\n    return cachedValue as Type;\n  }\n  return null;\n}\n\nexport async function restoreLocalPersistent<Type>(\n  options: Options<Type>\n): Promise<LocalPersistent<Type>> {\n  const asyncCachedValue = localForage.getItem(options.key);\n  const cachedLegacyValue = loadValueFromLocalStorage<Type>(options.key);\n  const cachedValue = (await asyncCachedValue) as null | Type;\n  let restoredValue: null | Partial<Type> = null;\n  if (cachedValue !== null) {\n    restoredValue = cachedValue;\n  } else {\n    restoredValue = cachedLegacyValue ?? {};\n  }\n  return new LocalPersistent<Type>(\n    options.key,\n    deepUpdate(restoredValue, options.default),\n    options.debounceMs ?? DEFAULT_DEBOUNCE_MS\n  );\n}\n","import './index.css';\n\nimport localForage from 'localforage';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './App';\nimport { AppState, DEFAULT_APP_STATE } from './AppState';\nimport { restoreLocalPersistent } from './base/LocalPersistent';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'shady',\n  version: 1,\n  storeName: 'local_state',\n});\n\nasync function init() {\n  const state = await restoreLocalPersistent<AppState>({\n    key: 'gpu-app-state',\n    default: DEFAULT_APP_STATE,\n  });\n  render(\n    <React.StrictMode>\n      <App appState={state} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n"],"sourceRoot":""}