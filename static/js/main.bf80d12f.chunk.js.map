{"version":3,"sources":["../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","base/Util.tsx","gpu/Blueprint.tsx","gpu/BuiltinUniforms.tsx","gpu/Executable.tsx","gpu/Gpu.tsx","gpu/FrameProducer.tsx","ui/CodeMirrorThemes.tsx","ui/LabeledField.tsx","ui/ControlPanel.tsx","ui/Display.tsx","ui/EditableLabel.tsx","ui/nodes/Node.tsx","ui/nodes/Validation.tsx","ui/nodes/BufferNode.tsx","base/Debouncer.tsx","ui/nodes/RenderNode.tsx","ui/nodes/TextureNode.tsx","ui/BlueprintEditor.tsx","ui/nodes/ComputeNode.tsx","ui/nodes/SamplerNode.tsx","ui/nodes/BufferBindingNode.tsx","ui/nodes/SamplerBindingNode.tsx","ui/nodes/TextureBindingNode.tsx","ui/nodes/CustomEdge.tsx","ui/CodeEditor.tsx","ui/TabContainer.tsx","ui/Editor.tsx","App.tsx","AppState.tsx","presets/Basic.tsx","presets/Boids.tsx","presets/Instances.tsx","base/LocalPersistent.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","doCopy","value","traversed","Array","isArray","has","add","x","Blob","copy","entries","k","v","undefined","deepCopy","Set","deepEquals","a","b","length","every","i","canonicalize","blueprint","values","nodes","node","position","y","BUILTIN_UNIFORMS_WGSL","Executable","gpu","shaders","shaderInfo","gpu_","blueprint_","shaders_","shaderInfo_","builtinUniforms_","buffers_","textures_","samplers_","passes_","outputDepthStencilTexture_","outputDepthStencilTextureSize_","this","width","height","outputFormat","isAcquired","messages","device","bufferBindingsByPass","textureBindingsByPass","samplerBindingsByPass","forEach","type","connectionType","bindingType","target","push","pipelineBindGroups","bufferUsageFlags","collectResourceUsage","pipelineId","visibility","descriptor","usageFlags","entry","binding","groups","group","bindGroup","layout","bindings","Map","set","source","storageType","GPUBufferUsage","STORAGE","buffer","UNIFORM","texture","sampler","buffers","textures","samplers","renders","computes","connections","GPUShaderStage","VERTEX","FRAGMENT","COMPUTE","createBuffer","size","usage","COPY_DST","mappedAtCreation","init","data","getMappedRange","uints","Uint32Array","crypto","getRandomValues","floats","Float32Array","unmap","imageData","createImageBitmap","image","createTexture","format","GPUTextureUsage","SAMPLED","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","createSampler","getBindingResource","createView","compileBindings","unshift","bindGroupLayouts","createBindGroupLayout","createPipelineLayout","bindGroups","createBindGroup","from","resource","allPasses","vertexShader","fragmentShader","topology","stripIndexFormat","pipeline","createRenderPipeline","vertex","entryPoint","vertexEntryPoint","primitive","cullMode","fragment","targets","fragmentEntryPoint","depthStencil","depthWriteEnabled","depthCompare","depthTest","encoder","createRenderBundleEncoder","colorFormats","depthStencilFormat","setPipeline","setBindGroup","draw","numVertices","numInstances","bundle","finish","shader","createComputePipeline","compute","startNodes","delete","thisPhase","get","nextPhase","passId","uniforms","ArrayBuffer","writeBuffer","createCommandEncoder","destroy","pass","computePass","beginComputePass","dispatchSize","dispatch","z","endPass","loadValue","clear","clearColor","r","g","renderPass","beginRenderPass","colorAttachments","view","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","executeBundles","commands","submit","s","usedShaders","modules","createShaderModule","fail","m","compilationInfo","info","message","lineNum","linePos","offset","some","executable","compile_","console","log","Gpu","adapter_","device_","lost_","pendingAcquisition_","onAcquired","onLost","acquire","acquireInternal_","release","onLost_","warn","setTimeout","navigator","requestAdapter","adapter","requestDevice","lost","FrameProducer","preferredTargetTextureFormat_","lastUsedContext_","lastUsedResolution_","startTime_","lastFrameTime_","frame_","lastCompiledDescriptor_","mostRecentPendingCompile_","executable_","onShadersCompiled","onGpuAcquired_","tryCompile_","thisCompile","compile","result","canvas","resolution","context","getContext","getContextFromCanvas","stop","getPreferredFormat","configure","style","filter","now","Date","getTime","delta","updateUniforms","time","timeDelta","frame","execute","getCurrentTexture","CODE_MIRROR_THEMES","LabeledField","label","children","className","ControlPanel","props","pixelSizeToggleRef_","pixelSizeRef_","framebufferWidthRef_","framebufferHeightRef_","importRef_","saveBlueprint_","name","prompt","onSaveBlueprint","loadBlueprint_","onLoadBlueprint","toggleLoadBlueprintPanel_","copyBlueprintToClipboard_","Uint8Array","arrayBuffer","bytes","imageDataSerialized","fromByteArray","clipboard","writeText","JSON","stringify","importBlueprintFromClipboard_","togglePasteMenu_","current","serializedBlueprint","parse","toByteArray","onImportBlueprint","setState","state","pasteMenuVisible","deleteBlueprint_","onDeleteBlueprint","loadMenuVisible","toggleOptions_","optionsVisible","enterFullscreen_","document","querySelector","requestFullscreen","setAspectRatio_","onDisplayConfigChange","aspect","currentTarget","updateResolution_","framebufferSize","parseInt","isNaN","mode","pixelSize","React","createRef","displayConfig","makeAspectOption","ratio","onChange","checked","title","onClick","ref","marginLeft","codeMirrorTheme","onCodeMirrorThemeChange","theme","savedBlueprints","Component","Display","wrapperRef_","canvasRef_","pendingFrameRequest_","renderNextFrame","wrapper","clientWidth","clientHeight","render","requestAnimationFrame","cancelAnimationFrame","config","split","aspectX","aspectY","stretch","computedWrapperStyle","aspectRatio","EditableLabel","onClick_","enabled","isEditing","commit_","untrimmedValue","trim","onKeyDown_","key","onFocusOut_","isEmpty","editingClass","emptyClass","defaultValue","emptyText","onKeyDown","onBlur","readOnly","autoFocus","Node","onRename","resolveConnection","c","targetHandle","sourceName","targetName","isValidBindingConnection","isValidQueueConnection","Debouncer","minDelayMs","minDelayMs_","lastInvocationMs_","pendingInvocation_","f","onCooldown","scheduleSuppressed","invokeInternal","clearTimeout","clearPendingInvocation","delay","invoke","bind","colorValue","cp","toString","join","parseColor","parseComponent","index","drawImage","NODE_TYPES","isValidConnection","textAlign","valueAsNumber","canvasRef","useRef","useEffect","updateCanvasImage","accept","input","file","files","debouncer","Math","max","isConnectable","EDGE_TYPES","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","anyData","arrowHeadType","markerEndId","path","getBezierPath","end","getMarkerEnd","getEdgeCenter","centerX","centerY","d","markerEnd","getUnusedKey","dict","base","hasOwnProperty","FlowErrorBounary","error","errorInfo","isPassNode","BlueprintEditor","isMounted_","instance_","flowRef_","lastConnectStart_","lastConnectEnd_","update_","elements","buildGraphFromBlueprint","onLoad_","instance","onConnectStart_","clientX","clientY","onConnectStop_","onConnect_","edge","getBoundingClientRect","midpoint","project","addBufferBinding_","addTextureBinding_","addSamplerBinding_","addQueueDependency_","onElementClick_","event","element","onMoveNode_","addShader_","addNode_","addEdge_","connection","addBuffer_","addTexture_","mipLevelCount","sampleCount","addSampler_","bufferId","textureId","addRenderPass_","indexed","addComputePass_","nodeTypes","edgeTypes","elementsSelectable","nodesConnectable","nodesDraggable","onLoad","onConnectStart","onConnectStop","onConnect","onElementClick","onNodeDragStop","update","assign","otherId","otherNode","BUILTIN_WGSL_NUM_LINES","CodeEditor","isDecorating_","onChange_","change","getValue","onUpdate_","getAllMarks","clearGutter","line","markText","ch","marker","createElement","classList","setGutterMarker","contents","onUpdate","options","keyMap","gutters","mutable","TabContainer","activeTab","renderTabs_","renderActiveTabContent_","Children","toArray","tabs","tab","active","zIndex","_","setActiveTab_","onClose","stopPropagation","Editor","removeShader_","onBlueprintChange","renameShader_","newName","App","frameProducer_","onFullscreenChange_","reconfigure","onBlueprintChange_","setBlueprint","onShadersCompiled_","onSaveBlueprint_","onLoadBlueprint_","onImportBlueprint_","onDeleteBlueprint_","onCodeMirrorThemeChange_","appState","DEFAULT_APP_STATE","Basic","render1","vertex1","fragment1","Boids","compute1","buffer1","buffer2","compute2","binding1a","binding1b","binding2","binding3","binding4","queue1","queue2","Instances","deepUpdate","isObject","LocalPersistent","initialValue","debounceMs","key_","cachedValue_","debouncer_","localForage","setItem","loadValueFromLocalStorage","serializedValue","localStorage","cachedValue","restoreLocalPersistent","asyncCachedValue","getItem","cachedLegacyValue","restoredValue","default","StrictMode","getElementById","driver","INDEXEDDB","version","storeName"],"mappings":"uNAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,mBAAoB,CACnB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,GAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,uBAAwB,CACvB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,EACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,GAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,mBAAoB,CACnB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,yBAA0B,CACzB,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,EACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,GAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,WAAY,CACX,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,GAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,C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","file":"static/js/main.bf80d12f.chunk.js","sourcesContent":["var map = {\n\t\"./apl/apl.js\": [\n\t\t139,\n\t\t30\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t140,\n\t\t31\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t141,\n\t\t32\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t142,\n\t\t33\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t143,\n\t\t34\n\t],\n\t\"./clike/clike.js\": [\n\t\t128,\n\t\t2\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t144,\n\t\t35\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t145,\n\t\t36\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t146,\n\t\t37\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t129,\n\t\t38\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t147,\n\t\t39\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t148,\n\t\t40\n\t],\n\t\"./css/css.js\": [\n\t\t125,\n\t\t1\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t149,\n\t\t41\n\t],\n\t\"./d/d.js\": [\n\t\t150,\n\t\t42\n\t],\n\t\"./dart/dart.js\": [\n\t\t151,\n\t\t2,\n\t\t43\n\t],\n\t\"./diff/diff.js\": [\n\t\t152,\n\t\t44\n\t],\n\t\"./django/django.js\": [\n\t\t153,\n\t\t0,\n\t\t1,\n\t\t11\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t154,\n\t\t21\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t155,\n\t\t45\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t156,\n\t\t46\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t157,\n\t\t47\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t158,\n\t\t48\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t159,\n\t\t49\n\t],\n\t\"./elm/elm.js\": [\n\t\t160,\n\t\t50\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t161,\n\t\t51\n\t],\n\t\"./factor/factor.js\": [\n\t\t162,\n\t\t22\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t163,\n\t\t52\n\t],\n\t\"./forth/forth.js\": [\n\t\t164,\n\t\t53\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t165,\n\t\t54\n\t],\n\t\"./gas/gas.js\": [\n\t\t166,\n\t\t55\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t167,\n\t\t4,\n\t\t20\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t168,\n\t\t56\n\t],\n\t\"./go/go.js\": [\n\t\t169,\n\t\t57\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t170,\n\t\t58\n\t],\n\t\"./haml/haml.js\": [\n\t\t171,\n\t\t0,\n\t\t1,\n\t\t14\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t130,\n\t\t16\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t172,\n\t\t26\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t131,\n\t\t59\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t173,\n\t\t60\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t174,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t124,\n\t\t0,\n\t\t1,\n\t\t27\n\t],\n\t\"./http/http.js\": [\n\t\t175,\n\t\t61\n\t],\n\t\"./idl/idl.js\": [\n\t\t176,\n\t\t62\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t126,\n\t\t0\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t177,\n\t\t63\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t178,\n\t\t0,\n\t\t28\n\t],\n\t\"./julia/julia.js\": [\n\t\t179,\n\t\t64\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t180,\n\t\t65\n\t],\n\t\"./lua/lua.js\": [\n\t\t181,\n\t\t66\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t136,\n\t\t4\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t182,\n\t\t67\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t183,\n\t\t68\n\t],\n\t\"./meta.js\": [\n\t\t24\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t184,\n\t\t69\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t185,\n\t\t70\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t186,\n\t\t71\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t187,\n\t\t72\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t188,\n\t\t73\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t189,\n\t\t74\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t190,\n\t\t23\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t191,\n\t\t75\n\t],\n\t\"./octave/octave.js\": [\n\t\t192,\n\t\t76\n\t],\n\t\"./oz/oz.js\": [\n\t\t193,\n\t\t77\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t194,\n\t\t78\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t195,\n\t\t0,\n\t\t79\n\t],\n\t\"./perl/perl.js\": [\n\t\t196,\n\t\t80\n\t],\n\t\"./php/php.js\": [\n\t\t197,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t17\n\t],\n\t\"./pig/pig.js\": [\n\t\t198,\n\t\t81\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t199,\n\t\t82\n\t],\n\t\"./properties/properties.js\": [\n\t\t200,\n\t\t83\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t201,\n\t\t84\n\t],\n\t\"./pug/pug.js\": [\n\t\t137,\n\t\t0,\n\t\t1,\n\t\t3\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t202,\n\t\t85\n\t],\n\t\"./python/python.js\": [\n\t\t132,\n\t\t86\n\t],\n\t\"./q/q.js\": [\n\t\t203,\n\t\t87\n\t],\n\t\"./r/r.js\": [\n\t\t204,\n\t\t88\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t205,\n\t\t89\n\t],\n\t\"./rst/rst.js\": [\n\t\t206,\n\t\t13\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t127,\n\t\t90\n\t],\n\t\"./rust/rust.js\": [\n\t\t207,\n\t\t24\n\t],\n\t\"./sas/sas.js\": [\n\t\t208,\n\t\t91\n\t],\n\t\"./sass/sass.js\": [\n\t\t134,\n\t\t1,\n\t\t92\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t209,\n\t\t93\n\t],\n\t\"./shell/shell.js\": [\n\t\t210,\n\t\t94\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t211,\n\t\t95\n\t],\n\t\"./slim/slim.js\": [\n\t\t212,\n\t\t0,\n\t\t1,\n\t\t15\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t213,\n\t\t96\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t214,\n\t\t97\n\t],\n\t\"./solr/solr.js\": [\n\t\t215,\n\t\t98\n\t],\n\t\"./soy/soy.js\": [\n\t\t216,\n\t\t0,\n\t\t1,\n\t\t18\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t217,\n\t\t99\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t218,\n\t\t100\n\t],\n\t\"./sql/sql.js\": [\n\t\t219,\n\t\t101\n\t],\n\t\"./stex/stex.js\": [\n\t\t133,\n\t\t102\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t138,\n\t\t5\n\t],\n\t\"./swift/swift.js\": [\n\t\t220,\n\t\t103\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t221,\n\t\t104\n\t],\n\t\"./textile/textile.js\": [\n\t\t222,\n\t\t105\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t223,\n\t\t106\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t224,\n\t\t107\n\t],\n\t\"./toml/toml.js\": [\n\t\t225,\n\t\t108\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t226,\n\t\t0,\n\t\t1,\n\t\t12\n\t],\n\t\"./troff/troff.js\": [\n\t\t227,\n\t\t109\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t229,\n\t\t110\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t228,\n\t\t111\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t230,\n\t\t112\n\t],\n\t\"./twig/twig.js\": [\n\t\t231,\n\t\t19\n\t],\n\t\"./vb/vb.js\": [\n\t\t232,\n\t\t113\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t233,\n\t\t114\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t234,\n\t\t115\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t235,\n\t\t116\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t236,\n\t\t117\n\t],\n\t\"./vue/vue.js\": [\n\t\t237,\n\t\t0,\n\t\t1,\n\t\t5,\n\t\t3,\n\t\t9\n\t],\n\t\"./wast/wast.js\": [\n\t\t238,\n\t\t25\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t239,\n\t\t118\n\t],\n\t\"./xml/xml.js\": [\n\t\t123,\n\t\t119\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t240,\n\t\t120\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t241,\n\t\t121\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t242,\n\t\t29\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t135,\n\t\t122\n\t],\n\t\"./z80/z80.js\": [\n\t\t243,\n\t\t123\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 120;\nmodule.exports = webpackAsyncContext;","function doCopy<T>(value: T, traversed: Set<any>): T {\n  if (Array.isArray(value)) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n    return value.map(x => doCopy(x, traversed)) as any;\n  }\n\n  if (value instanceof Blob) {\n    return value;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n\n    const copy: Record<string, any> = {};\n    for (const [k, v] of Object.entries(value)) {\n      copy[k] = doCopy(v, traversed);\n    }\n    return copy as T;\n  }\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (\n    typeof value === 'number' ||\n    typeof value === 'string' ||\n    typeof value === 'boolean'\n  ) {\n    return value;\n  }\n\n  throw new Error('value not deep-copyable');\n}\n\nexport function deepCopy<T extends Record<string, any>>(value: T): T {\n  return doCopy(value, new Set());\n}\n\nexport function deepEquals<T extends Record<string, any>>(a: T, b: T): boolean {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n    return a.every((x, i) => deepEquals(x, b[i]));\n  }\n\n  if (a instanceof Blob || b instanceof Blob) {\n    return a === b;\n  }\n\n  if (typeof a === 'object' && a !== null) {\n    if (typeof b !== 'object' || b === null) {\n      return false;\n    }\n    return (\n      Object.keys(a).length === Object.keys(b).length &&\n      Object.keys(a).every(k => deepEquals(a[k], b[k]))\n    );\n  }\n\n  return a === b;\n}\n","export interface Blueprint {\n  nodes: Record<string, NodeDescriptor>;\n  shaders: Record<string, Shader>;\n}\n\nexport type NodeMap = Map<string, NodeDescriptor>;\n\nexport type NodeDescriptor =\n  | BufferBindingNodeDescriptor\n  | BufferNodeDescriptor\n  | ComputeNodeDescriptor\n  | QueueNodeDescriptor\n  | RenderNodeDescriptor\n  | SamplerBindingNodeDescriptor\n  | SamplerNodeDescriptor\n  | TextureBindingNodeDescriptor\n  | TextureNodeDescriptor;\n\nexport interface NodeDescriptorBase {\n  type: 'buffer' | 'render' | 'compute' | 'texture' | 'sampler' | 'connection';\n  name: string;\n  position: { x: number; y: number };\n}\n\nexport interface RenderNodeDescriptor extends NodeDescriptorBase {\n  type: 'render';\n\n  // TODO: Configuration for primitive state, depth/stencil, multisampling\n\n  vertexShader: string;\n  vertexEntryPoint: string;\n\n  fragmentShader: string;\n  fragmentEntryPoint: string;\n\n  topology?: GPUPrimitiveTopology;\n  indexed: boolean;\n  numVertices: number;\n  numInstances: number;\n\n  clear?: boolean;\n  clearColor?: GPUColorDict;\n\n  depthTest?: GPUCompareFunction;\n}\n\nexport interface ComputeNodeDescriptor extends NodeDescriptorBase {\n  type: 'compute';\n  shader: string;\n  entryPoint: string;\n  dispatchSize: { x: number; y: number; z: number };\n}\n\nexport type BindingType = 'buffer' | 'sampler' | 'texture';\n\nexport type BufferInitializer = 'zero' | 'random-floats' | 'random-uints';\n\nexport interface BufferNodeDescriptor extends NodeDescriptorBase {\n  type: 'buffer';\n  size: number;\n  init?: BufferInitializer;\n}\n\nexport interface TextureNodeDescriptor extends NodeDescriptorBase {\n  type: 'texture';\n  imageData: null | Blob;\n  imageDataSerialized: null | string;\n  size: GPUExtent3DDict;\n  format: GPUTextureFormat;\n  mipLevelCount: number;\n  sampleCount: number;\n}\n\nexport interface SamplerNodeDescriptor extends NodeDescriptorBase {\n  type: 'sampler';\n\n  // TODO: Filtering, addressing, clamping, comparison, anisotropy.\n}\n\ninterface Shader {\n  name: string;\n  code: string;\n}\n\nexport type ConnectionType = 'binding' | 'queue';\n\nexport interface ConnectionNodeDescriptor extends NodeDescriptorBase {\n  type: 'connection';\n  connectionType: ConnectionType;\n  source: string;\n  target: string;\n}\n\nexport interface BindingNodeDescriptorBase extends ConnectionNodeDescriptor {\n  connectionType: 'binding';\n  bindingType: BindingType;\n  group: number;\n  binding: number;\n}\n\nexport interface QueueNodeDescriptor extends ConnectionNodeDescriptor {\n  connectionType: 'queue';\n}\n\nexport type BufferBindingStorageType = 'storage-read' | 'storage' | 'uniform';\n\nexport interface BufferBindingNodeDescriptor extends BindingNodeDescriptorBase {\n  bindingType: 'buffer';\n  storageType: BufferBindingStorageType;\n}\n\nexport interface TextureBindingNodeDescriptor\n  extends BindingNodeDescriptorBase {\n  bindingType: 'texture';\n}\n\nexport interface SamplerBindingNodeDescriptor\n  extends BindingNodeDescriptorBase {\n  bindingType: 'sampler';\n}\n\nexport function canonicalize(blueprint: Blueprint) {\n  for (const node of Object.values(blueprint.nodes)) {\n    if (!node.position) {\n      node.position = { x: 100, y: 100 };\n    }\n  }\n}\n","import { UniformLayout } from './UniformLayout';\n\nexport const BUILTIN_UNIFORMS_WGSL = `// All shader sources are prefixed with the definitions below, providing a\n// set of builtin uniform inputs which are updated by the application before\n// each frame iteration.\n[[block]] struct BuiltinUniforms {\n  // The time in seconds since the application loaded.\n  time: f32;\n\n  // The time in seconds since the last frame iteration. Zero for the first\n  // frame.\n  timeDelta: f32;\n\n  // The count of the current frame. The first frame is frame 0.\n  frame: u32;\n\n  // The resolution in pixels of the main output texture displayed by the app.\n  [[align(16)]] resolution: vec2<u32>;\n};\n\n// All builtin uniforms are accessible to all shaders through this global.\n[[group(0), binding(0)]] var<uniform> builtinUniforms: BuiltinUniforms;\n`;\n\nexport const BUILTIN_UNIFORMS: UniformLayout = {\n  fields: [\n    { name: 'time', type: 'f32' },\n    { name: 'timeDelta', type: 'f32' },\n    { name: 'frame', type: 'u32' },\n    { name: 'resolution', type: { vectorType: 'vec2', componentType: 'u32' } },\n  ],\n};\n","import {\n  Blueprint,\n  BufferBindingNodeDescriptor,\n  BufferNodeDescriptor,\n  ComputeNodeDescriptor,\n  ConnectionNodeDescriptor,\n  RenderNodeDescriptor,\n  SamplerBindingNodeDescriptor,\n  SamplerNodeDescriptor,\n  TextureBindingNodeDescriptor,\n  TextureNodeDescriptor,\n} from './Blueprint';\nimport { Gpu } from './Gpu';\nimport { BUILTIN_UNIFORMS_WGSL } from './BuiltinUniforms';\n\nexport type ShaderCompilationMessageType = 'info' | 'warning' | 'error';\n\nexport interface ShaderCompilationMessage {\n  message: string;\n  type: ShaderCompilationMessageType;\n  lineNum: number;\n  linePos: number;\n  offset: number;\n  length: number;\n}\n\nexport interface ShaderCompilationInfo {\n  messages: ShaderCompilationMessage[];\n}\n\nexport interface CompileResult {\n  executable?: Executable;\n  shaderInfo: Record<string, ShaderCompilationInfo>;\n  messages: string[];\n}\n\ninterface CompiledComputePass {\n  type: 'compute';\n  descriptor: ComputeNodeDescriptor;\n  bindGroups: GPUBindGroup[];\n  pipeline: GPUComputePipeline;\n}\n\ninterface CompiledRenderPass {\n  type: 'render';\n  descriptor: RenderNodeDescriptor;\n  bundle: GPURenderBundle;\n}\n\ntype CompiledPass = CompiledComputePass | CompiledRenderPass;\n\nexport class Executable {\n  private gpu_: Gpu;\n  private blueprint_: Blueprint;\n  private shaders_: Record<string, GPUShaderModule>;\n  private shaderInfo_: Record<string, ShaderCompilationInfo>;\n  private builtinUniforms_: null | GPUBuffer;\n  private buffers_: Record<string, GPUBuffer>;\n  private textures_: Record<string, GPUTexture>;\n  private samplers_: Record<string, GPUSampler>;\n  private passes_: CompiledPass[];\n\n  private outputDepthStencilTexture_: null | GPUTexture;\n  private outputDepthStencilTextureSize_: GPUExtent3DDict;\n\n  constructor(\n    gpu: Gpu,\n    blueprint: Blueprint,\n    shaders: Record<string, GPUShaderModule>,\n    shaderInfo: Record<string, ShaderCompilationInfo>\n  ) {\n    this.gpu_ = gpu;\n    this.blueprint_ = blueprint;\n    this.shaders_ = shaders;\n    this.shaderInfo_ = shaderInfo;\n    this.builtinUniforms_ = null;\n    this.buffers_ = {};\n    this.textures_ = {};\n    this.samplers_ = {};\n    this.passes_ = [];\n    this.outputDepthStencilTexture_ = null;\n    this.outputDepthStencilTextureSize_ = { width: 0, height: 0 };\n  }\n\n  get gpu() {\n    return this.gpu_;\n  }\n\n  static async compile(\n    gpu: Gpu,\n    blueprint: Blueprint,\n    outputFormat: GPUTextureFormat\n  ): Promise<CompileResult> {\n    if (!gpu.isAcquired) {\n      return { shaderInfo: {}, messages: ['GPU has been lost'] };\n    }\n\n    const usedShaders: Record<string, boolean> = {};\n    for (const node of Object.values(blueprint.nodes)) {\n      if (node.type === 'render') {\n        if (node.vertexShader !== '') {\n          usedShaders[node.vertexShader] = true;\n        }\n        if (node.fragmentShader !== '') {\n          usedShaders[node.fragmentShader] = true;\n        }\n      } else if (node.type === 'compute' && node.shader !== '') {\n        usedShaders[node.shader] = true;\n      }\n    }\n\n    const device = gpu.device!;\n    const modules: Record<string, GPUShaderModule> = {};\n    for (const [id, s] of Object.entries(blueprint.shaders)) {\n      modules[id] = device.createShaderModule({\n        code: BUILTIN_UNIFORMS_WGSL + s.code,\n      });\n    }\n\n    let fail: boolean = false;\n    const shaderInfo: Record<string, ShaderCompilationInfo> = {};\n    for (const [id, m] of Object.entries(modules)) {\n      const info = await m.compilationInfo();\n      shaderInfo[id] = {\n        messages: info.messages.map(m => ({\n          message: m.message,\n          type: m.type,\n          lineNum: m.lineNum,\n          linePos: m.linePos,\n          offset: m.offset,\n          length: m.length,\n        })),\n      };\n\n      for (const message of info.messages) {\n        if (message.type === 'error' && usedShaders[id]) {\n          fail = true;\n        }\n      }\n      if (\n        info.messages.some(message => message.type === 'error') &&\n        usedShaders[id]\n      ) {\n        fail = true;\n      }\n    }\n    if (fail) {\n      return {\n        shaderInfo,\n        messages: ['One or more shaders failed to compile'],\n      };\n    }\n\n    const executable = new Executable(gpu, blueprint, modules, shaderInfo);\n    let messages: string[] = [];\n    try {\n      messages = await executable.compile_(outputFormat);\n    } catch (e) {\n      console.log('Compilation failed: ' + e.message);\n      return { shaderInfo: {}, messages: [...messages, e.message] };\n    }\n    return { executable, shaderInfo, messages };\n  }\n\n  async compile_(outputFormat: GPUTextureFormat): Promise<string[]> {\n    if (!this.gpu_.isAcquired) {\n      return ['GPU has been lost'];\n    }\n\n    const messages: string[] = [];\n    const device = this.gpu_.device!;\n\n    interface PipelineBindGroup {\n      layout: GPUBindGroupLayoutEntry[];\n      bindings: Map<number, string>;\n    }\n\n    const bufferBindingsByPass: Record<string, BufferBindingNodeDescriptor[]> =\n      {};\n    const textureBindingsByPass: Record<\n      string,\n      TextureBindingNodeDescriptor[]\n    > = {};\n    const samplerBindingsByPass: Record<\n      string,\n      SamplerBindingNodeDescriptor[]\n    > = {};\n    Object.entries(this.blueprint_.nodes).forEach(([id, node]) => {\n      if (node.type !== 'connection' || node.connectionType !== 'binding') {\n        return;\n      }\n      switch (node.bindingType) {\n        case 'buffer':\n          if (!bufferBindingsByPass[node.target]) {\n            bufferBindingsByPass[node.target] = [];\n          }\n          bufferBindingsByPass[node.target].push(node);\n          break;\n\n        case 'texture':\n          if (!textureBindingsByPass[node.target]) {\n            textureBindingsByPass[node.target] = [];\n          }\n          textureBindingsByPass[node.target].push(node);\n          break;\n\n        case 'sampler':\n          if (!samplerBindingsByPass[node.target]) {\n            samplerBindingsByPass[node.target] = [];\n          }\n          samplerBindingsByPass[node.target].push(node);\n          break;\n      }\n    });\n\n    const pipelineBindGroups: Record<string, PipelineBindGroup[]> = {};\n    const bufferUsageFlags: Record<string, GPUBufferUsageFlags> = {};\n    const collectResourceUsage = (\n      pipelineId: string,\n      visibility: GPUShaderStageFlags\n    ) => {\n      for (const node of bufferBindingsByPass[pipelineId] ?? []) {\n        const descriptor = node as BufferBindingNodeDescriptor;\n        let usageFlags = 0;\n        const entry: GPUBindGroupLayoutEntry = {\n          binding: descriptor.binding,\n          visibility,\n        };\n        const groups = pipelineBindGroups[pipelineId] ?? [];\n        pipelineBindGroups[pipelineId] = groups;\n\n        const group = descriptor.group;\n        const bindGroup = groups[group] ?? { layout: [], bindings: new Map() };\n        groups[group] = bindGroup;\n        bindGroup.layout.push(entry);\n        bindGroup.bindings.set(descriptor.binding, node.source);\n\n        switch (descriptor.storageType) {\n          case 'storage-read':\n            usageFlags = GPUBufferUsage.STORAGE;\n            entry.buffer = { type: 'read-only-storage' };\n            break;\n\n          case 'storage':\n            usageFlags = GPUBufferUsage.STORAGE;\n            entry.buffer = { type: 'storage' };\n            break;\n\n          case 'uniform':\n            usageFlags = GPUBufferUsage.UNIFORM;\n            entry.buffer = { type: 'uniform' };\n            break;\n        }\n\n        if (usageFlags !== 0) {\n          bufferUsageFlags[node.source] =\n            (bufferUsageFlags[node.source] ?? 0) | usageFlags;\n        }\n      }\n\n      for (const node of textureBindingsByPass[pipelineId] ?? []) {\n        const descriptor = node as TextureBindingNodeDescriptor;\n        const entry: GPUBindGroupLayoutEntry = {\n          binding: descriptor.binding,\n          visibility,\n        };\n        const groups = pipelineBindGroups[pipelineId] ?? [];\n        pipelineBindGroups[pipelineId] = groups;\n\n        const group = descriptor.group;\n        const bindGroup = groups[group] ?? { layout: [], bindings: new Map() };\n        groups[group] = bindGroup;\n        bindGroup.layout.push(entry);\n        bindGroup.bindings.set(descriptor.binding, node.source);\n        entry.texture = {};\n      }\n\n      for (const node of samplerBindingsByPass[pipelineId] ?? []) {\n        const descriptor = node as SamplerBindingNodeDescriptor;\n        const entry: GPUBindGroupLayoutEntry = {\n          binding: descriptor.binding,\n          visibility,\n        };\n        const groups = pipelineBindGroups[pipelineId] ?? [];\n        pipelineBindGroups[pipelineId] = groups;\n\n        const group = descriptor.group;\n        const bindGroup = groups[group] ?? { layout: [], bindings: new Map() };\n        groups[group] = bindGroup;\n        bindGroup.layout.push(entry);\n        bindGroup.bindings.set(descriptor.binding, node.source);\n        entry.sampler = {};\n      }\n    };\n\n    const buffers: Record<string, BufferNodeDescriptor> = {};\n    const textures: Record<string, TextureNodeDescriptor> = {};\n    const samplers: Record<string, SamplerNodeDescriptor> = {};\n    const renders: Record<string, RenderNodeDescriptor> = {};\n    const computes: Record<string, ComputeNodeDescriptor> = {};\n    const connections: Record<string, ConnectionNodeDescriptor> = {};\n    for (const [id, node] of Object.entries(this.blueprint_.nodes)) {\n      switch (node.type) {\n        case 'buffer':\n          buffers[id] = node;\n          break;\n\n        case 'texture':\n          textures[id] = node;\n          break;\n\n        case 'sampler':\n          samplers[id] = node;\n          break;\n\n        case 'render':\n          renders[id] = node;\n          collectResourceUsage(\n            id,\n            GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT\n          );\n          break;\n\n        case 'compute':\n          computes[id] = node;\n          collectResourceUsage(id, GPUShaderStage.COMPUTE);\n          break;\n\n        case 'connection':\n          connections[id] = node;\n          break;\n      }\n    }\n\n    this.builtinUniforms_ = device.createBuffer({\n      size: 24,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    for (const [id, node] of Object.entries(buffers)) {\n      const flags = bufferUsageFlags[id];\n      if (!flags) {\n        continue;\n      }\n\n      const mappedAtCreation = node.init !== 'zero';\n      const buffer = device.createBuffer({\n        size: node.size,\n        usage: bufferUsageFlags[id],\n        mappedAtCreation,\n      });\n      if (mappedAtCreation) {\n        const data = buffer.getMappedRange(0, node.size);\n        if (node.init === 'random-floats') {\n          const uints = new Uint32Array(node.size / 4);\n          crypto.getRandomValues(uints);\n\n          const floats = new Float32Array(data);\n          uints.forEach((x, i) => (floats[i] = x / 2 ** 31 - 1));\n        } else if (node.init === 'random-uints') {\n          const uints = new Uint32Array(data);\n          crypto.getRandomValues(uints);\n        }\n        buffer.unmap();\n      }\n      this.buffers_[id] = buffer;\n    }\n\n    for (const [id, node] of Object.entries(textures)) {\n      if (!node.imageData) {\n        continue;\n      }\n      const image = await createImageBitmap(node.imageData);\n      const size = { width: image.width, height: image.height };\n      const texture = device.createTexture({\n        size,\n        format: 'rgba8unorm',\n        usage:\n          GPUTextureUsage.SAMPLED |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      device.queue.copyExternalImageToTexture(\n        { source: image },\n        { texture },\n        size\n      );\n      this.textures_[id] = texture;\n    }\n\n    for (const [id] of Object.entries(samplers)) {\n      this.samplers_[id] = device.createSampler();\n    }\n\n    const getBindingResource = (id: string): GPUBindingResource => {\n      if (id === 'builtin-uniforms') {\n        return { buffer: this.builtinUniforms_! };\n      }\n\n      const node = this.blueprint_.nodes[id];\n      if (!node) {\n        throw new Error(`unknown node ${id}`);\n      }\n\n      switch (node.type) {\n        case 'buffer':\n          const buffer = this.buffers_[id];\n          if (!buffer) {\n            throw new Error(`unknown buffer ${id}`);\n          }\n          return { buffer };\n\n        case 'texture':\n          const texture = this.textures_[id];\n          if (!texture) {\n            throw new Error(`unknown texture ${id}`);\n          }\n          return texture.createView();\n\n        case 'sampler':\n          const sampler = this.samplers_[id];\n          if (!sampler) {\n            throw new Error(`unknown sampler ${id}`);\n          }\n          return sampler;\n\n        default:\n          throw new Error(`unsupported binding resource type '${node.type}'`);\n      }\n    };\n\n    const compileBindings = (id: string) => {\n      const groups = pipelineBindGroups[id] ?? [];\n\n      if (!groups[0]) {\n        groups[0] = { layout: [], bindings: new Map() };\n      }\n      const visibility =\n        this.blueprint_.nodes[id]?.type === 'render'\n          ? GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT\n          : GPUShaderStage.COMPUTE;\n      groups[0].layout.unshift({\n        binding: 0,\n        visibility,\n        buffer: { type: 'uniform' },\n      });\n      groups[0].bindings.set(0, 'builtin-uniforms');\n\n      const bindGroupLayouts = groups.map((group, i) => {\n        return device.createBindGroupLayout({ entries: group.layout ?? [] });\n      });\n      const layout = device.createPipelineLayout({ bindGroupLayouts });\n      const bindGroups = groups.map((group, i) => {\n        return device.createBindGroup({\n          layout: bindGroupLayouts[i],\n          entries: Array.from(group.bindings.entries()).map(\n            ([binding, id]) => ({ binding, resource: getBindingResource(id) })\n          ),\n        });\n      });\n      return { layout, bindGroups };\n    };\n\n    const allPasses: Map<string, CompiledPass> = new Map();\n    for (const [id, node] of Object.entries(renders)) {\n      const vertexShader = this.shaders_[node.vertexShader];\n      const fragmentShader = this.shaders_[node.fragmentShader];\n      if (!vertexShader || !fragmentShader) {\n        continue;\n      }\n\n      const { layout, bindGroups } = compileBindings(id);\n      const topology = node.topology ?? 'triangle-list';\n      const stripIndexFormat =\n        topology === 'line-strip' || topology === 'triangle-strip'\n          ? 'uint32'\n          : undefined;\n      const pipeline = device.createRenderPipeline({\n        layout,\n        vertex: {\n          module: this.shaders_[node.vertexShader],\n          entryPoint: node.vertexEntryPoint,\n        },\n        primitive: {\n          topology,\n          stripIndexFormat,\n          cullMode: 'none',\n        },\n        fragment: {\n          targets: [{ format: outputFormat }],\n          module: this.shaders_[node.fragmentShader],\n          entryPoint: node.fragmentEntryPoint,\n        },\n        depthStencil: {\n          format: 'depth24plus-stencil8',\n          depthWriteEnabled: true,\n          depthCompare: node.depthTest ?? 'always',\n        },\n      });\n      const encoder = device.createRenderBundleEncoder({\n        colorFormats: [outputFormat],\n        depthStencilFormat: 'depth24plus-stencil8',\n      });\n      encoder.setPipeline(pipeline);\n      bindGroups.forEach((group, i) => {\n        if (group) {\n          encoder.setBindGroup(i, group);\n        }\n      });\n      encoder.draw(node.numVertices, node.numInstances);\n      allPasses.set(id, {\n        type: 'render',\n        descriptor: node,\n        bundle: encoder.finish(),\n      });\n    }\n\n    for (const [id, node] of Object.entries(computes)) {\n      const shader = this.shaders_[node.shader];\n      if (!shader) {\n        continue;\n      }\n\n      const { layout, bindGroups } = compileBindings(id);\n      const pipeline = device.createComputePipeline({\n        layout,\n        compute: {\n          module: this.shaders_[node.shader],\n          entryPoint: node.entryPoint,\n        },\n      });\n      allPasses.set(id, {\n        type: 'compute',\n        descriptor: node,\n        bindGroups,\n        pipeline,\n      });\n    }\n\n    // Build an ordered list of passes based on the queueing dependency graph.\n    const targets: Map<string, string> = new Map();\n    const startNodes: Set<string> = new Set(allPasses.keys());\n    for (const node of Object.values(connections)) {\n      if (node.connectionType !== 'queue') {\n        continue;\n      }\n      targets.set(node.source, node.target);\n      startNodes.delete(node.target);\n    }\n    if (startNodes.size === 0) {\n      throw new Error('No usable passes compiled');\n    }\n\n    let thisPhase = Array.from(startNodes);\n    while (this.passes_.length < allPasses.size) {\n      this.passes_.push(...thisPhase.map(id => allPasses.get(id)!));\n      const nextPhase = [];\n      for (const passId of thisPhase) {\n        const target = targets.get(passId);\n        if (target) {\n          nextPhase.push(target);\n        }\n      }\n      thisPhase = nextPhase;\n    }\n\n    return messages;\n  }\n\n  updateUniforms(uniforms: Record<string, any>) {\n    if (!this.gpu_.isAcquired || !this.builtinUniforms_) {\n      return;\n    }\n\n    const device = this.gpu_.device!;\n    const data = new ArrayBuffer(24);\n    const floats = new Float32Array(data);\n    const uints = new Uint32Array(data);\n    floats[0] = (uniforms['time'] as number) ?? 0;\n    floats[1] = (uniforms['timeDelta'] as number) ?? 0;\n    uints[2] = (uniforms['frame'] as number) ?? 0;\n    uints[4] = uniforms['resolution']?.width ?? 1;\n    uints[5] = uniforms['resolution']?.height ?? 1;\n    device.queue.writeBuffer(this.builtinUniforms_, 0, data, 0, 24);\n  }\n\n  execute(texture: GPUTexture, { width, height }: GPUExtent3DDict) {\n    if (!this.gpu_.isAcquired) {\n      return;\n    }\n\n    const device = this.gpu_.device!;\n    const encoder = device.createCommandEncoder();\n\n    // TODO: configurable depth/stencil state\n    if (\n      this.outputDepthStencilTexture_ === null ||\n      this.outputDepthStencilTextureSize_.width !== width ||\n      this.outputDepthStencilTextureSize_.height !== height\n    ) {\n      if (this.outputDepthStencilTexture_ !== null) {\n        this.outputDepthStencilTexture_.destroy();\n        this.outputDepthStencilTexture_ = null;\n      }\n\n      this.outputDepthStencilTexture_ = device.createTexture({\n        size: { width, height },\n        format: 'depth24plus-stencil8',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      this.outputDepthStencilTextureSize_ = { width, height };\n    }\n\n    for (const pass of this.passes_) {\n      if (pass.type === 'compute') {\n        const computePass = encoder.beginComputePass();\n        const dispatchSize = pass.descriptor.dispatchSize;\n        computePass.setPipeline(pass.pipeline);\n        pass.bindGroups.forEach((group, i) => {\n          if (group) {\n            computePass.setBindGroup(i, group);\n          }\n        });\n        computePass.dispatch(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n        computePass.endPass();\n      } else {\n        const loadValue = pass.descriptor.clear\n          ? pass.descriptor.clearColor ?? { r: 0, g: 0, b: 0, a: 1 }\n          : ('load' as const);\n        const renderPass = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: texture.createView(),\n              loadValue,\n              storeOp: 'store' as const,\n            },\n          ],\n          depthStencilAttachment: {\n            view: this.outputDepthStencilTexture_.createView(),\n            depthLoadValue: pass.descriptor.clear ? 1 : 'load',\n            depthStoreOp: 'store',\n            stencilLoadValue: 1,\n            stencilStoreOp: 'store',\n          },\n        });\n        renderPass.executeBundles([pass.bundle]);\n        renderPass.endPass();\n      }\n    }\n\n    const commands = encoder.finish();\n    device.queue.submit([commands]);\n  }\n}\n","const REACQUIRE_ON_LOST_DELAY_MS = 1000;\n\ntype AcquiredHandler = (() => void) | (() => Promise<void>);\ntype LostHandler = (() => void) | (() => Promise<void>);\n\nexport class Gpu {\n  private adapter_: null | GPUAdapter;\n  private device_: null | GPUDevice;\n  private lost_: boolean;\n  private pendingAcquisition_: null | Promise<void>;\n\n  onAcquired: null | AcquiredHandler;\n  onLost: null | LostHandler;\n\n  constructor() {\n    this.adapter_ = null;\n    this.device_ = null;\n    this.lost_ = false;\n    this.pendingAcquisition_ = null;\n    this.onAcquired = null;\n    this.onLost = null;\n    this.acquire();\n  }\n\n  get isAcquired() {\n    return this.adapter_ !== null;\n  }\n  get isLost() {\n    return !this.isAcquired;\n  }\n  get adapter() {\n    return this.adapter_;\n  }\n  get device() {\n    return this.device_;\n  }\n\n  acquire = async () => {\n    if (this.pendingAcquisition_ === null) {\n      this.pendingAcquisition_ = this.acquireInternal_();\n    }\n    return this.pendingAcquisition_;\n  };\n\n  release = () => {\n    if (!this.isAcquired) {\n      throw new Error('not acquired');\n    }\n\n    this.adapter_ = null;\n    this.device_ = null;\n  };\n\n  async acquireInternal_() {\n    if (this.isAcquired) {\n      throw new Error('already acquired.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('no webgpu adapter available');\n    }\n\n    try {\n      const device = await adapter.requestDevice();\n      if (!device) {\n        throw new Error('no webgpu device available');\n      }\n      this.device_ = device;\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.pendingAcquisition_ = null;\n    this.adapter_ = adapter;\n    this.device_!.lost.then(this.onLost_);\n    if (this.onAcquired !== null) {\n      await this.onAcquired();\n    }\n  }\n\n  onLost_ = async () => {\n    console.warn('Lost GPU. Reacquiring after short delay...');\n\n    this.adapter_ = null;\n    this.device_ = null;\n    if (this.onLost != null) {\n      await this.onLost();\n    }\n    await new Promise(resolve =>\n      setTimeout(resolve, REACQUIRE_ON_LOST_DELAY_MS)\n    );\n  };\n}\n","import { deepCopy, deepEquals } from '../base/Util';\nimport { Blueprint } from './Blueprint';\nimport { CompileResult, Executable, ShaderCompilationInfo } from './Executable';\nimport { Gpu } from './Gpu';\n\nconst getContextFromCanvas = (\n  canvas: HTMLCanvasElement\n): null | GPUCanvasContext => {\n  return canvas.getContext('webgpu') as (null | GPUCanvasContext);\n};\n\nexport class FrameProducer {\n  private gpu_: Gpu;\n  private preferredTargetTextureFormat_: GPUTextureFormat;\n\n  private lastUsedContext_?: GPUCanvasContext;\n  private lastUsedResolution_?: GPUExtent3DDict;\n\n  private startTime_?: number;\n  private lastFrameTime_?: number;\n  private frame_: number;\n\n  private blueprint_: null | Blueprint;\n  private lastCompiledDescriptor_: null | Blueprint;\n  private mostRecentPendingCompile_: null | Promise<CompileResult>;\n  private executable_: null | Executable;\n\n  onShadersCompiled?: (info: Record<string, ShaderCompilationInfo>) => void;\n\n  constructor() {\n    this.gpu_ = new Gpu();\n    this.gpu_.onAcquired = this.onGpuAcquired_;\n\n    this.frame_ = 0;\n\n    this.blueprint_ = null;\n    this.lastCompiledDescriptor_ = null;\n    this.mostRecentPendingCompile_ = null;\n    this.executable_ = null;\n\n    this.preferredTargetTextureFormat_ = 'bgra8unorm';\n  }\n\n  reconfigure() {\n    this.lastCompiledDescriptor_ = null;\n    this.executable_ = null;\n    this.tryCompile_();\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    if (this.blueprint_ && deepEquals(this.blueprint_, blueprint)) {\n      return;\n    }\n\n    this.blueprint_ = deepCopy(blueprint);\n    this.executable_ = null;\n    this.tryCompile_();\n  }\n\n  stop() {\n    this.blueprint_ = null;\n    this.executable_ = null;\n  }\n\n  render(canvas: HTMLCanvasElement, resolution: GPUExtent3DDict) {\n    if (!this.gpu_ || !this.gpu_.isAcquired) {\n      return null;\n    }\n\n    const context = getContextFromCanvas(canvas);\n    if (context === null) {\n      this.stop();\n      throw new Error('no webgpu context');\n    }\n\n    const device = this.gpu_.device!;\n    const outputFormat: GPUTextureFormat =\n        context.getPreferredFormat(this.gpu_.adapter!);\n\n    if (\n      !this.lastUsedContext_ ||\n      !this.lastUsedResolution_ ||\n      this.lastUsedContext_ !== context ||\n      this.lastUsedResolution_.width !== resolution.width ||\n      this.lastUsedResolution_.height !== resolution.height\n    ) {\n      context.configure({\n        device,\n        format: outputFormat,\n        size: { ...resolution },\n      });\n      this.lastUsedResolution_ = { ...resolution };\n    }\n\n    if (this.preferredTargetTextureFormat_ !== outputFormat) {\n      this.preferredTargetTextureFormat_ = outputFormat;\n      this.executable_ = null;\n    }\n\n    if (!this.executable_) {\n      if (!this.mostRecentPendingCompile_) {\n        this.tryCompile_();\n      }\n      return;\n    }\n\n    // This is an egregious hack to get consistent nearest-neighbor filtering on\n    // a scaled-up canvas texture in Chrome. See crbug.com/1044590.\n    canvas.style.filter = 'blur(0px)';\n\n    const now = new Date().getTime();\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n    const delta = now - (this.lastFrameTime_ ?? now);\n    this.lastFrameTime_ = now;\n    this.executable_.updateUniforms({\n      time: (now - this.startTime_) / 1000,\n      timeDelta: delta / 1000,\n      frame: this.frame_++,\n      resolution,\n    });\n    this.executable_.execute(context.getCurrentTexture(), resolution);\n  }\n\n  onGpuAcquired_ = () => {\n    this.executable_ = null;\n    this.tryCompile_();\n  };\n\n  tryCompile_ = async () => {\n    if (!this.gpu_.isAcquired || !this.blueprint_) {\n      return;\n    }\n\n    if (\n      this.lastCompiledDescriptor_ &&\n      deepEquals(this.lastCompiledDescriptor_, this.blueprint_)\n    ) {\n      return;\n    }\n\n    const descriptor = this.blueprint_;\n    const thisCompile = Executable.compile(\n      this.gpu_,\n      descriptor,\n      this.preferredTargetTextureFormat_\n    );\n    this.mostRecentPendingCompile_ = thisCompile;\n    const result = await thisCompile;\n    if (thisCompile !== this.mostRecentPendingCompile_) {\n      return;\n    }\n\n    this.lastCompiledDescriptor_ = descriptor;\n    this.mostRecentPendingCompile_ = null;\n    if (this.onShadersCompiled) {\n      this.onShadersCompiled(result.shaderInfo);\n    }\n    this.executable_ = result.executable ?? null;\n  };\n}\n","import 'codemirror/theme/3024-day.css';\nimport 'codemirror/theme/3024-night.css';\nimport 'codemirror/theme/abbott.css';\nimport 'codemirror/theme/abcdef.css';\nimport 'codemirror/theme/ambiance-mobile.css';\nimport 'codemirror/theme/ambiance.css';\nimport 'codemirror/theme/ayu-dark.css';\nimport 'codemirror/theme/ayu-mirage.css';\nimport 'codemirror/theme/base16-dark.css';\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/bespin.css';\nimport 'codemirror/theme/blackboard.css';\nimport 'codemirror/theme/cobalt.css';\nimport 'codemirror/theme/colorforth.css';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/duotone-dark.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/theme/elegant.css';\nimport 'codemirror/theme/erlang-dark.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/theme/hopscotch.css';\nimport 'codemirror/theme/icecoder.css';\nimport 'codemirror/theme/idea.css';\nimport 'codemirror/theme/isotope.css';\nimport 'codemirror/theme/juejin.css';\nimport 'codemirror/theme/lesser-dark.css';\nimport 'codemirror/theme/liquibyte.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/theme/material-darker.css';\nimport 'codemirror/theme/material-ocean.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/mbo.css';\nimport 'codemirror/theme/mdn-like.css';\nimport 'codemirror/theme/midnight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/moxer.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/theme/neo.css';\nimport 'codemirror/theme/night.css';\nimport 'codemirror/theme/nord.css';\nimport 'codemirror/theme/oceanic-next.css';\nimport 'codemirror/theme/panda-syntax.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/paraiso-light.css';\nimport 'codemirror/theme/pastel-on-dark.css';\nimport 'codemirror/theme/railscasts.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/theme/seti.css';\nimport 'codemirror/theme/shadowfox.css';\nimport 'codemirror/theme/solarized.css';\nimport 'codemirror/theme/ssms.css';\nimport 'codemirror/theme/the-matrix.css';\nimport 'codemirror/theme/tomorrow-night-bright.css';\nimport 'codemirror/theme/tomorrow-night-eighties.css';\nimport 'codemirror/theme/ttcn.css';\nimport 'codemirror/theme/twilight.css';\nimport 'codemirror/theme/vibrant-ink.css';\nimport 'codemirror/theme/xq-dark.css';\nimport 'codemirror/theme/xq-light.css';\nimport 'codemirror/theme/yeti.css';\nimport 'codemirror/theme/yonce.css';\nimport 'codemirror/theme/zenburn.css';\n\nexport const CODE_MIRROR_THEMES = [\n  '3024-day',\n  '3024-night',\n  'abbott',\n  'abcdef',\n  'ambiance-mobile',\n  'ambiance',\n  'ayu-dark',\n  'ayu-mirage',\n  'base16-dark',\n  'base16-light',\n  'bespin',\n  'blackboard',\n  'cobalt',\n  'colorforth',\n  'darcula',\n  'dracula',\n  'duotone-dark',\n  'duotone-light',\n  'eclipse',\n  'elegant',\n  'erlang-dark',\n  'gruvbox-dark',\n  'hopscotch',\n  'icecoder',\n  'idea',\n  'isotope',\n  'juejin',\n  'lesser-dark',\n  'liquibyte',\n  'lucario',\n  'material-darker',\n  'material-ocean',\n  'material-palenight',\n  'material',\n  'mbo',\n  'mdn-like',\n  'midnight',\n  'monokai',\n  'moxer',\n  'neat',\n  'neo',\n  'night',\n  'nord',\n  'oceanic-next',\n  'panda-syntax',\n  'paraiso-dark',\n  'paraiso-light',\n  'pastel-on-dark',\n  'railscasts',\n  'rubyblue',\n  'seti',\n  'shadowfox',\n  'solarized',\n  'ssms',\n  'the-matrix',\n  'tomorrow-night-bright',\n  'tomorrow-night-eighties',\n  'ttcn',\n  'twilight',\n  'vibrant-ink',\n  'xq-dark',\n  'xq-light',\n  'yeti',\n  'yonce',\n  'zenburn',\n];\n","import './LabeledField.css';\n\nimport React from 'react';\n\ninterface Props {\n  label: string;\n  children: React.ReactNode;\n}\n\nexport const LabeledField = ({ label, children }: Props) => {\n  return (\n    <div className=\"LabeledField\">\n      <div className=\"Label\">{label}</div>\n      <div className=\"Field\">{children}</div>\n    </div>\n  );\n};\n","import './ControlPanel.css';\n\nimport React from 'react';\nimport { toByteArray, fromByteArray } from 'base64-js';\n\nimport { deepCopy } from '../base/Util';\nimport { Blueprint } from '../gpu/Blueprint';\nimport { CODE_MIRROR_THEMES } from './CodeMirrorThemes';\nimport { DisplayConfig } from './Display';\nimport { LabeledField } from './LabeledField';\n\ninterface Props {\n  blueprint: Blueprint;\n  displayConfig: DisplayConfig;\n  onDisplayConfigChange: (change: Partial<DisplayConfig>) => void;\n  savedBlueprints: Record<string, Blueprint>;\n  onSaveBlueprint: (name: string) => void;\n  onLoadBlueprint: (name: string) => void;\n  onImportBlueprint: (blueprint: Blueprint) => void;\n  onDeleteBlueprint: (name: string) => void;\n  codeMirrorTheme: string;\n  onCodeMirrorThemeChange: (name: string) => void;\n}\n\ninterface State {\n  optionsVisible: boolean;\n  loadMenuVisible: boolean;\n  pasteMenuVisible: boolean;\n}\n\nexport class ControlPanel extends React.Component<Props, State> {\n  private pixelSizeToggleRef_: React.RefObject<HTMLInputElement>;\n  private pixelSizeRef_: React.RefObject<HTMLInputElement>;\n  private framebufferWidthRef_: React.RefObject<HTMLInputElement>;\n  private framebufferHeightRef_: React.RefObject<HTMLInputElement>;\n  private importRef_: React.RefObject<HTMLTextAreaElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      optionsVisible: false,\n      loadMenuVisible: false,\n      pasteMenuVisible: false,\n    };\n\n    this.pixelSizeToggleRef_ = React.createRef();\n    this.pixelSizeRef_ = React.createRef();\n    this.framebufferWidthRef_ = React.createRef();\n    this.framebufferHeightRef_ = React.createRef();\n    this.importRef_ = React.createRef();\n  }\n\n  render() {\n    const displayConfig = this.props.displayConfig;\n    const makeAspectOption = (ratio: string) => (\n      <label>\n        <input\n          type=\"radio\"\n          name=\"aspect\"\n          value={ratio}\n          onChange={this.setAspectRatio_}\n          checked={ratio === displayConfig.aspect}\n        />\n        {ratio}\n      </label>\n    );\n\n    return (\n      <div className=\"ControlPanel\">\n        <button\n          className=\"Toggle\"\n          title=\"Options\"\n          onClick={this.toggleOptions_}\n        >\n          ⚙️\n        </button>\n        <button\n          className=\"Toggle\"\n          title=\"Toggle Fullscreen\"\n          onClick={this.enterFullscreen_}\n        >\n          🖥️\n        </button>\n        {this.state.optionsVisible && (\n          <div className=\"OptionsPanel\">\n            <h1>Display Options</h1>\n            <h2>Aspect Ratio</h2>\n            {makeAspectOption('None')}\n            {makeAspectOption('1:1')}\n            {makeAspectOption('4:3')}\n            {makeAspectOption('16:9')}\n            {makeAspectOption('16:10')}\n            <h2>Resolution</h2>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"pixel\"\n                ref={this.pixelSizeToggleRef_}\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'pixel'}\n              />\n              Fixed Pixel Size\n              <input\n                type=\"number\"\n                name=\"pixelSize\"\n                value={displayConfig.resolution.pixelSize ?? 1}\n                ref={this.pixelSizeRef_}\n                style={{ width: '3em', marginLeft: '1em' }}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"framebuffer\"\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'framebuffer'}\n              />\n              Fixed Framebuffer Size\n              <input\n                type=\"text\"\n                name=\"framebufferWidth\"\n                style={{ width: '4em', marginLeft: '1em' }}\n                ref={this.framebufferWidthRef_}\n                value={displayConfig.resolution.framebufferSize?.width ?? 4}\n                onChange={this.updateResolution_}\n              />\n              x\n              <input\n                type=\"text\"\n                name=\"framebufferHeight\"\n                style={{ width: '4em' }}\n                ref={this.framebufferHeightRef_}\n                value={displayConfig.resolution.framebufferSize?.height ?? 4}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <h1>Editor Options</h1>\n            <LabeledField label=\"Theme\">\n              <select\n                value={this.props.codeMirrorTheme}\n                onChange={e =>\n                  this.props.onCodeMirrorThemeChange(e.currentTarget.value)\n                }\n              >\n                {CODE_MIRROR_THEMES.map(theme => {\n                  return (\n                    <option key={theme} value={theme}>\n                      {theme}\n                    </option>\n                  );\n                })}\n              </select>\n            </LabeledField>\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.saveBlueprint_}\n          title=\"Save Blueprint\"\n        >\n          💾\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.toggleLoadBlueprintPanel_}\n          title=\"Load Blueprint\"\n        >\n          📂\n        </button>\n        {this.state.loadMenuVisible && (\n          <div className=\"LoadBlueprintPanel\">\n            <h1>Saved Shaders</h1>\n            {Object.entries(this.props.savedBlueprints).map(\n              ([name, blueprint]) => {\n                return (\n                  <div key={name} className=\"LoadMenuItem\">\n                    <div\n                      className=\"LoadMenuName\"\n                      onClick={() => this.loadBlueprint_(name)}\n                    >\n                      {name}\n                    </div>\n                    <button\n                      className=\"LoadMenuRemove\"\n                      onClick={() => this.deleteBlueprint_(name)}\n                    >\n                      x\n                    </button>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.copyBlueprintToClipboard_}\n          title=\"Copy Blueprint To Clipboard\"\n        >\n          📋\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.togglePasteMenu_}\n          title=\"Paste Blueprint From Clipboard\"\n        >\n          ⬇\n        </button>\n        {this.state.pasteMenuVisible && (\n          <div className=\"PasteBlueprintPanel\">\n            <h1>Import From Clipboard</h1>\n            Paste it here:\n            <textarea ref={this.importRef_} />\n            <button title=\"Import\" onClick={this.importBlueprintFromClipboard_}>\n              Import\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  saveBlueprint_ = () => {\n    const name = prompt('Name it!');\n    if (name === null || name === '') {\n      return;\n    }\n\n    this.props.onSaveBlueprint(name);\n  };\n\n  loadBlueprint_ = (name: string) => {\n    this.props.onLoadBlueprint(name);\n    this.toggleLoadBlueprintPanel_();\n  };\n\n  copyBlueprintToClipboard_ = async () => {\n    const copy = deepCopy(this.props.blueprint);\n    for (const node of Object.values(copy.nodes)) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageData instanceof Blob) {\n        const bytes = new Uint8Array(await node.imageData.arrayBuffer());\n        node.imageDataSerialized = fromByteArray(bytes);\n        node.imageData = null;\n      }\n    }\n\n    navigator.clipboard.writeText(JSON.stringify(copy));\n  };\n\n  importBlueprintFromClipboard_ = () => {\n    this.togglePasteMenu_();\n\n    if (!this.importRef_.current) {\n      return;\n    }\n\n    const serializedBlueprint = this.importRef_.current.value;\n    const blueprint = JSON.parse(serializedBlueprint) as null | Blueprint;\n    if (!blueprint) {\n      return;\n    }\n\n    for (const node of Object.values(blueprint.nodes)) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageDataSerialized) {\n        const bytes = toByteArray(node.imageDataSerialized);\n        node.imageData = new Blob([bytes]);\n        node.imageDataSerialized = null;\n      }\n    }\n\n    this.props.onImportBlueprint(blueprint);\n  };\n\n  togglePasteMenu_ = () => {\n    this.setState((state, props) => ({\n      pasteMenuVisible: !state.pasteMenuVisible,\n    }));\n  };\n\n  deleteBlueprint_ = (name: string) => {\n    this.props.onDeleteBlueprint(name);\n  };\n\n  toggleLoadBlueprintPanel_ = () => {\n    this.setState((state, props) => ({\n      loadMenuVisible: !state.loadMenuVisible,\n    }));\n  };\n\n  toggleOptions_ = () => {\n    this.setState((state, props) => ({\n      optionsVisible: !state.optionsVisible,\n    }));\n  };\n\n  enterFullscreen_ = async () => {\n    document.querySelector('canvas')!.requestFullscreen();\n  };\n\n  setAspectRatio_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onDisplayConfigChange({ aspect: e.currentTarget.value });\n    this.toggleOptions_();\n  };\n\n  updateResolution_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const target = e.currentTarget!;\n    if (\n      target === this.pixelSizeToggleRef_.current ||\n      target.name === 'pixelSize'\n    ) {\n      const pixelSize = parseInt(this.pixelSizeRef_.current!.value);\n      if (!isNaN(pixelSize)) {\n        this.props.onDisplayConfigChange({\n          resolution: {\n            mode: 'pixel',\n            pixelSize,\n          },\n        });\n      }\n      return;\n    }\n\n    const framebufferSize = {\n      width: parseInt(this.framebufferWidthRef_.current!.value),\n      height: parseInt(this.framebufferHeightRef_.current!.value),\n    };\n    if (isNaN(framebufferSize.width) || isNaN(framebufferSize.height)) {\n      return;\n    }\n\n    this.props.onDisplayConfigChange({\n      resolution: {\n        mode: 'framebuffer',\n        framebufferSize,\n      },\n    });\n  };\n}\n","import './Display.css';\n\nimport React from 'react';\n\nexport interface DisplayConfig {\n  aspect: string;\n  resolution: {\n    mode: 'pixel' | 'framebuffer';\n    pixelSize?: number;\n    framebufferSize?: { width: number; height: number };\n  };\n}\n\ninterface Props {\n  render: (canvas: HTMLCanvasElement) => void;\n  config: DisplayConfig;\n}\n\nexport class Display extends React.Component<Props> {\n  private wrapperRef_: React.RefObject<HTMLDivElement>;\n  private canvasRef_: React.RefObject<HTMLCanvasElement>;\n  private pendingFrameRequest_: null | number;\n\n  constructor(props: Props) {\n    super(props);\n    this.wrapperRef_ = React.createRef();\n    this.canvasRef_ = React.createRef();\n    this.pendingFrameRequest_ = null;\n  }\n\n  componentDidMount() {\n    const renderNextFrame = () => {\n      const wrapper = this.wrapperRef_.current!;\n      const canvas = this.canvasRef_.current!;\n      const width = wrapper.clientWidth;\n      const height = wrapper.clientHeight;\n      if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n      }\n      this.props.render(canvas);\n      this.pendingFrameRequest_ = requestAnimationFrame(renderNextFrame);\n    };\n\n    renderNextFrame();\n  }\n\n  componentWillUnmount() {\n    if (this.pendingFrameRequest_ !== null) {\n      cancelAnimationFrame(this.pendingFrameRequest_);\n      this.pendingFrameRequest_ = null;\n    }\n  }\n\n  render() {\n    const config = this.props.config;\n    const [aspectX, aspectY] = config.aspect.split(':').map(s => parseInt(s));\n    const stretch = isNaN(aspectX) || isNaN(aspectY);\n    const computedWrapperStyle: React.CSSProperties = {\n      height: stretch ? '100%' : 'auto',\n      aspectRatio: stretch ? 'auto' : `${aspectX}/${aspectY}`,\n    };\n    return (\n      <div className=\"Display\">\n        <div\n          ref={this.wrapperRef_}\n          className=\"CanvasWrapper\"\n          style={computedWrapperStyle}\n        >\n          <canvas ref={this.canvasRef_} />\n        </div>\n      </div>\n    );\n  }\n}\n","import './EditableLabel.css';\n\nimport React from 'react';\n\ninterface Props {\n  value: string;\n  enabled?: boolean;\n  emptyText?: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n  isEditing: boolean;\n}\n\nexport class EditableLabel extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value ?? '',\n      isEditing: false,\n    };\n  }\n\n  render() {\n    const isEmpty = this.state.value === '';\n    const isEditing = this.state.isEditing;\n    const editingClass = isEditing ? 'Editing' : 'NotEditing';\n    const emptyClass = isEmpty ? 'Empty' : 'NotEmpty';\n    const defaultValue = !isEmpty\n      ? this.state.value\n      : this.props.emptyText ?? '';\n    return (\n      <input\n        className={`EditableLabel ${editingClass} ${emptyClass}`}\n        type=\"text\"\n        onKeyDown={this.onKeyDown_}\n        onBlur={this.onFocusOut_}\n        defaultValue={defaultValue}\n        readOnly={!isEditing}\n        onClick={this.onClick_}\n        autoFocus\n      />\n    );\n  }\n\n  onClick_ = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.enabled === false) {\n      return;\n    }\n    this.setState({ isEditing: true });\n  };\n\n  commit_ = (untrimmedValue: string) => {\n    const value = untrimmedValue.trim();\n    if (value === '') {\n      this.setState({ isEditing: false });\n      return;\n    }\n    this.setState({ value, isEditing: false });\n    this.props.onChange(value);\n  };\n\n  onKeyDown_ = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      this.commit_(e.currentTarget.value);\n    } else if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  };\n\n  onFocusOut_ = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.commit_(e.currentTarget.value);\n  };\n}\n","import './Node.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { Blueprint, NodeDescriptorBase } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\n\ntype UpdateFn<DescriptorType extends NodeDescriptorBase> = (\n  update: Partial<DescriptorType>\n) => void;\n\ninterface NodeData<DescriptorType extends NodeDescriptorBase> {\n  blueprint: Blueprint;\n  node: DescriptorType;\n  onChange: UpdateFn<DescriptorType>;\n  destroy: () => void;\n}\n\nexport interface NodeProps<DescriptorType extends NodeDescriptorBase> {\n  data: NodeData<DescriptorType>;\n}\n\ninterface Props {\n  title?: string;\n  className?: string;\n  node: NodeDescriptorBase;\n  onRename?: (name: string) => void;\n  destroy: () => void;\n  children?: ReactNode;\n}\n\nexport const Node = (props: Props) => {\n  return (\n    <div className={`Node Node-${props.node.type} ${props.className}`}>\n      <button className=\"RemoveButton\" onClick={props.destroy}></button>\n      <div className=\"Title\">{props.title}</div>\n      <div className=\"Content\">\n        {props.onRename ? (\n          <LabeledField label=\"Name\">\n            <EditableLabel value={props.node.name} onChange={props.onRename} />\n          </LabeledField>\n        ) : (\n          <div />\n        )}\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","import { Connection } from 'react-flow-renderer';\n\nimport { Blueprint, NodeDescriptor } from '../../gpu/Blueprint';\n\ninterface ConnectionData {\n  source: NodeDescriptor;\n  target: NodeDescriptor;\n  sourceName: string;\n  targetName: string;\n  targetHandle: string;\n}\n\nfunction resolveConnection(\n  c: Connection,\n  blueprint: Blueprint\n): null | ConnectionData {\n  if (!c.source || !c.target) {\n    return null;\n  }\n\n  const source = blueprint.nodes[c.source];\n  const target = blueprint.nodes[c.target];\n  if (!source || !target || !c.targetHandle) {\n    return null;\n  }\n\n  return {\n    source,\n    target,\n    sourceName: c.source,\n    targetName: c.target,\n    targetHandle: c.targetHandle,\n  };\n}\n\nexport function isValidBindingConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (\n    data.source.type !== 'buffer' &&\n    data.source.type !== 'texture' &&\n    data.source.type !== 'sampler'\n  ) {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  if (data.targetHandle !== 'bindings') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: NodeDescriptor) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'binding' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n\nexport function isValidQueueConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (data.source.type !== 'render' && data.source.type !== 'compute') {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: NodeDescriptor) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'queue' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { BufferInitializer, BufferNodeDescriptor } from '../../gpu/Blueprint';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const BufferNode = (props: NodeProps<BufferNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Buffer\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Size\">\n          <input\n            type=\"number\"\n            value={node.size}\n            style={{ width: '5em', textAlign: 'right' }}\n            onChange={e =>\n              data.onChange({ size: e.currentTarget.valueAsNumber })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Init\">\n          <select\n            value={node.init}\n            style={{ width: '9em' }}\n            onChange={e =>\n              data.onChange({\n                init: e.currentTarget.value as BufferInitializer,\n              })\n            }\n          >\n            <option value=\"zero\">Zero</option>\n            <option value=\"random-floats\">Random Floats</option>\n            <option value=\"random-uints\">Random Uints</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","type Closure = () => void;\n\nexport class Debouncer {\n  private minDelayMs_: number;\n  private lastInvocationMs_: null | number;\n  private pendingInvocation_: null | ReturnType<typeof setTimeout>;\n\n  constructor(minDelayMs: number) {\n    this.minDelayMs_ = minDelayMs;\n    this.lastInvocationMs_ = null;\n    this.pendingInvocation_ = null;\n  }\n\n  invoke(f: Closure) {\n    if (this.onCooldown()) {\n      this.scheduleSuppressed(f);\n      return;\n    }\n\n    this.invokeInternal(f);\n  }\n\n  private clearPendingInvocation() {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    this.pendingInvocation_ = null;\n  }\n\n  private invokeInternal(f: Closure) {\n    this.clearPendingInvocation();\n    this.lastInvocationMs_ = Date.now();\n    f();\n  }\n\n  private onCooldown(): boolean {\n    if (this.lastInvocationMs_ === null) {\n      return false;\n    }\n    return Date.now() - this.lastInvocationMs_ < this.minDelayMs_;\n  }\n\n  private scheduleSuppressed(f: Closure) {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    const delay = this.lastInvocationMs_! + this.minDelayMs_ - Date.now();\n    this.pendingInvocation_ = setTimeout(this.invoke.bind(this, f), delay);\n  }\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { Debouncer } from '../../base/Debouncer';\nimport { RenderNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nfunction colorValue(c: GPUColorDict): string {\n  const p = (x: number) => `${x < 16 ? '0' : ''}${x.toString(16)}`;\n  const cp = [c.r, c.g, c.b].map(c => p(c * 255));\n  return `#${cp.join('')}`;\n}\n\nfunction parseColor(value: string): GPUColorDict {\n  const parseComponent = (index: number) =>\n    parseInt(value.slice(index, index + 2), 16) / 255;\n  return {\n    r: parseComponent(1),\n    g: parseComponent(3),\n    b: parseComponent(5),\n    a: 1,\n  };\n}\n\nexport const RenderNode = (props: NodeProps<RenderNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const debouncer = new Debouncer(30);\n  return (\n    <Node\n      title=\"Render Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n\n        <LabeledField label=\"Vertex Shader\">\n          <select\n            value={node.vertexShader}\n            onChange={e =>\n              data.onChange({ vertexShader: e.currentTarget.value })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Vertex Entry Point\">\n          <EditableLabel\n            value={node.vertexEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ vertexEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Fragment Shader\">\n          <select\n            value={node.fragmentShader}\n            onChange={e =>\n              data.onChange({\n                fragmentShader: e.currentTarget.value,\n              })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Fragment Entry Point\">\n          <EditableLabel\n            value={node.fragmentEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ fragmentEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Topology\">\n          <select\n            value={node.topology ?? 'triangle-list'}\n            onChange={e =>\n              data.onChange({\n                topology: e.currentTarget.value as GPUPrimitiveTopology,\n              })\n            }\n          >\n            <option value=\"point-list\">Point List</option>\n            <option value=\"line-list\">Line List</option>\n            <option value=\"line-strip\">Line Strip</option>\n            <option value=\"triangle-list\">Triangle List</option>\n            <option value=\"triangle-strip\">Triangle Strip</option>\n          </select>\n        </LabeledField>\n        <LabeledField label=\"# Vertices\">\n          <input\n            type=\"number\"\n            value={node.numVertices}\n            onChange={e =>\n              data.onChange({\n                numVertices: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"# Instances\">\n          <input\n            type=\"number\"\n            value={node.numInstances}\n            onChange={e =>\n              data.onChange({\n                numInstances: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear\">\n          <input\n            type=\"checkbox\"\n            checked={node.clear ?? false}\n            onChange={e => data.onChange({ clear: !node.clear })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear Color\">\n          <input\n            type=\"color\"\n            value={colorValue(node.clearColor ?? { r: 0, g: 0, b: 0, a: 1 })}\n            onChange={e =>\n              debouncer.invoke(() =>\n                data.onChange({ clearColor: parseColor(e.currentTarget.value) })\n              )\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Depth Test\">\n          <select\n            value={node.depthTest ?? 'always'}\n            onChange={e =>\n              data.onChange({\n                depthTest: e.currentTarget.value as GPUCompareFunction,\n              })\n            }\n          >\n            <option value=\"never\">Never Pass</option>\n            <option value=\"less\">&lt;</option>\n            <option value=\"less-equal\">&lt;=</option>\n            <option value=\"equal\">=</option>\n            <option value=\"greater-equal\">&gt;=</option>\n            <option value=\"greater\">&gt;</option>\n            <option value=\"not-equal\">≠</option>\n            <option value=\"always\">Always Pass</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nfunction getSelectedFile(input: HTMLInputElement): null | File {\n  if (!input.files || input.files.length === 0) {\n    return null;\n  }\n\n  return input.files[0];\n}\n\nasync function updateCanvasImage(\n  canvas: null | HTMLCanvasElement,\n  data: null | Blob\n) {\n  if (!canvas || !data) {\n    return;\n  }\n\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n\n  const image = await createImageBitmap(data);\n  if (!image) {\n    return;\n  }\n\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, 128, 128);\n}\n\ntype CanvasRef = React.RefObject<HTMLCanvasElement>;\n\nexport const TextureNode = (props: NodeProps<TextureNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const ref = canvasRef as CanvasRef;\n    if (ref.current && node.imageData instanceof Blob) {\n      updateCanvasImage(ref.current, node.imageData);\n    }\n  });\n\n  return (\n    <Node\n      title=\"Texture\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"TextureDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={e => {\n            const file = getSelectedFile(e.currentTarget);\n            if (file) {\n              data.onChange({ imageData: file });\n            }\n          }}\n        />\n        <canvas\n          id={node.name}\n          ref={canvasRef as CanvasRef}\n          className=\"Preview\"\n          width={128}\n          height={128}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './BlueprintEditor.css';\n\nimport React from 'react';\nimport ReactFlow, {\n  ArrowHeadType,\n  Connection,\n  Edge,\n  FlowElement,\n  Node,\n  OnLoadParams,\n  XYPosition,\n} from 'react-flow-renderer';\n\nimport {\n  Blueprint,\n  ConnectionNodeDescriptor,\n  ConnectionType,\n  NodeDescriptor,\n} from '../gpu/Blueprint';\nimport { BufferBindingNode } from './nodes/BufferBindingNode';\nimport { CustomEdge } from './nodes/CustomEdge';\nimport { BufferNode } from './nodes/BufferNode';\nimport { ComputeNode } from './nodes/ComputeNode';\nimport { RenderNode } from './nodes/RenderNode';\nimport { SamplerBindingNode } from './nodes/SamplerBindingNode';\nimport { SamplerNode } from './nodes/SamplerNode';\nimport { TextureBindingNode } from './nodes/TextureBindingNode';\nimport { TextureNode } from './nodes/TextureNode';\n\nconst NODE_TYPES = {\n  buffer: BufferNode,\n  texture: TextureNode,\n  compute: ComputeNode,\n  render: RenderNode,\n  sampler: SamplerNode,\n  'buffer-binding': BufferBindingNode,\n  'sampler-binding': SamplerBindingNode,\n  'texture-binding': TextureBindingNode,\n};\n\nconst EDGE_TYPES = {\n  'custom-edge': CustomEdge,\n};\n\ninterface Props {\n  blueprint: Blueprint;\n  onChange: () => void;\n}\n\nfunction getUnusedKey<T extends Record<string, any>>(\n  dict: T,\n  base: string\n): string {\n  for (let i = 1; ; ++i) {\n    const id = `${base}${i}`;\n    if (!dict.hasOwnProperty(id)) {\n      return id;\n    }\n  }\n}\n\nclass FlowErrorBounary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.log(error);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst isPassNode = (node: NodeDescriptor) =>\n  node.type === 'render' || node.type === 'compute';\n\nexport class BlueprintEditor extends React.Component<Props> {\n  private isMounted_: boolean;\n  private instance_: null | OnLoadParams;\n  private flowRef_: React.RefObject<HTMLDivElement>;\n  private lastConnectStart_: null | XYPosition;\n  private lastConnectEnd_: null | XYPosition;\n\n  constructor(props: Props) {\n    super(props);\n    this.isMounted_ = false;\n    this.instance_ = null;\n    this.flowRef_ = React.createRef();\n    this.lastConnectStart_ = null;\n    this.lastConnectEnd_ = null;\n  }\n\n  componentDidMount() {\n    this.isMounted_ = true;\n  }\n\n  componentWillUnmount() {\n    this.isMounted_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"BlueprintEditor\">\n        <FlowErrorBounary>\n          <ReactFlow\n            ref={this.flowRef_}\n            nodeTypes={NODE_TYPES}\n            edgeTypes={EDGE_TYPES}\n            elements={buildGraphFromBlueprint(\n              this.props.blueprint,\n              this.update_\n            )}\n            elementsSelectable={false}\n            nodesConnectable={true}\n            nodesDraggable={true}\n            onLoad={this.onLoad_}\n            onConnectStart={this.onConnectStart_}\n            onConnectStop={this.onConnectStop_}\n            onConnect={this.onConnect_}\n            onElementClick={this.onElementClick_}\n            onNodeDragStop={this.onMoveNode_}\n          >\n            <div className=\"Toolbar\">\n              <button onClick={this.addShader_}>+Shader</button>\n              <button onClick={this.addBuffer_}>+Buffer</button>\n              <button onClick={this.addTexture_}>+Texture</button>\n              <button onClick={this.addSampler_}>+Sampler</button>\n              <button onClick={this.addRenderPass_}>+Render Pass</button>\n              <button onClick={this.addComputePass_}>+Compute Pass</button>\n            </div>\n          </ReactFlow>\n        </FlowErrorBounary>\n      </div>\n    );\n  }\n\n  update_ = () => {\n    if (!this.isMounted_) {\n      return;\n    }\n\n    this.setState({\n      elements: buildGraphFromBlueprint(this.props.blueprint, this.update_),\n    });\n    this.props.onChange();\n  };\n\n  onLoad_ = (instance: OnLoadParams) => {\n    this.instance_ = instance;\n  };\n\n  onConnectStart_ = (e: React.MouseEvent) => {\n    this.lastConnectStart_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnectStop_ = (e: any) => {\n    this.lastConnectEnd_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnect_ = (edge: Edge<any> | Connection) => {\n    const source = this.props.blueprint.nodes[edge.source!];\n    const target = this.props.blueprint.nodes[edge.target!];\n    if (!source || !target) {\n      return;\n    }\n\n    let position = { x: 100, y: 100 };\n    if (\n      this.instance_ &&\n      this.lastConnectStart_ !== null &&\n      this.lastConnectEnd_ !== null &&\n      this.flowRef_.current\n    ) {\n      const view = this.flowRef_.current.getBoundingClientRect();\n      const midpoint = {\n        x:\n          (this.lastConnectStart_.x + this.lastConnectEnd_.x) / 2 - view.x - 60,\n        y:\n          (this.lastConnectStart_.y + this.lastConnectEnd_.y) / 2 - view.y - 40,\n      };\n      position = this.instance_.project(midpoint);\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'buffer' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addBufferBinding_(edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'texture' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTextureBinding_(edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'sampler' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addSamplerBinding_(edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      isPassNode(source) &&\n      edge.targetHandle === 'queueIn'\n    ) {\n      this.addQueueDependency_(edge.source!, edge.target!);\n      this.props.onChange();\n      return;\n    }\n  };\n\n  onElementClick_ = (\n    event: React.MouseEvent<Element, MouseEvent>,\n    element: Node<any> | Edge<any>\n  ) => {};\n\n  onMoveNode_ = (event: React.MouseEvent, node: Node) => {\n    node.data.node.position = { ...node.position };\n    this.update_();\n  };\n\n  addShader_ = () => {\n    const shaders = this.props.blueprint.shaders;\n    const id = getUnusedKey(shaders, 'shader');\n    shaders[id] = { name: id, code: '' };\n    this.update_();\n  };\n\n  addNode_ = (type: string, node: Partial<NodeDescriptor>) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, type);\n    nodes[id] = {\n      name: id,\n      type,\n      position: { x: 100, y: 100 },\n      ...node,\n    } as NodeDescriptor;\n    this.update_();\n  };\n\n  addEdge_ = (\n    type: ConnectionType,\n    connection: Partial<ConnectionNodeDescriptor>\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, type);\n    nodes[id] = {\n      position: { x: 100, y: 100 },\n\n      ...connection,\n      type: 'connection',\n\n      // @ts-ignore: bug?\n      connectionType: type,\n    };\n    this.update_();\n  };\n\n  addBuffer_ = () => {\n    this.addNode_('buffer', {\n      size: 16384,\n      position: { x: 100, y: 100 },\n      init: 'zero',\n    });\n  };\n\n  addTexture_ = () => {\n    this.addNode_('texture', {\n      position: { x: 100, y: 100 },\n      size: { width: 1024, height: 1024 },\n      format: 'rgba8unorm',\n      mipLevelCount: 1,\n      sampleCount: 1,\n    });\n  };\n\n  addSampler_ = () => {\n    this.addNode_('sampler', {\n      position: { x: 100, y: 100 },\n    });\n  };\n\n  addBufferBinding_ = (\n    bufferId: string,\n    passId: string,\n    position: XYPosition\n  ) => {\n    this.addEdge_('binding', {\n      position,\n      // @ts-ignore\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: bufferId,\n      target: passId,\n    });\n  };\n\n  addTextureBinding_ = (\n    textureId: string,\n    passId: string,\n    position: XYPosition\n  ) => {\n    this.addEdge_('binding', {\n      position,\n      // @ts-ignore\n      bindingType: 'texture',\n      group: 0,\n      binding: 1,\n      source: textureId,\n      target: passId,\n    });\n  };\n\n  addSamplerBinding_ = (\n    textureId: string,\n    passId: string,\n    position: XYPosition\n  ) => {\n    this.addEdge_('binding', {\n      position,\n      // @ts-ignore\n      bindingType: 'sampler',\n      group: 0,\n      binding: 1,\n      source: textureId,\n      target: passId,\n    });\n  };\n\n  addQueueDependency_ = (source: string, target: string) => {\n    this.addEdge_('queue', { source: source, target: target });\n  };\n\n  addRenderPass_ = () => {\n    this.addNode_('render', {\n      vertexShader: '',\n      vertexEntryPoint: '',\n      fragmentShader: '',\n      fragmentEntryPoint: '',\n      topology: 'triangle-list',\n      numVertices: 4,\n      numInstances: 1,\n      indexed: false,\n      clear: true,\n      clearColor: { r: 0, g: 0, b: 0, a: 1 },\n    });\n  };\n\n  addComputePass_ = () => {\n    this.addNode_('compute', {\n      shader: '',\n      entryPoint: '',\n      dispatchSize: { x: 1, y: 1, z: 1 },\n    });\n  };\n}\n\nfunction buildGraphFromBlueprint(\n  blueprint: Blueprint,\n  onChange: () => void\n): FlowElement[] {\n  const elements: FlowElement[] = [];\n  Object.entries(blueprint.nodes).forEach(([id, node]) => {\n    if (node.type !== 'connection') {\n      elements.push({\n        id,\n        type: node.type,\n        data: {\n          blueprint,\n          node,\n          onChange: (update: any) => {\n            Object.assign(blueprint.nodes[id], update);\n            onChange();\n          },\n          destroy: () => {\n            delete blueprint.nodes[id];\n            for (const [otherId, otherNode] of Object.entries(\n              blueprint.nodes\n            )) {\n              if (\n                otherNode.type === 'connection' &&\n                (otherNode.source === id || otherNode.target === id)\n              ) {\n                delete blueprint.nodes[otherId];\n              }\n            }\n            onChange();\n          },\n        },\n        position: node.position,\n      });\n    } else if (node.connectionType === 'binding') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id: `${id}-node`,\n        type: `${node.bindingType}-binding`,\n        data,\n        position: node.position,\n      });\n      elements.push({\n        id: `${id}-source-edge`,\n        source: node.source,\n        target: `${id}-node`,\n      });\n      elements.push({\n        id: `${id}-target-edge`,\n        source: `${id}-node`,\n        target: node.target,\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n      });\n    } else if (node.connectionType === 'queue') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id,\n        source: node.source,\n        target: node.target,\n        targetHandle: 'queueIn',\n        type: 'custom-edge',\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n        data,\n      });\n    }\n  });\n\n  return elements;\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { ComputeNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nexport const ComputeNode = (props: NodeProps<ComputeNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Compute Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Shader\">\n          <select\n            value={node.shader}\n            onChange={e => data.onChange({ shader: e.currentTarget.value })}\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Entry Point\">\n          <EditableLabel\n            emptyText=\"None\"\n            value={node.entryPoint}\n            onChange={value => data.onChange({ entryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Dispatch Size\">\n          <div className=\"DispatchSize\">\n            <div className=\"DispatchSizeElement\">\n              X{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.x}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: e.currentTarget.valueAsNumber,\n                      y: node.dispatchSize.y,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Y{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.y}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: e.currentTarget.valueAsNumber,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Z{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.z}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: node.dispatchSize.y,\n                      z: e.currentTarget.valueAsNumber,\n                    },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const SamplerNode = (props: NodeProps<SamplerNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Sampler\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"SamplerDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport {\n  BufferBindingNodeDescriptor,\n  BufferBindingStorageType,\n} from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const BufferBindingNode = (\n  props: NodeProps<BufferBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node className=\"BufferBinding\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <select\n        value={node.storageType}\n        onChange={e =>\n          data.onChange({\n            storageType: e.currentTarget.value as BufferBindingStorageType,\n          })\n        }\n      >\n        <option value=\"storage-read\">Storage (r/o)</option>\n        <option value=\"storage\">Storage (r/w)</option>\n        <option value=\"uniform\">Uniform</option>\n        <option value=\"sampler\">Sampler</option>\n        <option value=\"texture\">Texture</option>\n      </select>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerBindingNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const SamplerBindingNode = (\n  props: NodeProps<SamplerBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureBindingNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const TextureBindingNode = (\n  props: NodeProps<TextureBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport {\n  getBezierPath,\n  getEdgeCenter,\n  getMarkerEnd,\n  EdgeProps,\n} from 'react-flow-renderer';\n\ninterface Data {\n  destroy?: () => void;\n}\n\nexport const CustomEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data: anyData,\n  arrowHeadType,\n  markerEndId,\n}: EdgeProps) => {\n  const path = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n  const end = getMarkerEnd(arrowHeadType, markerEndId);\n  const [centerX, centerY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n  const data = anyData as Data;\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={path}\n        markerEnd={end}\n      />\n      {data.destroy && (\n        <foreignObject width={16} height={16} x={centerX - 8} y={centerY - 8}>\n          <div className=\"Edge\">\n            <button className=\"RemoveButton\" onClick={data.destroy} />\n          </div>\n        </foreignObject>\n      )}\n    </>\n  );\n};\n","import './CodeEditor.css';\n\nimport 'codemirror/keymap/sublime';\n\nimport CodeMirror from '@uiw/react-codemirror';\nimport React from 'react';\n\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationInfo } from '../gpu/Executable';\n\nconst BUILTIN_WGSL_NUM_LINES = BUILTIN_UNIFORMS_WGSL.split(/\\r\\n|\\r|\\n/).length;\n\ninterface Props {\n  compilationInfo?: ShaderCompilationInfo;\n  contents: string;\n  mutable: boolean;\n  onChange: (contents: string) => void;\n  theme: string;\n}\n\nexport class CodeEditor extends React.Component<Props> {\n  private isDecorating_: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.isDecorating_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"CodeEditor\">\n        <CodeMirror\n          value={this.props.contents}\n          onChange={this.onChange_}\n          onUpdate={this.onUpdate_}\n          options={{\n            theme: this.props.theme,\n            keyMap: 'sublime',\n            mode: 'rust',\n            gutters: ['GutterMessages'],\n            readOnly: !this.props.mutable,\n          }}\n        />\n      </div>\n    );\n  }\n\n  onChange_ = (e: CodeMirror.Editor, change: CodeMirror.EditorChange) => {\n    this.props.onChange(e.getValue());\n  };\n\n  onUpdate_ = (e: CodeMirror.Editor) => {\n    if (this.isDecorating_) {\n      return;\n    }\n\n    this.isDecorating_ = true;\n    e.getAllMarks().forEach(m => m.clear());\n    e.clearGutter('GutterMessages');\n    for (const m of this.props.compilationInfo?.messages ?? []) {\n      const className = `MarkedText-${m.type}`;\n      const line = m.lineNum - BUILTIN_WGSL_NUM_LINES;\n      e.markText(\n        { line, ch: m.linePos - 1 },\n        { line, ch: m.linePos + m.length - 1 },\n        { className }\n      );\n      const marker = document.createElement('div');\n      marker.classList.add('Marker', `Marker-${m.type}`);\n      e.setGutterMarker(line, 'GutterMessages', marker);\n    }\n    this.isDecorating_ = false;\n  };\n}\n","import './TabContainer.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { EditableLabel } from './EditableLabel';\n\ninterface TabDescriptor {\n  key: string;\n  title: string;\n  mutable: boolean;\n  onClose?: () => void;\n  onRename?: (newName: string) => void;\n}\n\ninterface Props {\n  tabs: TabDescriptor[];\n  children: ReactNode;\n}\n\ninterface State {\n  activeTab: number;\n}\n\nexport class TabContainer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeTab: 0,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"TabContainer\">\n        {this.renderTabs_()}\n        <div className=\"ContentArea\">{this.renderActiveTabContent_()}</div>\n      </div>\n    );\n  }\n\n  renderTabs_() {\n    const children = React.Children.toArray(this.props.children);\n    return (\n      <div className=\"TabStrip\">\n        {this.props.tabs.map((tab, i) => {\n          const active = this.state.activeTab === i;\n          const z = this.props.tabs.length - i;\n          return (\n            <div\n              key={tab.key + tab.title}\n              style={{ zIndex: active ? children.length : z }}\n              className={`${active ? 'Tab Active' : 'Tab Inactive'}\n                          ${tab.mutable ? 'Removable' : 'Permanent'}`}\n              onClick={_ => this.setActiveTab_(i)}\n            >\n              <EditableLabel\n                enabled={tab.mutable && active}\n                value={tab.title}\n                onChange={tab.onRename ?? (() => ({}))}\n              />\n              {tab.mutable && (\n                <button\n                  className=\"RemoveButton\"\n                  onClick={e => {\n                    if (tab.onClose) {\n                      tab.onClose();\n                    }\n                    e.stopPropagation();\n                  }}\n                >\n                  x\n                </button>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  setActiveTab_(tab: number) {\n    this.setState({ activeTab: tab });\n  }\n\n  renderActiveTabContent_() {\n    const children = React.Children.toArray(this.props.children);\n    if (children.length === 0) {\n      return;\n    }\n\n    let tab = this.state.activeTab;\n    if (tab >= children.length) {\n      this.setActiveTab_(0);\n      return children[0];\n    }\n\n    return children[tab];\n  }\n}\n","import './Editor.css';\n\nimport React from 'react';\n\nimport { Blueprint } from '../gpu/Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationInfo } from '../gpu/Executable';\nimport { BlueprintEditor } from './BlueprintEditor';\nimport { CodeEditor } from './CodeEditor';\nimport { TabContainer } from './TabContainer';\n\ninterface Props {\n  blueprint: Blueprint;\n  onBlueprintChange: () => void;\n\n  compilationInfo: Record<string, ShaderCompilationInfo>;\n\n  codeMirrorTheme: string;\n}\n\nexport class Editor extends React.Component<Props> {\n  render() {\n    const shaders = Object.entries(this.props.blueprint.shaders);\n    return (\n      <div className=\"Editor\">\n        <TabContainer\n          tabs={[\n            { key: 'Blueprint', title: 'Blueprint', mutable: false },\n            { key: 'Uniforms', title: 'Uniforms', mutable: false },\n            ...shaders.map(([id, shader]) => ({\n              key: id,\n              title: shader.name,\n              mutable: true,\n              onClose: () => this.removeShader_(id),\n              onRename: (newName: string) => this.renameShader_(id, newName),\n            })),\n          ]}\n        >\n          <BlueprintEditor\n            blueprint={this.props.blueprint}\n            onChange={this.props.onBlueprintChange}\n          />\n          <CodeEditor\n            key=\"Uniforms\"\n            contents={BUILTIN_UNIFORMS_WGSL}\n            mutable={false}\n            onChange={() => ({})}\n            theme={this.props.codeMirrorTheme}\n          />\n          {shaders.map(([id, shader]) => (\n            <CodeEditor\n              key={id}\n              compilationInfo={this.props.compilationInfo[id]}\n              contents={shader.code}\n              mutable={true}\n              onChange={code => {\n                shader.code = code;\n                this.props.onBlueprintChange();\n              }}\n              theme={this.props.codeMirrorTheme}\n            />\n          ))}\n        </TabContainer>\n      </div>\n    );\n  }\n\n  removeShader_ = (id: string) => {\n    delete this.props.blueprint.shaders[id];\n    this.props.onBlueprintChange();\n  };\n\n  renameShader_ = (id: string, newName: string) => {\n    this.props.blueprint.shaders[id].name = newName;\n    this.props.onBlueprintChange();\n  };\n}\n","import './App.css';\n\nimport React from 'react';\n\nimport { LocalPersistent } from './base/LocalPersistent';\nimport { deepCopy } from './base/Util';\nimport { Blueprint, canonicalize } from './gpu/Blueprint';\nimport { ShaderCompilationInfo } from './gpu/Executable';\nimport { FrameProducer } from './gpu/FrameProducer';\nimport { ControlPanel } from './ui/ControlPanel';\nimport { Display, DisplayConfig } from './ui/Display';\nimport { Editor } from './ui/Editor';\nimport { AppState } from './AppState';\n\ninterface Props {\n  appState: LocalPersistent<AppState>;\n}\n\ninterface State extends AppState {\n  compilationInfo: Record<string, ShaderCompilationInfo>;\n}\n\nclass App extends React.Component<Props, State> {\n  private frameProducer_: FrameProducer;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      ...this.props.appState.value,\n      compilationInfo: {},\n    };\n\n    canonicalize(this.state.blueprint);\n\n    this.frameProducer_ = new FrameProducer();\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  }\n\n  componentDidMount() {\n    this.frameProducer_.onShadersCompiled = this.onShadersCompiled_;\n  }\n\n  componentDidUpdate() {\n    this.props.appState.value = this.state;\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  }\n\n  componentWillUnmount() {\n    this.frameProducer_.stop();\n  }\n\n  onDisplayConfigChange = (change: Partial<DisplayConfig>) => {\n    this.setState((state, props) => {\n      return {\n        displayConfig: Object.assign({ ...state.displayConfig }, change),\n      };\n    });\n  };\n\n  onFullscreenChange_ = () => {\n    this.frameProducer_.reconfigure();\n  };\n\n  onBlueprintChange_ = () => {\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  };\n\n  onShadersCompiled_ = (\n    compilationInfo: Record<string, ShaderCompilationInfo>\n  ) => {\n    this.setState({ compilationInfo });\n  };\n\n  onSaveBlueprint_ = (name: string) => {\n    this.setState((state, props) => ({\n      savedBlueprints: {\n        ...state.savedBlueprints,\n        [name]: deepCopy(state.blueprint),\n      },\n    }));\n  };\n\n  onLoadBlueprint_ = (name: string) => {\n    const blueprint = deepCopy(this.state.savedBlueprints[name]);\n    if (!blueprint) {\n      return;\n    }\n\n    canonicalize(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onImportBlueprint_ = (blueprint: Blueprint) => {\n    canonicalize(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onDeleteBlueprint_ = (name: string) => {\n    this.setState((state, props) => {\n      delete state.savedBlueprints[name];\n      return { savedBlueprints: state.savedBlueprints };\n    });\n  };\n\n  onCodeMirrorThemeChange_ = (name: string) => {\n    this.setState({ codeMirrorTheme: name });\n  };\n\n  render() {\n    const renderDisplay = (canvas: HTMLCanvasElement) => {\n      let resolution: { width: number; height: number };\n      const config = this.state.displayConfig;\n      if (config.resolution.mode === 'pixel') {\n        const pixelSize =\n          config.resolution.pixelSize! >= 1 ? config.resolution.pixelSize! : 1;\n        resolution = {\n          width: canvas.clientWidth / pixelSize,\n          height: canvas.clientHeight / pixelSize,\n        };\n      } else {\n        resolution = { ...config.resolution.framebufferSize! };\n      }\n\n      this.frameProducer_.render(canvas, resolution);\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-title\">WebGPU Playground</div>\n        </div>\n        <div className=\"App-top\">\n          <div className=\"App-canvas\">\n            <Display render={renderDisplay} config={this.state.displayConfig} />\n          </div>\n          <div className=\"App-editor\">\n            <Editor\n              compilationInfo={this.state.compilationInfo}\n              blueprint={this.state.blueprint}\n              onBlueprintChange={this.onBlueprintChange_}\n              codeMirrorTheme={this.state.codeMirrorTheme}\n            />\n          </div>\n        </div>\n        <div className=\"App-bottom\">\n          <ControlPanel\n            blueprint={this.state.blueprint}\n            displayConfig={this.state.displayConfig}\n            onDisplayConfigChange={this.onDisplayConfigChange}\n            savedBlueprints={this.state.savedBlueprints}\n            onSaveBlueprint={this.onSaveBlueprint_}\n            onLoadBlueprint={this.onLoadBlueprint_}\n            onImportBlueprint={this.onImportBlueprint_}\n            onDeleteBlueprint={this.onDeleteBlueprint_}\n            codeMirrorTheme={this.state.codeMirrorTheme}\n            onCodeMirrorThemeChange={this.onCodeMirrorThemeChange_}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { Blueprint } from './gpu/Blueprint';\nimport { BASIC } from './presets/Basic';\nimport { BOIDS } from './presets/Boids';\nimport { INSTANCES } from './presets/Instances';\nimport { DisplayConfig } from './ui/Display';\n\nexport interface AppState {\n  blueprint: Blueprint;\n  savedBlueprints: Record<string, Blueprint>;\n  displayConfig: DisplayConfig;\n  codeMirrorTheme: string;\n}\n\nexport const DEFAULT_APP_STATE: AppState = {\n  blueprint: {\n    nodes: {},\n    shaders: {},\n  },\n  savedBlueprints: {\n    Basic: BASIC,\n    Boids: BOIDS,\n    Instances: INSTANCES,\n  },\n  displayConfig: {\n    aspect: '1:1',\n    resolution: { mode: 'pixel', pixelSize: 1 },\n  },\n  codeMirrorTheme: 'monokai',\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u);\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u);\n  return vec4<f32>(x, y, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx +\n                            vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const BASIC: Blueprint = {\n  nodes: {\n    render1: {\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 1,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  },\n  shaders: {\n    vertex1: {\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  },\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nexport const BOIDS: Blueprint = {\n  nodes: {\n    compute1: {\n      name: 'first update',\n      type: 'compute',\n      position: {\n        x: 223,\n        y: 438,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 2000,\n        y: 1,\n        z: 1,\n      },\n    },\n    buffer1: {\n      name: 'buffer1',\n      type: 'buffer',\n      position: {\n        x: -55,\n        y: -35,\n      },\n      size: 32000,\n      init: 'random-floats',\n    },\n    buffer2: {\n      name: 'buffer2',\n      type: 'buffer',\n      position: {\n        x: 610,\n        y: 19,\n      },\n      size: 32000,\n      init: 'zero',\n    },\n    render1: {\n      name: 'render boids',\n      position: {\n        x: -262,\n        y: 374,\n      },\n      type: 'render',\n      indexed: false,\n      numVertices: 3,\n      numInstances: 1000,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n    compute2: {\n      name: 'update B',\n      type: 'compute',\n      position: {\n        x: 658,\n        y: 442,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 1000,\n        y: 1,\n        z: 1,\n      },\n    },\n    binding1a: {\n      name: '',\n      position: {\n        x: 65,\n        y: 210,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'compute1',\n    },\n    binding1b: {\n      name: '',\n      position: {\n        x: -191,\n        y: 140,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'render1',\n    },\n    binding2: {\n      name: '',\n      position: {\n        x: 220,\n        y: 218,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer1',\n      target: 'compute2',\n    },\n    binding3: {\n      name: '',\n      position: {\n        x: 713,\n        y: 179,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer2',\n      target: 'compute2',\n    },\n    binding4: {\n      name: '',\n      position: {\n        x: 566,\n        y: 181,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer2',\n      target: 'compute1',\n    },\n    queue1: {\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'render1',\n      target: 'compute1',\n      type: 'connection',\n      // @ts-ignore\n      connectionType: 'queue',\n    },\n    queue2: {\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'compute1',\n      target: 'compute2',\n      type: 'connection',\n      // @ts-ignore\n      connectionType: 'queue',\n    },\n  },\n  shaders: {\n    compute1: {\n      name: 'compute',\n      code: 'let kRule1Distance = 0.1;\\nlet kRule2Distance = 0.025;\\nlet kRule3Distance = 0.025;\\nlet kRule1Scale = 0.02;\\nlet kRule2Scale = 0.05;\\nlet kRule3Scale = 0.005;\\nlet kNumParticles = 2000u;\\n\\nstruct Particle {\\n  pos: vec2<f32>;\\n  vel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particlesA: Particles;\\n[[group(0), binding(2)]] var<storage, read_write> particlesB: Particles;\\n\\n[[stage(compute), workgroup_size(1)]]\\nfn main([[builtin(global_invocation_id)]] id: vec3<u32>) {\\n  let index = id.x;\\n  if (index >= kNumParticles) {\\n    return;\\n  }\\n\\n  var vPos = particlesA.particles[index].pos;\\n  var vVel = particlesA.particles[index].vel;\\n  var cMass = vec2<f32>(0.0, 0.0);\\n  var cVel = vec2<f32>(0.0, 0.0);\\n  var colVel = vec2<f32>(0.0, 0.0);\\n  var cMassCount = 0u;\\n  var cVelCount = 0u;\\n  var pos: vec2<f32>;\\n  var vel: vec2<f32>;\\n\\n  for (var i = 0u; i < kNumParticles; i = i + 1u) {\\n    if (i == index) {\\n      continue;\\n    }\\n    pos = particlesA.particles[i].pos.xy;\\n    vel = particlesA.particles[i].vel.xy;\\n    if (distance(pos, vPos) < kRule1Distance) {\\n      cMass = cMass + pos;\\n      cMassCount = cMassCount + 1u;\\n    }\\n    if (distance(pos, vPos) < kRule2Distance) {\\n      colVel = colVel - (pos - vPos);\\n    }\\n    if (distance(pos, vPos) < kRule3Distance) {\\n      cVel = cVel + vel;\\n      cVelCount = cVelCount + 1u;\\n    }\\n  }\\n\\n  if (cMassCount > 0u) {\\n    cMass = (cMass / vec2<f32>(f32(cMassCount), f32(cMassCount))) - vPos;\\n  }\\n\\n  if (cVelCount > 0u) {\\n    cVel = cVel / vec2<f32>(f32(cVelCount), f32(cVelCount));\\n  }\\n\\n  vVel = vVel + (cMass * kRule1Scale) + (colVel * kRule2Scale) +\\n      (cVel * kRule3Scale);\\n\\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 1.0);\\n  vPos = vPos + (vVel * builtinUniforms.timeDelta * 0.25);\\n\\n  if (vPos.x < -1.0) {\\n    vPos.x = vPos.x + 2.0;\\n  }\\n  if (vPos.x > 1.0) {\\n    vPos.x = vPos.x - 2.0;\\n  }\\n  if (vPos.y < -1.0) {\\n    vPos.y = vPos.y + 2.0;\\n  }\\n  if (vPos.y > 1.0) {\\n    vPos.y = vPos.y - 2.0;\\n  }\\n\\n  particlesB.particles[index].pos = vPos;\\n  particlesB.particles[index].vel = vVel;\\n}\\n',\n    },\n    vertex1: {\n      name: 'vertex',\n      code: 'struct Particle {\\n  particlePos: vec2<f32>;\\n  particleVel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particles: Particles;\\n\\nfn getPos(vid: u32) -> vec2<f32> {\\n  return select(\\n      vec2<f32>(-0.01, -0.02),\\n      select(vec2<f32>(0.01, -0.02), vec2<f32>(0.00, 0.02), vid >= 2u),\\n      vid >= 1u);\\n}\\n\\n[[stage(vertex)]]\\nfn main([[builtin(vertex_index)]] vid: u32,\\n        [[builtin(instance_index)]] id: u32)\\n    -> [[builtin(position)]] vec4<f32> {\\n  let angle = -atan2(particles.particles[id].particleVel.x, particles.particles[id].particleVel.y);\\n  let ppos = getPos(vid);\\n  let pos = vec2<f32>(ppos.x * cos(angle) - ppos.y * sin(angle),\\n                      ppos.x * sin(angle) + ppos.y * cos(angle));\\n  return vec4<f32>(pos + particles.particles[id].particlePos, 0.0, 1.0);\\n}\\n',\n    },\n    fragment1: {\n      name: 'fragment',\n      code: '[[stage(fragment)]]\\nfn main() -> [[location(0)]] vec4<f32> {\\n  return vec4<f32>(0.0, 1.0, 0.0, 1.0);\\n}\\n',\n    },\n  },\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32,\n        [[builtin(instance_index)]] instance: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let t = builtinUniforms.time * 6.283 / 2.0;\n  let b = 1.0 + f32(instance / 10u) * 0.5;\n  let k = 0.5 + cos(t * 3.0) * 0.2;\n  let c = k * cos(t);\n  let s = k * sin(t);\n  let xo = cos(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let yo = sin(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u) * 0.3;\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u) * 0.3;\n  return vec4<f32>(x * c - y * s + xo, x * s + y * c + yo, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx + vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const INSTANCES: Blueprint = {\n  nodes: {\n    render1: {\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 30,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  },\n  shaders: {\n    vertex1: {\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  },\n};\n","import { Debouncer } from './Debouncer';\n\nimport localForage from 'localforage';\n\nconst DEFAULT_DEBOUNCE_MS = 100;\n\ninterface Options<Type> {\n  key: string;\n  default: Type;\n  debounceMs?: number;\n}\n\nfunction deepUpdate(target: any, source: any): any {\n  const isObject = (x: any) => typeof x === 'object' && x !== null;\n  for (const [key, value] of Object.entries(source)) {\n    if (!target.hasOwnProperty(key)) {\n      if (Array.isArray(value)) {\n        target[key] = [...value];\n      } else if (isObject(value)) {\n        target[key] = deepUpdate({}, value);\n      } else {\n        target[key] = value;\n      }\n    } else if (isObject(value) && isObject(target[key])) {\n      deepUpdate(target[key], value);\n    }\n  }\n  return target;\n}\n\nexport class LocalPersistent<Type> {\n  private key_: string;\n  private cachedValue_: Type;\n  private debouncer_: Debouncer;\n\n  constructor(key: string, initialValue: Type, debounceMs: number) {\n    this.key_ = key;\n    this.cachedValue_ = initialValue;\n    this.debouncer_ = new Debouncer(debounceMs);\n  }\n\n  set value(value: Type) {\n    this.cachedValue_ = value;\n    this.debouncer_.invoke(() => localForage.setItem(this.key_, value));\n  }\n\n  get value(): Type {\n    return this.cachedValue_;\n  }\n}\n\nfunction loadValueFromLocalStorage<Type>(key: string): null | Type {\n  const serializedValue = localStorage[key];\n  let cachedValue = null;\n  if (serializedValue) {\n    cachedValue = JSON.parse(serializedValue) ?? null;\n  }\n  if (cachedValue !== null) {\n    return cachedValue as Type;\n  }\n  return null;\n}\n\nexport async function restoreLocalPersistent<Type>(\n  options: Options<Type>\n): Promise<LocalPersistent<Type>> {\n  const asyncCachedValue = localForage.getItem(options.key);\n  const cachedLegacyValue = loadValueFromLocalStorage<Type>(options.key);\n  const cachedValue = (await asyncCachedValue) as null | Type;\n  let restoredValue: null | Partial<Type> = null;\n  if (cachedValue !== null) {\n    restoredValue = cachedValue;\n  } else {\n    restoredValue = cachedLegacyValue ?? {};\n  }\n  return new LocalPersistent<Type>(\n    options.key,\n    deepUpdate(restoredValue, options.default),\n    options.debounceMs ?? DEFAULT_DEBOUNCE_MS\n  );\n}\n","import './index.css';\n\nimport localForage from 'localforage';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './App';\nimport { AppState, DEFAULT_APP_STATE } from './AppState';\nimport { restoreLocalPersistent } from './base/LocalPersistent';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'shady',\n  version: 1,\n  storeName: 'local_state',\n});\n\nasync function init() {\n  const state = await restoreLocalPersistent<AppState>({\n    key: 'gpu-app-state',\n    default: DEFAULT_APP_STATE,\n  });\n  render(\n    <React.StrictMode>\n      <App appState={state} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n"],"sourceRoot":""}