{"version":3,"sources":["../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","base/Util.tsx","gpu/Blueprint.tsx","gpu/Gpu.tsx","gpu/program/ResourceCache.tsx","gpu/program/BufferCache.tsx","gpu/program/SamplerCache.tsx","gpu/BuiltinUniforms.tsx","gpu/program/ShaderCache.tsx","gpu/program/TextureCache.tsx","gpu/program/ProgramMap.tsx","gpu/program/ResourceBundle.tsx","gpu/program/Executable.tsx","gpu/program/Linker.tsx","gpu/program/Program.tsx","gpu/FrameProducer.tsx","ui/CodeMirrorThemes.tsx","ui/LabeledField.tsx","ui/ControlPanel.tsx","ui/Display.tsx","ui/EditableLabel.tsx","ui/graph/NodePanel.tsx","ui/graph/Validation.tsx","ui/graph/BufferNodePanel.tsx","base/Debouncer.tsx","ui/graph/RenderNodePanel.tsx","ui/graph/TextureNodePanel.tsx","ui/BlueprintEditor.tsx","ui/graph/ComputeNodePanel.tsx","ui/graph/SamplerNodePanel.tsx","ui/graph/BufferBindingNodePanel.tsx","ui/graph/SamplerBindingNodePanel.tsx","ui/graph/TextureBindingNodePanel.tsx","ui/graph/CustomEdge.tsx","ui/CodeEditor.tsx","ui/TabContainer.tsx","ui/Editor.tsx","App.tsx","AppState.tsx","presets/Basic.tsx","presets/Boids.tsx","presets/Instances.tsx","base/LocalPersistent.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","doCopy","value","traversed","Array","isArray","has","add","x","Blob","copy","entries","k","v","undefined","deepCopy","Set","deepEquals","a","b","length","every","i","objectPromiseAll","object","from","key","fromEntries","deserializeBlueprint","serialized","blueprint","nodes","shaders","hasOwnProperty","versioned","version","node","shader","deserializeV1","deserializeV0","oldNode","uuid","oldShader","canonicalize","values","type","imageDataSerialized","bytes","toByteArray","imageData","serializeBlueprint","options","serializeBlobs","Uint8Array","arrayBuffer","fromByteArray","modernizeBlueprint","Gpu","adapter_","device_","lost_","pendingAcquisition_","onAcquired","onLost","acquire","acquireInternal_","release","isAcquired","onLost_","console","warn","setTimeout","this","navigator","gpu","requestAdapter","adapter","requestDevice","device","log","lost","ResourceCache","compiler","compiler_","cache_","Map","get","newCache","resource","dispose","programMap","pendingUpdates","getCurrentDescriptors","descriptor","entry","needsRecompile","set","push","update","compile","newResource","fillRandomUint32Array","data","offset","byteLength","size","Math","min","view","Uint32Array","buffer","crypto","getRandomValues","BufferResource","init","usage","size_","init_","usage_","buffer_","destroy","BufferCompiler","buffers","newDescriptor","bufferUsage","mappedAtCreation","createBuffer","getMappedRange","uints","floats","Float32Array","forEach","unmap","createBufferCache","SamplerResource","sampler","sampler_","SamplerCompiler","samplers","createSampler","createSamplerCache","BUILTIN_UNIFORMS_WGSL","BUILTIN_WGSL_NUM_LINES","split","ShaderResource","messages","code_","module_","messages_","ShaderCompiler","createShaderModule","compilationInfo","info","failed","message","lineNum","linePos","createShaderCache","TextureResource","bitmap","texture","imageData_","bitmap_","texture_","TextureCompiler","textures","createImageBitmap","width","height","createTexture","format","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","createTextureCache","ProgramMap","passes","bindings","textureUsage","passOrder","s","populate_","bindingNodes","queueDeps","incoming","outgoing","connectionType","target","populateBindings_","computePassOrder_","pass","group","groups","bindingNode","bindingType","compileBufferBinding_","compileTextureBinding_","compileSamplerBinding_","startNodes","delete","thisPhase","nextPhase","added","targets","incomingDeps","passType","binding","bufferType","newUsage","storageType","GPUBufferUsage","STORAGE","UNIFORM","layoutEntry","visibility","visibilityForPass","addBindGroupEntry","groupBindings","GPUShaderStage","VERTEX","FRAGMENT","COMPUTE","ResourceBundle","lastCompile_","caches_","programMap_","thisCompile","doCompile_","newResources","replace","Executable","passes_","outputDepthStencilTexture_","outputDepthStencilTextureSize_","submit","encodeCommands_","encoder","createCommandEncoder","encodeRenderCommands_","encodeComputeCommands_","finish","loadValue","clear","clearColor","r","g","depthStencilTexture","renderPass","beginRenderPass","colorAttachments","createView","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","executeBundles","bundle","endPass","computePass","beginComputePass","dispatchSize","setPipeline","pipeline","bindGroups","setBindGroup","dispatch","y","z","getResourceForBinding","resources","name","linkBindings","passId","builtinUniforms","layoutEntries","groupEntries","newLayoutEntries","newGroupEntries","unshift","bindGroupLayouts","layout","createBindGroupLayout","createBindGroup","pipelineLayout","createPipelineLayout","linkPass","outputFormat","vertex","vertexShader","fragment","fragmentShader","topology","stripIndexFormat","createRenderPipeline","entryPoint","vertexEntryPoint","primitive","cullMode","fragmentEntryPoint","depthStencil","depthWriteEnabled","depthCompare","depthTest","createRenderBundleEncoder","colorFormats","depthStencilFormat","draw","numVertices","numInstances","linkRenderPass","shaderDescriptor","createComputePipeline","compute","linkComputePass","linkProgram","linkedPasses","filter","Program","builtinUniforms_","resources_","executable_","blueprint_","outputFormat_","onShadersCompiled_","handler","compile_","uniforms","ArrayBuffer","writeBuffer","resolution","run","results","FrameProducer","gpu_","lastUsedContext_","lastUsedResolution_","startTime_","lastFrameTime_","frame_","program_","onGpuAcquired_","setBlueprint","onShadersCompiled","canvas","context","getContext","getContextFromCanvas","stop","getPreferredFormat","configure","style","now","Date","getTime","delta","updateUniforms","time","timeDelta","frame","getCurrentTexture","CODE_MIRROR_THEMES","LabeledField","label","children","className","ControlPanel","props","pixelSizeToggleRef_","pixelSizeRef_","framebufferWidthRef_","framebufferHeightRef_","importRef_","saveBlueprint_","prompt","onSaveBlueprint","loadBlueprint_","onLoadBlueprint","toggleLoadBlueprintPanel_","copyBlueprintToClipboard_","clipboard","JSON","stringify","writeText","importBlueprintFromClipboard_","togglePasteMenu_","current","serializedBlueprint","parse","onImportBlueprint","setState","state","pasteMenuVisible","deleteBlueprint_","onDeleteBlueprint","loadMenuVisible","toggleOptions_","optionsVisible","enterFullscreen_","document","querySelector","requestFullscreen","setAspectRatio_","onDisplayConfigChange","aspect","currentTarget","updateResolution_","framebufferSize","parseInt","isNaN","mode","pixelSize","React","createRef","displayConfig","makeAspectOption","ratio","onChange","checked","title","onClick","ref","marginLeft","codeMirrorTheme","onCodeMirrorThemeChange","theme","savedBlueprints","Component","Display","wrapperRef_","canvasRef_","pendingFrameRequest_","renderNextFrame","wrapper","clientWidth","clientHeight","render","requestAnimationFrame","cancelAnimationFrame","config","aspectX","aspectY","stretch","computedWrapperStyle","aspectRatio","EditableLabel","onClick_","enabled","isEditing","commit_","untrimmedValue","trim","onKeyDown_","onFocusOut_","isEmpty","editingClass","emptyClass","defaultValue","emptyText","onKeyDown","onBlur","readOnly","autoFocus","NodePanel","onRename","resolveConnection","c","targetHandle","sourceName","targetName","isValidBindingConnection","some","isValidQueueConnection","Debouncer","minDelayMs","minDelayMs_","lastInvocationMs_","pendingInvocation_","f","onCooldown","scheduleSuppressed","invokeInternal","clearTimeout","clearPendingInvocation","delay","invoke","bind","colorValue","cp","toString","join","parseColor","parseComponent","index","image","drawImage","NODE_TYPES","position","isValidConnection","textAlign","valueAsNumber","canvasRef","useRef","useEffect","updateCanvasImage","accept","input","file","files","debouncer","max","isConnectable","EDGE_TYPES","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","anyData","arrowHeadType","markerEndId","path","getBezierPath","end","getMarkerEnd","getEdgeCenter","centerX","centerY","d","markerEnd","getUnusedKey","dict","base","FlowErrorBounary","error","errorInfo","isPassNode","BlueprintEditor","isMounted_","instance_","flowRef_","lastConnectStart_","lastConnectEnd_","update_","elements","buildGraphFromBlueprint","onLoad_","instance","onConnectStart_","clientX","clientY","onConnectStop_","onConnect_","edge","getBoundingClientRect","midpoint","project","addBufferBinding_","addTrivialBinding_","onElementClick_","event","element","onMoveNode_","addShader_","addNode_","addBuffer_","addTexture_","mipLevelCount","sampleCount","addSampler_","addRenderPass_","indexed","addComputePass_","nodeTypes","edgeTypes","elementsSelectable","nodesConnectable","nodesDraggable","onLoad","onConnectStart","onConnectStop","onConnect","onElementClick","onNodeDragStop","assign","otherId","otherNode","CodeEditor","isDecorating_","editorRef_","onChange_","change","getValue","onUpdate_","getAllMarks","m","clearGutter","compilationMessages","line","markText","ch","marker","createElement","classList","setGutterMarker","cm","editor","refresh","contents","onUpdate","keyMap","gutters","mutable","TabContainer","activeTab","numChildren","Children","count","tab","tabs","onActivate","renderTabs_","toArray","child","active","_","setActiveTab_","onClose","stopPropagation","Editor","refreshEditor","uniformsRef","refs","onBlueprintChange","removeShader","newName","renameShader","compilationResults","App","frameProducer_","onFullscreenChange_","reconfigure","onBlueprintChange_","onSaveBlueprint_","onLoadBlueprint_","reserialized","blueprints","onImportBlueprint_","onDeleteBlueprint_","onCodeMirrorThemeChange_","appState","DEFAULT_APP_STATE","Basic","Boids","Instances","deepUpdate","isObject","LocalPersistent","initialValue","debounceMs","key_","cachedValue_","debouncer_","localForage","setItem","loadValueFromLocalStorage","serializedValue","localStorage","cachedValue","restoreLocalPersistent","asyncCachedValue","getItem","cachedLegacyValue","restoredValue","default","StrictMode","getElementById","driver","INDEXEDDB","storeName"],"mappings":"uNAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,mBAAoB,CACnB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,GAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,uBAAwB,CACvB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,EACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,GAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,mBAAoB,CACnB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,yBAA0B,CACzB,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,EACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,GAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,WAAY,CACX,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,GAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,C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","file":"static/js/main.4f8d5052.chunk.js","sourcesContent":["var map = {\n\t\"./apl/apl.js\": [\n\t\t139,\n\t\t30\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t140,\n\t\t31\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t141,\n\t\t32\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t142,\n\t\t33\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t143,\n\t\t34\n\t],\n\t\"./clike/clike.js\": [\n\t\t128,\n\t\t2\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t144,\n\t\t35\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t145,\n\t\t36\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t146,\n\t\t37\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t129,\n\t\t38\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t147,\n\t\t39\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t148,\n\t\t40\n\t],\n\t\"./css/css.js\": [\n\t\t125,\n\t\t1\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t149,\n\t\t41\n\t],\n\t\"./d/d.js\": [\n\t\t150,\n\t\t42\n\t],\n\t\"./dart/dart.js\": [\n\t\t151,\n\t\t2,\n\t\t43\n\t],\n\t\"./diff/diff.js\": [\n\t\t152,\n\t\t44\n\t],\n\t\"./django/django.js\": [\n\t\t153,\n\t\t0,\n\t\t1,\n\t\t11\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t154,\n\t\t21\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t155,\n\t\t45\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t156,\n\t\t46\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t157,\n\t\t47\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t158,\n\t\t48\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t159,\n\t\t49\n\t],\n\t\"./elm/elm.js\": [\n\t\t160,\n\t\t50\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t161,\n\t\t51\n\t],\n\t\"./factor/factor.js\": [\n\t\t162,\n\t\t22\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t163,\n\t\t52\n\t],\n\t\"./forth/forth.js\": [\n\t\t164,\n\t\t53\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t165,\n\t\t54\n\t],\n\t\"./gas/gas.js\": [\n\t\t166,\n\t\t55\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t167,\n\t\t4,\n\t\t20\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t168,\n\t\t56\n\t],\n\t\"./go/go.js\": [\n\t\t169,\n\t\t57\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t170,\n\t\t58\n\t],\n\t\"./haml/haml.js\": [\n\t\t171,\n\t\t0,\n\t\t1,\n\t\t14\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t130,\n\t\t16\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t172,\n\t\t26\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t131,\n\t\t59\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t173,\n\t\t60\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t174,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t124,\n\t\t0,\n\t\t1,\n\t\t27\n\t],\n\t\"./http/http.js\": [\n\t\t175,\n\t\t61\n\t],\n\t\"./idl/idl.js\": [\n\t\t176,\n\t\t62\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t126,\n\t\t0\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t177,\n\t\t63\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t178,\n\t\t0,\n\t\t28\n\t],\n\t\"./julia/julia.js\": [\n\t\t179,\n\t\t64\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t180,\n\t\t65\n\t],\n\t\"./lua/lua.js\": [\n\t\t181,\n\t\t66\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t136,\n\t\t4\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t182,\n\t\t67\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t183,\n\t\t68\n\t],\n\t\"./meta.js\": [\n\t\t24\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t184,\n\t\t69\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t185,\n\t\t70\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t186,\n\t\t71\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t187,\n\t\t72\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t188,\n\t\t73\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t189,\n\t\t74\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t190,\n\t\t23\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t191,\n\t\t75\n\t],\n\t\"./octave/octave.js\": [\n\t\t192,\n\t\t76\n\t],\n\t\"./oz/oz.js\": [\n\t\t193,\n\t\t77\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t194,\n\t\t78\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t195,\n\t\t0,\n\t\t79\n\t],\n\t\"./perl/perl.js\": [\n\t\t196,\n\t\t80\n\t],\n\t\"./php/php.js\": [\n\t\t197,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t17\n\t],\n\t\"./pig/pig.js\": [\n\t\t198,\n\t\t81\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t199,\n\t\t82\n\t],\n\t\"./properties/properties.js\": [\n\t\t200,\n\t\t83\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t201,\n\t\t84\n\t],\n\t\"./pug/pug.js\": [\n\t\t137,\n\t\t0,\n\t\t1,\n\t\t3\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t202,\n\t\t85\n\t],\n\t\"./python/python.js\": [\n\t\t132,\n\t\t86\n\t],\n\t\"./q/q.js\": [\n\t\t203,\n\t\t87\n\t],\n\t\"./r/r.js\": [\n\t\t204,\n\t\t88\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t205,\n\t\t89\n\t],\n\t\"./rst/rst.js\": [\n\t\t206,\n\t\t13\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t127,\n\t\t90\n\t],\n\t\"./rust/rust.js\": [\n\t\t207,\n\t\t24\n\t],\n\t\"./sas/sas.js\": [\n\t\t208,\n\t\t91\n\t],\n\t\"./sass/sass.js\": [\n\t\t134,\n\t\t1,\n\t\t92\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t209,\n\t\t93\n\t],\n\t\"./shell/shell.js\": [\n\t\t210,\n\t\t94\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t211,\n\t\t95\n\t],\n\t\"./slim/slim.js\": [\n\t\t212,\n\t\t0,\n\t\t1,\n\t\t15\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t213,\n\t\t96\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t214,\n\t\t97\n\t],\n\t\"./solr/solr.js\": [\n\t\t215,\n\t\t98\n\t],\n\t\"./soy/soy.js\": [\n\t\t216,\n\t\t0,\n\t\t1,\n\t\t18\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t217,\n\t\t99\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t218,\n\t\t100\n\t],\n\t\"./sql/sql.js\": [\n\t\t219,\n\t\t101\n\t],\n\t\"./stex/stex.js\": [\n\t\t133,\n\t\t102\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t138,\n\t\t5\n\t],\n\t\"./swift/swift.js\": [\n\t\t220,\n\t\t103\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t221,\n\t\t104\n\t],\n\t\"./textile/textile.js\": [\n\t\t222,\n\t\t105\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t223,\n\t\t106\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t224,\n\t\t107\n\t],\n\t\"./toml/toml.js\": [\n\t\t225,\n\t\t108\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t226,\n\t\t0,\n\t\t1,\n\t\t12\n\t],\n\t\"./troff/troff.js\": [\n\t\t227,\n\t\t109\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t229,\n\t\t110\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t228,\n\t\t111\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t230,\n\t\t112\n\t],\n\t\"./twig/twig.js\": [\n\t\t231,\n\t\t19\n\t],\n\t\"./vb/vb.js\": [\n\t\t232,\n\t\t113\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t233,\n\t\t114\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t234,\n\t\t115\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t235,\n\t\t116\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t236,\n\t\t117\n\t],\n\t\"./vue/vue.js\": [\n\t\t237,\n\t\t0,\n\t\t1,\n\t\t5,\n\t\t3,\n\t\t9\n\t],\n\t\"./wast/wast.js\": [\n\t\t238,\n\t\t25\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t239,\n\t\t118\n\t],\n\t\"./xml/xml.js\": [\n\t\t123,\n\t\t119\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t240,\n\t\t120\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t241,\n\t\t121\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t242,\n\t\t29\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t135,\n\t\t122\n\t],\n\t\"./z80/z80.js\": [\n\t\t243,\n\t\t123\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 120;\nmodule.exports = webpackAsyncContext;","function doCopy<T>(value: T, traversed: Set<any>): T {\n  if (Array.isArray(value)) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n    return value.map(x => doCopy(x, traversed)) as any;\n  }\n\n  if (value instanceof Blob) {\n    return value;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n\n    const copy: Record<string, any> = {};\n    for (const [k, v] of Object.entries(value)) {\n      copy[k] = doCopy(v, traversed);\n    }\n    return copy as T;\n  }\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (\n    typeof value === 'number' ||\n    typeof value === 'string' ||\n    typeof value === 'boolean'\n  ) {\n    return value;\n  }\n\n  throw new Error('value not deep-copyable');\n}\n\nexport function deepCopy<T extends Record<string, any>>(value: T): T {\n  return doCopy(value, new Set());\n}\n\nexport function deepEquals<T extends Record<string, any>>(a: T, b: T): boolean {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n    return a.every((x, i) => deepEquals(x, b[i]));\n  }\n\n  if (a instanceof Blob || b instanceof Blob) {\n    return a === b;\n  }\n\n  if (typeof a === 'object' && a !== null) {\n    if (typeof b !== 'object' || b === null) {\n      return false;\n    }\n    return (\n      Object.keys(a).length === Object.keys(b).length &&\n      Object.keys(a).every(k => deepEquals(a[k], b[k]))\n    );\n  }\n\n  return a === b;\n}\n\n// Awaits all values on an object, and returns a new object with the same keys\n// but all promises resolved.\nexport async function objectPromiseAll(object: Record<string, any>) {\n  return Object.fromEntries(\n    await Promise.all(\n      Array.from(Object.entries(object)).map(async ([key, value]) => [\n        key,\n        await value,\n      ])\n    )\n  );\n}\n","import { toByteArray, fromByteArray } from 'base64-js';\n\nimport { deepCopy } from '../base/Util';\n\nexport type ID = NodeID | ShaderID;\nexport type NodeID = string;\nexport type ShaderID = string;\n\nexport interface Blueprint {\n  nodes: Record<NodeID, Node>;\n  shaders: Record<ShaderID, Shader>;\n}\n\nexport type Node =\n  | BufferNode\n  | ComputeNode\n  | ConnectionNode\n  | RenderNode\n  | SamplerNode\n  | TextureNode;\n\nexport type ConnectionNode =\n  | BufferBindingNode\n  | QueueNode\n  | SamplerBindingNode\n  | TextureBindingNode;\n\nexport type NodeType =\n  | 'render'\n  | 'compute'\n  | 'buffer'\n  | 'texture'\n  | 'sampler'\n  | 'connection';\n\nexport interface NodeBase {\n  id: NodeID;\n  name: string;\n  position: { x: number; y: number };\n  type: NodeType;\n}\n\nexport interface RenderNode extends NodeBase {\n  type: 'render';\n\n  // TODO: Configuration for primitive state, depth/stencil, multisampling\n\n  vertexShader: ShaderID;\n  vertexEntryPoint: string;\n\n  fragmentShader: ShaderID;\n  fragmentEntryPoint: string;\n\n  topology?: GPUPrimitiveTopology;\n  indexed: boolean;\n  numVertices: number;\n  numInstances: number;\n\n  clear?: boolean;\n  clearColor?: GPUColorDict;\n\n  depthTest?: GPUCompareFunction;\n}\n\nexport interface ComputeNode extends NodeBase {\n  type: 'compute';\n  shader: ShaderID;\n  entryPoint: string;\n  dispatchSize: { x: number; y: number; z: number };\n}\n\nexport type BufferInitializer = 'zero' | 'random-floats' | 'random-uints';\n\nexport interface BufferNode extends NodeBase {\n  type: 'buffer';\n  size: number;\n  init?: BufferInitializer;\n}\n\nexport interface TextureNode extends NodeBase {\n  type: 'texture';\n  imageData: null | Blob;\n  imageDataSerialized: null | string;\n  size: GPUExtent3DDict;\n  format: GPUTextureFormat;\n  mipLevelCount: number;\n  sampleCount: number;\n}\n\nexport interface SamplerNode extends NodeBase {\n  type: 'sampler';\n\n  // TODO: Filtering, addressing, clamping, comparison, anisotropy.\n}\n\nexport interface Shader {\n  name: string;\n  id: ShaderID;\n  code: string;\n}\n\nexport type ConnectionType = 'binding' | 'queue';\n\nexport interface ConnectionNodeBase extends NodeBase {\n  type: 'connection';\n  connectionType: ConnectionType;\n  source: NodeID;\n  target: NodeID;\n}\n\nexport type BindingType = 'buffer' | 'sampler' | 'texture';\n\nexport interface BindingNodeBase extends ConnectionNodeBase {\n  connectionType: 'binding';\n  bindingType: BindingType;\n  group: number;\n  binding: number;\n}\n\nexport type BufferBindingStorageType = 'storage-read' | 'storage' | 'uniform';\n\nexport interface BufferBindingNode extends BindingNodeBase {\n  bindingType: 'buffer';\n  storageType: BufferBindingStorageType;\n}\n\nexport interface TextureBindingNode extends BindingNodeBase {\n  bindingType: 'texture';\n}\n\nexport interface SamplerBindingNode extends BindingNodeBase {\n  bindingType: 'sampler';\n}\n\nexport type BindingNode =\n  | BufferBindingNode\n  | SamplerBindingNode\n  | TextureBindingNode;\n\nexport interface QueueNode extends ConnectionNodeBase {\n  connectionType: 'queue';\n}\n\ninterface SerializedBlueprintV0 {\n  nodes: Record<NodeID, Node>;\n  shaders: Record<ShaderID, Shader>;\n}\n\ninterface SerializedBlueprintV1 {\n  version: 1;\n  nodes: Node[];\n  shaders: Shader[];\n}\n\nconst CURRENT_BLUEPRINT_VERSION = 1;\n\nexport type SerializedBlueprint =\n  | SerializedBlueprintV0\n  | VersionedSerializedBlueprint;\n\ntype VersionedSerializedBlueprint = SerializedBlueprintV1;\n\nfunction canonicalize(blueprint: Blueprint) {\n  for (const [id, node] of Object.entries(blueprint.nodes)) {\n    node.id = id;\n\n    const oldNode = node as any;\n    if (oldNode.uuid) {\n      delete oldNode.uuid;\n    }\n  }\n  for (const [id, shader] of Object.entries(blueprint.shaders)) {\n    shader.id = id;\n\n    const oldShader = shader as any;\n    if (oldShader.uuid) {\n      delete oldShader.uuid;\n    }\n  }\n}\n\nfunction deserializeV0(\n  serialized: SerializedBlueprintV0,\n  blueprint: Blueprint\n) {\n  for (const [id, node] of Object.entries(serialized.nodes)) {\n    blueprint.nodes[id] = deepCopy(node);\n  }\n  for (const [id, shader] of Object.entries(serialized.shaders)) {\n    blueprint.shaders[id] = deepCopy(shader);\n  }\n}\n\nfunction deserializeV1(\n  serialized: SerializedBlueprintV1,\n  blueprint: Blueprint\n) {\n  for (const node of serialized.nodes) {\n    blueprint.nodes[node.id] = deepCopy(node);\n  }\n  for (const shader of serialized.shaders) {\n    blueprint.shaders[shader.id] = deepCopy(shader);\n  }\n}\n\nexport function deserializeBlueprint(\n  serialized: SerializedBlueprint\n): Blueprint {\n  const blueprint: Blueprint = { nodes: {}, shaders: {} };\n\n  if (!serialized.hasOwnProperty('version')) {\n    deserializeV0(serialized as SerializedBlueprintV0, blueprint);\n  } else {\n    const versioned = serialized as VersionedSerializedBlueprint;\n    switch (versioned.version) {\n      case 1:\n        deserializeV1(versioned as SerializedBlueprintV1, blueprint);\n        break;\n    }\n  }\n\n  canonicalize(blueprint);\n\n  for (const node of Object.values(blueprint.nodes)) {\n    if (node.type !== 'texture') {\n      continue;\n    }\n\n    if (node.imageDataSerialized) {\n      const bytes = toByteArray(node.imageDataSerialized);\n      node.imageData = new Blob([bytes]);\n      node.imageDataSerialized = null;\n    }\n  }\n\n  return blueprint;\n}\n\ninterface SerializationOptions {\n  serializeBlobs?: boolean;\n}\n\nexport async function serializeBlueprint(\n  blueprint: Blueprint,\n  options?: SerializationOptions\n): Promise<SerializedBlueprintV1> {\n  const serialized: SerializedBlueprintV1 = {\n    version: 1,\n    nodes: deepCopy(Object.values(blueprint.nodes)),\n    shaders: deepCopy(Object.values(blueprint.shaders)),\n  };\n  if (options && options.serializeBlobs) {\n    for (const node of serialized.nodes) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageData instanceof Blob) {\n        const bytes = new Uint8Array(await node.imageData.arrayBuffer());\n        node.imageDataSerialized = fromByteArray(bytes);\n        node.imageData = null;\n      }\n    }\n  }\n  return serialized;\n}\n\nexport async function modernizeBlueprint(\n  serialized: SerializedBlueprint\n): Promise<SerializedBlueprint> {\n  if (serialized.hasOwnProperty('version')) {\n    const versioned = serialized as VersionedSerializedBlueprint;\n    if (versioned.version === CURRENT_BLUEPRINT_VERSION) {\n      return serialized;\n    }\n  }\n\n  const blueprint = deserializeBlueprint(serialized);\n  return serializeBlueprint(blueprint);\n}\n","const REACQUIRE_ON_LOST_DELAY_MS = 1000;\n\ntype AcquiredHandler = (() => void) | (() => Promise<void>);\ntype LostHandler = (() => void) | (() => Promise<void>);\n\nexport class Gpu {\n  private adapter_: null | GPUAdapter;\n  private device_: null | GPUDevice;\n  private lost_: boolean;\n  private pendingAcquisition_: null | Promise<void>;\n\n  onAcquired: null | AcquiredHandler;\n  onLost: null | LostHandler;\n\n  constructor() {\n    this.adapter_ = null;\n    this.device_ = null;\n    this.lost_ = false;\n    this.pendingAcquisition_ = null;\n    this.onAcquired = null;\n    this.onLost = null;\n    this.acquire();\n  }\n\n  get isAcquired() {\n    return this.adapter_ !== null;\n  }\n  get isLost() {\n    return !this.isAcquired;\n  }\n  get adapter() {\n    return this.adapter_;\n  }\n  get device() {\n    return this.device_;\n  }\n\n  acquire = async () => {\n    if (this.pendingAcquisition_ === null) {\n      this.pendingAcquisition_ = this.acquireInternal_();\n    }\n    return this.pendingAcquisition_;\n  };\n\n  release = () => {\n    if (!this.isAcquired) {\n      throw new Error('not acquired');\n    }\n\n    this.adapter_ = null;\n    this.device_ = null;\n  };\n\n  async acquireInternal_() {\n    if (this.isAcquired) {\n      throw new Error('already acquired.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('no webgpu adapter available');\n    }\n\n    try {\n      const device = await adapter.requestDevice();\n      if (!device) {\n        throw new Error('no webgpu device available');\n      }\n      this.device_ = device;\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.pendingAcquisition_ = null;\n    this.adapter_ = adapter;\n    this.device_!.lost.then(this.onLost_);\n    if (this.onAcquired !== null) {\n      await this.onAcquired();\n    }\n  }\n\n  onLost_ = async () => {\n    console.warn('Lost GPU. Reacquiring after short delay...');\n\n    this.adapter_ = null;\n    this.device_ = null;\n    if (this.onLost != null) {\n      await this.onLost();\n    }\n    await new Promise(resolve =>\n      setTimeout(resolve, REACQUIRE_ON_LOST_DELAY_MS)\n    );\n  };\n}\n","import { ID } from '../Blueprint';\nimport { ProgramMap } from './ProgramMap';\n\ninterface ResourceDescriptor {\n  id: ID;\n}\n\nexport interface Resource {\n  dispose: () => void;\n}\n\nexport interface ResourceCompiler<\n  DescriptorType extends ResourceDescriptor,\n  ResourceType extends Resource\n> {\n  getCurrentDescriptors(programMap: ProgramMap): Iterable<DescriptorType>;\n  needsRecompile(\n    descriptor: DescriptorType,\n    cachedValue: ResourceType,\n    programMap: ProgramMap\n  ): boolean;\n  compile(\n    descriptor: DescriptorType,\n    programMap: ProgramMap\n  ): Promise<null | ResourceType>;\n}\n\ntype Cache<ResourceType extends Resource> = Map<ID, ResourceType>;\n\ninterface PendingUpdate<ResourceType extends Resource> {\n  id: string;\n  update: Promise<null | ResourceType>;\n}\n\nexport class ResourceCache<\n  DescriptorType extends ResourceDescriptor,\n  ResourceType extends Resource\n> {\n  private readonly compiler_: ResourceCompiler<DescriptorType, ResourceType>;\n  private cache_: Cache<ResourceType>;\n\n  constructor(compiler: ResourceCompiler<DescriptorType, ResourceType>) {\n    this.compiler_ = compiler;\n    this.cache_ = new Map();\n  }\n\n  keys() {\n    return this.cache_.keys();\n  }\n\n  entries() {\n    return this.cache_.entries();\n  }\n\n  get(id: ID): null | ResourceType {\n    return this.cache_.get(id) ?? null;\n  }\n\n  replace(newCache: ResourceCache<DescriptorType, ResourceType>) {\n    for (const [id, resource] of this.cache_.entries()) {\n      const newResource = newCache.get(id);\n      if (!newResource) {\n        resource.dispose();\n      }\n    }\n    this.cache_ = newCache.cache_;\n  }\n\n  dispose() {\n    for (const resource of Object.values(this.cache_)) {\n      resource.dispose();\n    }\n  }\n\n  async compile(\n    programMap: ProgramMap\n  ): Promise<ResourceCache<DescriptorType, ResourceType>> {\n    const newCache = new ResourceCache<DescriptorType, ResourceType>(\n      this.compiler_\n    );\n    const pendingUpdates: PendingUpdate<ResourceType>[] = [];\n    for (const descriptor of this.compiler_.getCurrentDescriptors(programMap)) {\n      const entry = this.cache_.get(descriptor.id);\n      if (\n        entry &&\n        !this.compiler_.needsRecompile(descriptor, entry, programMap)\n      ) {\n        newCache.cache_.set(descriptor.id, entry);\n      } else {\n        pendingUpdates.push({\n          id: descriptor.id,\n          update: this.compiler_.compile(descriptor, programMap),\n        });\n      }\n    }\n\n    for (const { id, update } of pendingUpdates) {\n      const newResource = await update;\n      if (newResource !== null) {\n        newCache.cache_.set(id, newResource);\n      }\n    }\n    return newCache;\n  }\n}\n","import { BufferInitializer, BufferNode } from '../Blueprint';\nimport { Resource, ResourceCache } from './ResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nfunction fillRandomUint32Array(data: Uint32Array) {\n  for (let offset = 0; offset < data.byteLength; offset += 65536) {\n    const size = Math.min(65536, data.byteLength - offset);\n    const view = new Uint32Array(data.buffer, offset, size / 4);\n    crypto.getRandomValues(view);\n  }\n}\n\nclass BufferResource implements Resource {\n  private readonly size_: number;\n  private readonly init_: BufferInitializer;\n  private readonly usage_: GPUBufferUsageFlags;\n  private readonly buffer_: GPUBuffer;\n\n  constructor(\n    size: number,\n    init: BufferInitializer,\n    usage: GPUBufferUsageFlags,\n    buffer: GPUBuffer\n  ) {\n    this.size_ = size;\n    this.init_ = init;\n    this.usage_ = usage;\n    this.buffer_ = buffer;\n  }\n\n  get size() {\n    return this.size_;\n  }\n  get init() {\n    return this.init_;\n  }\n  get usage() {\n    return this.usage_;\n  }\n  get buffer() {\n    return this.buffer_;\n  }\n\n  dispose() {\n    this.buffer_.destroy();\n  }\n}\n\nclass BufferCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  getCurrentDescriptors(programMap: ProgramMap): Iterable<BufferNode> {\n    return programMap.buffers.values();\n  }\n\n  needsRecompile(\n    newDescriptor: BufferNode,\n    buffer: BufferResource,\n    programMap: ProgramMap\n  ) {\n    return (\n      newDescriptor.size !== buffer.size ||\n      newDescriptor.init !== buffer.init ||\n      programMap.bufferUsage.get(newDescriptor.id) !== buffer.usage\n    );\n  }\n\n  async compile(descriptor: BufferNode, programMap: ProgramMap) {\n    const usage = programMap.bufferUsage.get(descriptor.id);\n    if (!usage) {\n      // No need to do anything, this buffer isn't used by anyone.\n      return null;\n    }\n\n    const mappedAtCreation = descriptor.init !== 'zero';\n    const buffer = this.device_.createBuffer({\n      size: descriptor.size,\n      usage,\n      mappedAtCreation,\n    });\n    if (!buffer) {\n      return null;\n    }\n\n    if (mappedAtCreation) {\n      const data = buffer.getMappedRange(0, descriptor.size);\n      const uints = new Uint32Array(data);\n      const floats = new Float32Array(data);\n      fillRandomUint32Array(uints);\n      if (descriptor.init === 'random-floats') {\n        uints.forEach((x, i) => {\n          floats[i] = x / 2 ** 31 - 1;\n        });\n      }\n      buffer.unmap();\n    }\n\n    return new BufferResource(\n      descriptor.size,\n      descriptor.init ?? 'zero',\n      usage,\n      buffer\n    );\n  }\n}\n\nexport type BufferCache = ResourceCache<BufferNode, BufferResource>;\n\nexport function createBufferCache(device: GPUDevice): BufferCache {\n  return new ResourceCache<BufferNode, BufferResource>(\n    new BufferCompiler(device)\n  );\n}\n","import { SamplerNode } from '../Blueprint';\nimport { Resource, ResourceCache } from './ResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nclass SamplerResource implements Resource {\n  private readonly sampler_: GPUSampler;\n\n  constructor(sampler: GPUSampler) {\n    this.sampler_ = sampler;\n  }\n\n  get sampler() {\n    return this.sampler_;\n  }\n\n  dispose() {}\n}\n\nexport class SamplerCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  getCurrentDescriptors(programMap: ProgramMap): Iterable<SamplerNode> {\n    return programMap.samplers.values();\n  }\n\n  needsRecompile(\n    newDescriptor: SamplerNode,\n    sampler: SamplerResource,\n    programMap: ProgramMap\n  ) {\n    return false;\n  }\n\n  async compile(descriptor: SamplerNode, programMap: ProgramMap) {\n    return new SamplerResource(this.device_.createSampler());\n  }\n}\n\nexport type SamplerCache = ResourceCache<SamplerNode, SamplerResource>;\n\nexport function createSamplerCache(device: GPUDevice): SamplerCache {\n  return new ResourceCache<SamplerNode, SamplerResource>(\n    new SamplerCompiler(device)\n  );\n}\n","import { UniformLayout } from './UniformLayout';\n\nexport const BUILTIN_UNIFORMS_WGSL = `// All shader sources are prefixed with the definitions below, providing a\n// set of builtin uniform inputs which are updated by the application before\n// each frame iteration.\n[[block]] struct BuiltinUniforms {\n  // The time in seconds since the application loaded.\n  time: f32;\n\n  // The time in seconds since the last frame iteration. Zero for the first\n  // frame.\n  timeDelta: f32;\n\n  // The count of the current frame. The first frame is frame 0.\n  frame: u32;\n\n  // The resolution in pixels of the main output texture displayed by the app.\n  [[align(16)]] resolution: vec2<u32>;\n};\n\n// All builtin uniforms are accessible to all shaders through this global.\n[[group(0), binding(0)]] var<uniform> builtinUniforms: BuiltinUniforms;\n`;\n\nexport const BUILTIN_UNIFORMS: UniformLayout = {\n  fields: [\n    { name: 'time', type: 'f32' },\n    { name: 'timeDelta', type: 'f32' },\n    { name: 'frame', type: 'u32' },\n    { name: 'resolution', type: { vectorType: 'vec2', componentType: 'u32' } },\n  ],\n};\n","import { Shader } from '../Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../BuiltinUniforms';\nimport { Resource, ResourceCache } from './ResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nconst BUILTIN_WGSL_NUM_LINES = BUILTIN_UNIFORMS_WGSL.split(/\\r\\n|\\r|\\n/).length;\n\nexport type ShaderCompilationMessageType = 'info' | 'warning' | 'error';\n\nexport interface ShaderCompilationMessage {\n  message: string;\n  type: ShaderCompilationMessageType;\n  lineNum: number;\n  linePos: number;\n  offset: number;\n  length: number;\n}\n\nexport interface ShaderCompilationResult {\n  module: null | GPUShaderModule;\n  messages: ShaderCompilationMessage[];\n}\n\nclass ShaderResource implements Resource {\n  private readonly code_: string;\n  private readonly module_: null | GPUShaderModule;\n  private readonly messages_: ShaderCompilationMessage[];\n\n  constructor(\n    code: string,\n    module: null | GPUShaderModule,\n    messages: ShaderCompilationMessage[]\n  ) {\n    this.code_ = code;\n    this.module_ = module;\n    this.messages_ = messages;\n  }\n\n  get code() {\n    return this.code_;\n  }\n  get module() {\n    return this.module_;\n  }\n  get messages() {\n    return this.messages_;\n  }\n\n  dispose() {}\n}\n\nexport class ShaderCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  getCurrentDescriptors(programMap: ProgramMap): Iterable<Shader> {\n    return programMap.shaders.values();\n  }\n\n  needsRecompile(\n    newDescriptor: Shader,\n    shader: ShaderResource,\n    programMap: ProgramMap\n  ) {\n    return newDescriptor.code !== shader.code;\n  }\n\n  async compile(descriptor: Shader, programMap: ProgramMap) {\n    const module = this.device_.createShaderModule({\n      code: BUILTIN_UNIFORMS_WGSL + descriptor.code,\n    });\n    const info = await module.compilationInfo();\n    let failed = false;\n    const messages = [];\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        failed = true;\n      }\n      messages.push({\n        message: message.message,\n        type: message.type as ShaderCompilationMessageType,\n        lineNum: message.lineNum - BUILTIN_WGSL_NUM_LINES,\n        linePos: message.linePos,\n        offset: message.offset,\n        length: message.length,\n      });\n    }\n\n    return new ShaderResource(\n      descriptor.code,\n      failed ? null : module,\n      messages\n    );\n  }\n}\n\nexport type ShaderCache = ResourceCache<Shader, ShaderResource>;\n\nexport function createShaderCache(device: GPUDevice): ShaderCache {\n  return new ResourceCache<Shader, ShaderResource>(new ShaderCompiler(device));\n}\n","import { TextureNode } from '../Blueprint';\nimport { Resource, ResourceCache } from './ResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nclass TextureResource implements Resource {\n  private readonly imageData_: Blob;\n  private readonly bitmap_: ImageBitmap;\n  private readonly texture_: GPUTexture;\n\n  constructor(imageData: Blob, bitmap: ImageBitmap, texture: GPUTexture) {\n    this.imageData_ = imageData;\n    this.bitmap_ = bitmap;\n    this.texture_ = texture;\n  }\n\n  get imageData() {\n    return this.imageData_;\n  }\n\n  get bitmap() {\n    return this.bitmap_;\n  }\n\n  get texture() {\n    return this.texture_;\n  }\n\n  dispose() {\n    this.texture_.destroy();\n  }\n}\n\nexport class TextureCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  getCurrentDescriptors(programMap: ProgramMap): Iterable<TextureNode> {\n    return programMap.textures.values();\n  }\n\n  needsRecompile(\n    newDescriptor: TextureNode,\n    texture: TextureResource,\n    programMap: ProgramMap\n  ) {\n    return newDescriptor.imageData !== texture.imageData;\n  }\n\n  async compile(descriptor: TextureNode, programMap: ProgramMap) {\n    if (!descriptor.imageData) {\n      return null;\n    }\n\n    const bitmap = await createImageBitmap(descriptor.imageData);\n    const size = { width: bitmap.width, height: bitmap.height };\n    const texture = this.device_.createTexture({\n      size,\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    this.device_.queue.copyExternalImageToTexture(\n      { source: bitmap },\n      { texture },\n      size\n    );\n    return new TextureResource(descriptor.imageData, bitmap, texture);\n  }\n}\n\nexport type TextureCache = ResourceCache<TextureNode, TextureResource>;\n\nexport function createTextureCache(device: GPUDevice): TextureCache {\n  return new ResourceCache<TextureNode, TextureResource>(\n    new TextureCompiler(device)\n  );\n}\n","import { deepCopy } from '../../base/Util';\nimport {\n  Blueprint,\n  BindingNode,\n  BufferBindingNode,\n  BufferNode,\n  ComputeNode,\n  NodeID,\n  RenderNode,\n  SamplerBindingNode,\n  SamplerNode,\n  Shader,\n  TextureBindingNode,\n  TextureNode,\n} from '../Blueprint';\n\n// TODO: This should be devised dynamically from device limits.\nconst kMaxBindGroups = 4;\n\nexport type PassNode = RenderNode | ComputeNode;\n\nexport type ShaderMap = Map<NodeID, Shader>;\nexport type BufferMap = Map<NodeID, BufferNode>;\nexport type TextureMap = Map<NodeID, TextureNode>;\nexport type SamplerMap = Map<NodeID, SamplerNode>;\nexport type PassMap = Map<NodeID, PassNode>;\n\nexport type BindableNode = BufferNode | TextureNode | SamplerNode;\n\nexport interface BindGroupEntry {\n  layoutEntry: GPUBindGroupLayoutEntry;\n  node: BindableNode;\n}\n\nexport type BindGroup = Map<number, BindGroupEntry>;\nexport type BindingsMap = Map<NodeID, BindGroup[]>;\n\nexport type PassType = 'render' | 'compute';\n\nexport type BufferUsageMap = Map<NodeID, GPUBufferUsageFlags>;\nexport type TextureUsageMap = Map<NodeID, GPUTextureUsageFlags>;\n\ninterface QueueDeps {\n  // Maps each pass ID to the set of pass IDs which depend upon it.\n  incoming: Map<NodeID, Set<NodeID>>;\n\n  // Maps each pass ID to the set of pass IDs on which it depends.\n  outgoing: Map<NodeID, Set<NodeID>>;\n}\n\nexport class ProgramMap {\n  public readonly blueprint: Blueprint;\n  public readonly shaders: ShaderMap;\n  public readonly buffers: BufferMap;\n  public readonly textures: TextureMap;\n  public readonly samplers: SamplerMap;\n  public readonly passes: PassMap;\n  public readonly bindings: BindingsMap;\n  public readonly bufferUsage: BufferUsageMap;\n  public readonly textureUsage: TextureUsageMap;\n  public readonly passOrder: NodeID[];\n\n  constructor(blueprint: Blueprint) {\n    this.blueprint = deepCopy(blueprint);\n    this.shaders = new Map(\n      Object.values(this.blueprint.shaders).map(s => [s.id, s])\n    );\n    this.buffers = new Map();\n    this.textures = new Map();\n    this.samplers = new Map();\n    this.passes = new Map();\n    this.bindings = new Map();\n    this.bufferUsage = new Map();\n    this.textureUsage = new Map();\n    this.passOrder = [];\n    this.populate_();\n  }\n\n  populate_() {\n    const bindingNodes = [];\n    const queueDeps = { incoming: new Map(), outgoing: new Map() };\n    for (const [id, node] of Object.entries(this.blueprint.nodes)) {\n      switch (node.type) {\n        case 'buffer':\n          this.buffers.set(id, node);\n          break;\n\n        case 'texture':\n          this.textures.set(id, node);\n          break;\n\n        case 'sampler':\n          this.samplers.set(id, node);\n          break;\n\n        case 'connection':\n          switch (node.connectionType) {\n            case 'binding':\n              bindingNodes.push(node);\n              break;\n\n            case 'queue':\n              const incoming = queueDeps.incoming.get(node.target) ?? new Set();\n              const outgoing = queueDeps.outgoing.get(node.source) ?? new Set();\n              incoming.add(node.source);\n              outgoing.add(node.target);\n              queueDeps.incoming.set(node.target, incoming);\n              queueDeps.outgoing.set(node.source, outgoing);\n              break;\n          }\n          break;\n\n        case 'compute':\n          this.passes.set(id, node);\n          break;\n\n        case 'render':\n          this.passes.set(id, node);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.populateBindings_(bindingNodes);\n    this.computePassOrder_(queueDeps);\n  }\n\n  populateBindings_(bindingNodes: BindingNode[]) {\n    for (const node of bindingNodes) {\n      const pass = this.passes.get(node.target);\n      if (!pass) {\n        console.warn(`ignoring unknown pass: ${node.target}`);\n        continue;\n      }\n      if (node.group >= kMaxBindGroups) {\n        console.warn(`invalid bind group ${node.group}`);\n        continue;\n      }\n      let groups = this.bindings.get(node.target);\n      if (!groups) {\n        groups = [];\n        this.bindings.set(node.target, groups);\n      }\n\n      const bindingNode = this.blueprint.nodes[node.source];\n      if (!bindingNode || bindingNode.type !== node.bindingType) {\n        console.warn(`ignoring unknown binding source ${node.source}`);\n        continue;\n      }\n      switch (node.bindingType) {\n        case 'buffer':\n          const buffer = this.buffers.get(bindingNode.id);\n          if (!buffer) {\n            console.warn(`ignoring unknown buffer: ${node.source}`);\n            continue;\n          }\n          this.compileBufferBinding_(pass.type, groups, buffer, node);\n          break;\n\n        case 'texture':\n          const texture = this.textures.get(bindingNode.id);\n          if (!texture) {\n            console.warn(`ignoring unknown texture: ${node.source}`);\n            continue;\n          }\n          this.compileTextureBinding_(pass.type, groups, texture, node);\n          break;\n\n        case 'sampler':\n          const sampler = this.samplers.get(bindingNode.id);\n          if (!sampler) {\n            console.warn(`ignoring unknown sampler: ${node.source}`);\n            continue;\n          }\n          this.compileSamplerBinding_(pass.type, groups, sampler, node);\n          break;\n      }\n    }\n  }\n\n  computePassOrder_(queueDeps: QueueDeps) {\n    // The initial working set is the set of all passes with no incoming queue\n    // dependencies.\n    const startNodes: Set<NodeID> = new Set(this.passes.keys());\n    for (const target of queueDeps.incoming.keys()) {\n      startNodes.delete(target);\n    }\n\n    // Iteratively append nodes as their dependencies are met.\n    let thisPhase = Array.from(startNodes);\n    while (thisPhase.length !== 0) {\n      this.passOrder.push(...thisPhase);\n      const nextPhase: NodeID[] = [];\n      for (const added of thisPhase) {\n        const targets = queueDeps.outgoing.get(added);\n        if (!targets) {\n          continue;\n        }\n        for (const target of targets.values()) {\n          const incomingDeps = queueDeps.incoming.get(target);\n          if (incomingDeps) {\n            incomingDeps.delete(added);\n            if (incomingDeps.size === 0) {\n              nextPhase.push(target);\n            }\n          }\n        }\n      }\n      thisPhase = nextPhase;\n    }\n  }\n\n  compileBufferBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    buffer: BufferNode,\n    binding: BufferBindingNode\n  ) {\n    let newUsage = 0;\n    let bufferType: GPUBufferBindingType;\n    switch (binding.storageType) {\n      case 'storage-read':\n        newUsage = GPUBufferUsage.STORAGE;\n        bufferType = 'read-only-storage';\n        break;\n\n      case 'storage':\n        newUsage = GPUBufferUsage.STORAGE;\n        bufferType = 'storage';\n        break;\n\n      case 'uniform':\n        newUsage = GPUBufferUsage.UNIFORM;\n        bufferType = 'uniform';\n        break;\n    }\n\n    this.bufferUsage.set(\n      buffer.id,\n      (this.bufferUsage.get(buffer.id) ?? 0) | newUsage\n    );\n\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      buffer: { type: bufferType },\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, buffer);\n  }\n\n  compileTextureBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    texture: TextureNode,\n    binding: TextureBindingNode\n  ) {\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      texture: {},\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, texture);\n  }\n\n  compileSamplerBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    sampler: SamplerNode,\n    binding: SamplerBindingNode\n  ) {\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      sampler: {},\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, sampler);\n  }\n}\n\nfunction addBindGroupEntry(\n  groups: BindGroup[],\n  group: number,\n  layoutEntry: GPUBindGroupLayoutEntry,\n  node: BindableNode\n) {\n  while (group >= groups.length) {\n    groups.push(new Map());\n  }\n  const binding = layoutEntry.binding;\n  const groupBindings = groups[group];\n  if (groupBindings.has(binding)) {\n    console.warn(`ignoring duplicate binding (${group}, ${binding})`);\n    return;\n  }\n  groupBindings.set(binding, { layoutEntry, node });\n}\n\nfunction visibilityForPass(passType: PassType): GPUShaderStageFlags {\n  if (passType === 'render') {\n    return GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT;\n  }\n  return GPUShaderStage.COMPUTE;\n}\n","import { objectPromiseAll } from '../../base/Util';\nimport { Blueprint } from '../Blueprint';\nimport { BufferCache, createBufferCache } from './BufferCache';\nimport { SamplerCache, createSamplerCache } from './SamplerCache';\nimport { ShaderCache, createShaderCache } from './ShaderCache';\nimport { TextureCache, createTextureCache } from './TextureCache';\nimport { ProgramMap } from './ProgramMap';\n\ninterface Caches {\n  readonly shaders: ShaderCache;\n  readonly buffers: BufferCache;\n  readonly textures: TextureCache;\n  readonly samplers: SamplerCache;\n}\n\nexport class ResourceBundle {\n  private device_: GPUDevice;\n  private lastCompile_: null | Promise<Caches>;\n  private caches_: Caches;\n  private programMap_: null | ProgramMap;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n    this.lastCompile_ = null;\n    this.caches_ = {\n      shaders: createShaderCache(device),\n      buffers: createBufferCache(device),\n      textures: createTextureCache(device),\n      samplers: createSamplerCache(device),\n    };\n    this.programMap_ = null;\n  }\n\n  dispose() {\n    this.caches_.shaders.dispose();\n    this.caches_.buffers.dispose();\n    this.caches_.textures.dispose();\n    this.caches_.samplers.dispose();\n  }\n\n  get programMap() {\n    return this.programMap_;\n  }\n\n  get shaders() {\n    return this.caches_.shaders;\n  }\n  get buffers() {\n    return this.caches_.buffers;\n  }\n  get textures() {\n    return this.caches_.textures;\n  }\n  get samplers() {\n    return this.caches_.samplers;\n  }\n\n  async update(blueprint: Blueprint) {\n    const programMap = new ProgramMap(blueprint);\n    const thisCompile = this.doCompile_(programMap);\n    this.lastCompile_ = thisCompile;\n    const newResources = await thisCompile;\n    if (this.lastCompile_ !== thisCompile) {\n      await this.lastCompile_!;\n      return;\n    }\n    this.programMap_ = programMap;\n    this.caches_.shaders.replace(newResources.shaders);\n    this.caches_.buffers.replace(newResources.buffers);\n    this.caches_.textures.replace(newResources.textures);\n    this.caches_.samplers.replace(newResources.samplers);\n  }\n\n  async doCompile_(programMap: ProgramMap): Promise<Caches> {\n    const shaders = this.caches_.shaders.compile(programMap);\n    const buffers = this.caches_.buffers.compile(programMap);\n    const textures = this.caches_.textures.compile(programMap);\n    const samplers = this.caches_.samplers.compile(programMap);\n    return await objectPromiseAll({ shaders, buffers, textures, samplers });\n  }\n}\n","import { ComputeNode, RenderNode } from '../Blueprint';\n\nexport type PassType = 'render' | 'compute';\n\nexport type LinkedPass = LinkedRenderPass | LinkedComputePass;\n\nexport interface LinkedRenderPass {\n  type: 'render';\n  node: RenderNode;\n  bundle: GPURenderBundle;\n}\n\nexport interface LinkedComputePass {\n  type: 'compute';\n  node: ComputeNode;\n  bindGroups: GPUBindGroup[];\n  pipeline: GPUComputePipeline;\n}\n\nexport class Executable {\n  private readonly device_: GPUDevice;\n  private readonly passes_: LinkedPass[];\n  private outputDepthStencilTexture_: null | GPUTexture;\n  private outputDepthStencilTextureSize_: GPUExtent3DDict;\n\n  constructor(device: GPUDevice, passes: LinkedPass[]) {\n    this.device_ = device;\n    this.passes_ = passes;\n    this.outputDepthStencilTexture_ = null;\n    this.outputDepthStencilTextureSize_ = { width: 0, height: 0 };\n  }\n\n  run(texture: GPUTexture, { width, height }: GPUExtent3DDict) {\n    const device = this.device_;\n\n    // TODO: configurable depth/stencil state\n    if (\n      this.outputDepthStencilTexture_ === null ||\n      this.outputDepthStencilTextureSize_.width !== width ||\n      this.outputDepthStencilTextureSize_.height !== height\n    ) {\n      if (this.outputDepthStencilTexture_ !== null) {\n        this.outputDepthStencilTexture_.destroy();\n        this.outputDepthStencilTexture_ = null;\n      }\n\n      this.outputDepthStencilTexture_ = device.createTexture({\n        size: { width, height },\n        format: 'depth24plus-stencil8',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      this.outputDepthStencilTextureSize_ = { width, height };\n    }\n\n    device.queue.submit([this.encodeCommands_(texture)]);\n  }\n\n  encodeCommands_(texture: GPUTexture) {\n    const encoder = this.device_.createCommandEncoder();\n    for (const pass of this.passes_) {\n      switch (pass.type) {\n        case 'render':\n          this.encodeRenderCommands_(pass, encoder, texture);\n          break;\n\n        case 'compute':\n          this.encodeComputeCommands_(pass, encoder);\n          break;\n      }\n    }\n    return encoder.finish();\n  }\n\n  encodeRenderCommands_(\n    pass: LinkedRenderPass,\n    encoder: GPUCommandEncoder,\n    texture: GPUTexture\n  ) {\n    const loadValue = pass.node.clear\n      ? pass.node.clearColor ?? { r: 0, g: 0, b: 0, a: 1 }\n      : ('load' as const);\n    const depthStencilTexture = this.outputDepthStencilTexture_!;\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: texture.createView(),\n          loadValue,\n          storeOp: 'store' as const,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthLoadValue: pass.node.clear ? 1 : 'load',\n        depthStoreOp: 'store',\n        stencilLoadValue: 1,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPass.executeBundles([pass.bundle]);\n    renderPass.endPass();\n  }\n\n  encodeComputeCommands_(pass: LinkedComputePass, encoder: GPUCommandEncoder) {\n    const computePass = encoder.beginComputePass();\n    const dispatchSize = pass.node.dispatchSize;\n    computePass.setPipeline(pass.pipeline);\n    pass.bindGroups.forEach((group, i) => {\n      computePass.setBindGroup(i, group);\n    });\n    computePass.dispatch(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n    computePass.endPass();\n  }\n}\n","import { Blueprint, ComputeNode, NodeID, RenderNode } from '../Blueprint';\nimport { ResourceBundle } from './ResourceBundle';\nimport {\n  LinkedComputePass,\n  LinkedPass,\n  LinkedRenderPass,\n  Executable,\n} from './Executable';\nimport { BindGroupEntry, PassNode } from './ProgramMap';\n\ninterface LinkedBindings {\n  pipelineLayout: GPUPipelineLayout;\n  bindGroups: GPUBindGroup[];\n}\n\nfunction getResourceForBinding(\n  entry: BindGroupEntry,\n  resources: ResourceBundle\n): null | GPUBindingResource {\n  const node = entry.node;\n  switch (node.type) {\n    case 'buffer':\n      const buffer = resources.buffers.get(node.id);\n      if (!buffer) {\n        console.warn(`unable to bind missing buffer ${node.name}`);\n        return null;\n      }\n      return { buffer: buffer.buffer };\n\n    case 'texture':\n      const texture = resources.textures.get(node.id);\n      if (!texture) {\n        console.warn(`unable to bind missing texture ${node.name}`);\n        return null;\n      }\n      return texture.texture.createView();\n\n    case 'sampler':\n      const sampler = resources.samplers.get(node.id);\n      if (!sampler) {\n        console.warn(`unable to bind missing sampler ${node.name}`);\n        return null;\n      }\n      return sampler.sampler;\n  }\n}\n\nfunction linkBindings(\n  passId: NodeID,\n  device: GPUDevice,\n  resources: ResourceBundle,\n  visibility: GPUShaderStageFlags,\n  builtinUniforms: GPUBuffer\n): LinkedBindings {\n  const groups = resources.programMap!.bindings.get(passId) ?? [];\n  const layoutEntries: GPUBindGroupLayoutEntry[][] = [];\n  const groupEntries: GPUBindGroupEntry[][] = [];\n  for (const group of groups) {\n    const newLayoutEntries: GPUBindGroupLayoutEntry[] = [];\n    const newGroupEntries: GPUBindGroupEntry[] = [];\n    for (const entry of group.values()) {\n      const resource = getResourceForBinding(entry, resources);\n      if (!resource) {\n        continue;\n      }\n\n      newLayoutEntries.push(entry.layoutEntry);\n      newGroupEntries.push({\n        binding: entry.layoutEntry.binding,\n        resource,\n      });\n    }\n    layoutEntries.push(newLayoutEntries);\n    groupEntries.push(newGroupEntries);\n  }\n\n  if (layoutEntries.length === 0) {\n    layoutEntries.push([]);\n    groupEntries.push([]);\n  }\n\n  layoutEntries[0].unshift({\n    binding: 0,\n    visibility,\n    buffer: { type: 'uniform' },\n  });\n  groupEntries[0].unshift({\n    binding: 0,\n    resource: { buffer: builtinUniforms },\n  });\n\n  const bindGroupLayouts: GPUBindGroupLayout[] = [];\n  const bindGroups: GPUBindGroup[] = [];\n  layoutEntries.forEach((entries, i) => {\n    const layout = device.createBindGroupLayout({ entries });\n    bindGroupLayouts.push(layout);\n    bindGroups.push(\n      device.createBindGroup({\n        layout,\n        entries: groupEntries[i],\n      })\n    );\n  });\n\n  const pipelineLayout = device.createPipelineLayout({ bindGroupLayouts });\n  return { pipelineLayout, bindGroups };\n}\n\nfunction linkRenderPass(\n  device: GPUDevice,\n  id: NodeID,\n  node: RenderNode,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: ResourceBundle,\n  blueprint: Blueprint\n): null | LinkedRenderPass {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const vertex = blueprint.shaders[node.vertexShader];\n  const fragment = blueprint.shaders[node.fragmentShader];\n  if (!vertex || !fragment) {\n    return null;\n  }\n  const vertexShader = resources.shaders.get(vertex.id);\n  const fragmentShader = resources.shaders.get(fragment.id);\n  if (\n    !vertexShader ||\n    !fragmentShader ||\n    !vertexShader.module ||\n    !fragmentShader.module\n  ) {\n    return null;\n  }\n\n  const bindings = linkBindings(\n    id,\n    device,\n    resources,\n    GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    builtinUniforms\n  );\n  const topology = node.topology ?? 'triangle-list';\n  const stripIndexFormat =\n    topology === 'line-strip' || topology === 'triangle-strip'\n      ? 'uint32'\n      : undefined;\n  const pipeline = device.createRenderPipeline({\n    layout: bindings.pipelineLayout,\n    vertex: {\n      module: vertexShader.module,\n      entryPoint: node.vertexEntryPoint,\n    },\n    primitive: {\n      topology,\n      stripIndexFormat,\n      cullMode: 'none',\n    },\n    fragment: {\n      targets: [{ format: outputFormat }],\n      module: fragmentShader.module,\n      entryPoint: node.fragmentEntryPoint,\n    },\n    depthStencil: {\n      format: 'depth24plus-stencil8',\n      depthWriteEnabled: true,\n      depthCompare: node.depthTest ?? 'always',\n    },\n  });\n  const encoder = device.createRenderBundleEncoder({\n    colorFormats: [outputFormat],\n    depthStencilFormat: 'depth24plus-stencil8',\n  });\n  encoder.setPipeline(pipeline);\n  bindings.bindGroups.forEach((group, i) => {\n    if (group) {\n      encoder.setBindGroup(i, group);\n    }\n  });\n  encoder.draw(node.numVertices, node.numInstances);\n  return {\n    type: 'render',\n    node,\n    bundle: encoder.finish(),\n  };\n}\n\nfunction linkComputePass(\n  device: GPUDevice,\n  id: NodeID,\n  node: ComputeNode,\n  builtinUniforms: GPUBuffer,\n  resources: ResourceBundle,\n  blueprint: Blueprint\n): null | LinkedComputePass {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const shaderDescriptor = blueprint.shaders[node.shader];\n  if (!shaderDescriptor) {\n    return null;\n  }\n  const shader = resources.shaders.get(shaderDescriptor.id);\n  if (!shader || !shader.module) {\n    return null;\n  }\n\n  const bindings = linkBindings(\n    id,\n    device,\n    resources,\n    GPUShaderStage.COMPUTE,\n    builtinUniforms\n  );\n  const pipeline = device.createComputePipeline({\n    layout: bindings.pipelineLayout,\n    compute: {\n      module: shader.module,\n      entryPoint: node.entryPoint,\n    },\n  });\n  return {\n    type: 'compute',\n    node,\n    bindGroups: bindings.bindGroups,\n    pipeline,\n  };\n}\n\nfunction linkPass(\n  device: GPUDevice,\n  id: NodeID,\n  node: PassNode,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: ResourceBundle,\n  blueprint: Blueprint\n): null | LinkedPass {\n  if (node.type === 'render') {\n    return linkRenderPass(\n      device,\n      id,\n      node,\n      builtinUniforms,\n      outputFormat,\n      resources,\n      blueprint\n    );\n  }\n  return linkComputePass(\n    device,\n    id,\n    node,\n    builtinUniforms,\n    resources,\n    blueprint\n  );\n}\n\nexport function linkProgram(\n  device: GPUDevice,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: ResourceBundle,\n  blueprint: Blueprint\n): null | Executable {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const passes = resources.programMap.passes;\n  const linkedPasses = resources.programMap.passOrder.map(id =>\n    linkPass(\n      device,\n      id,\n      passes.get(id)!,\n      builtinUniforms,\n      outputFormat,\n      resources,\n      blueprint\n    )\n  );\n  return new Executable(\n    device,\n    linkedPasses.filter(pass => pass !== null) as LinkedPass[]\n  );\n}\n","import { Blueprint, ShaderID } from '../Blueprint';\nimport { ResourceBundle } from './ResourceBundle';\nimport { Executable } from './Executable';\nimport { linkProgram } from './Linker';\nimport { ShaderCompilationMessage } from './ShaderCache';\n\nexport type ShaderCompilationResults = Map<\n  ShaderID,\n  ShaderCompilationMessage[]\n>;\n\nexport type ShadersCompiledHandler = (\n  results: ShaderCompilationResults\n) => void;\n\nexport class Program {\n  private readonly device_: GPUDevice;\n  private readonly builtinUniforms_: GPUBuffer;\n  private resources_: ResourceBundle;\n  private executable_: null | Executable;\n  private blueprint_: null | Blueprint;\n  private outputFormat_: GPUTextureFormat;\n  private onShadersCompiled_: null | ShadersCompiledHandler;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n    this.builtinUniforms_ = device.createBuffer({\n      size: 24,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    this.executable_ = null;\n    this.blueprint_ = null;\n    this.resources_ = new ResourceBundle(device);\n    this.outputFormat_ = 'bgra8unorm';\n    this.onShadersCompiled_ = null;\n  }\n\n  get resources() {\n    return this.resources_;\n  }\n\n  set onShadersCompiled(handler: null | ShadersCompiledHandler) {\n    this.onShadersCompiled_ = handler;\n  }\n\n  dispose() {\n    this.builtinUniforms_.destroy();\n    this.resources_.dispose();\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    this.blueprint_ = blueprint;\n    this.compile_();\n  }\n\n  updateUniforms(uniforms: Record<string, any>) {\n    const device = this.device_;\n    const data = new ArrayBuffer(24);\n    const floats = new Float32Array(data);\n    const uints = new Uint32Array(data);\n    floats[0] = (uniforms['time'] as number) ?? 0;\n    floats[1] = (uniforms['timeDelta'] as number) ?? 0;\n    uints[2] = (uniforms['frame'] as number) ?? 0;\n    uints[4] = uniforms['resolution']?.width ?? 1;\n    uints[5] = uniforms['resolution']?.height ?? 1;\n    device.queue.writeBuffer(this.builtinUniforms_, 0, data, 0, 24);\n  }\n\n  run(\n    texture: GPUTexture,\n    resolution: GPUExtent3DDict,\n    outputFormat: GPUTextureFormat\n  ) {\n    if (this.outputFormat_ !== outputFormat && this.blueprint_ !== null) {\n      this.executable_ = null;\n      this.outputFormat_ = outputFormat;\n      this.compile_();\n      return;\n    }\n\n    if (this.executable_ === null) {\n      return;\n    }\n\n    this.executable_.run(texture, resolution);\n  }\n\n  async compile_() {\n    const blueprint = this.blueprint_!;\n    await this.resources_.update(blueprint);\n    if (this.onShadersCompiled_) {\n      const results = new Map();\n      for (const [id, shader] of this.resources_.shaders.entries()) {\n        results.set(id, shader.messages);\n      }\n      this.onShadersCompiled_(results);\n    }\n    this.executable_ = linkProgram(\n      this.device_,\n      this.builtinUniforms_,\n      this.outputFormat_,\n      this.resources_,\n      blueprint\n    );\n  }\n}\n","import { deepCopy, deepEquals } from '../base/Util';\nimport { Blueprint } from './Blueprint';\nimport { Gpu } from './Gpu';\nimport { Program, ShadersCompiledHandler } from './program/Program';\n\nconst getContextFromCanvas = (\n  canvas: HTMLCanvasElement\n): null | GPUCanvasContext => {\n  return canvas.getContext('webgpu') as null | GPUCanvasContext;\n};\n\nexport class FrameProducer {\n  private gpu_: Gpu;\n\n  private lastUsedContext_?: GPUCanvasContext;\n  private lastUsedResolution_?: GPUExtent3DDict;\n\n  private startTime_?: number;\n  private lastFrameTime_?: number;\n  private frame_: number;\n\n  private blueprint_: null | Blueprint;\n  private program_: null | Program;\n\n  private onShadersCompiled_?: ShadersCompiledHandler;\n\n  constructor() {\n    this.gpu_ = new Gpu();\n    this.gpu_.onAcquired = this.onGpuAcquired_;\n    this.frame_ = 0;\n    this.blueprint_ = null;\n    this.program_ = null;\n  }\n\n  reconfigure() {}\n\n  set onShadersCompiled(handler: ShadersCompiledHandler) {\n    this.onShadersCompiled_ = handler;\n    if (this.program_) {\n      this.program_.onShadersCompiled = handler;\n    }\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    if (this.blueprint_ && deepEquals(this.blueprint_, blueprint)) {\n      return;\n    }\n\n    this.blueprint_ = deepCopy(blueprint);\n    if (this.program_) {\n      this.program_.setBlueprint(blueprint);\n    }\n  }\n\n  stop() {\n    this.blueprint_ = null;\n    this.program_ = null;\n  }\n\n  render(canvas: HTMLCanvasElement, resolution: GPUExtent3DDict) {\n    if (!this.gpu_ || !this.gpu_.isAcquired || !this.program_) {\n      return;\n    }\n\n    const context = getContextFromCanvas(canvas);\n    if (context === null) {\n      this.stop();\n      throw new Error('no webgpu context');\n    }\n\n    const device = this.gpu_.device!;\n    const outputFormat: GPUTextureFormat = context.getPreferredFormat(\n      this.gpu_.adapter!\n    );\n\n    if (\n      !this.lastUsedContext_ ||\n      !this.lastUsedResolution_ ||\n      this.lastUsedContext_ !== context ||\n      this.lastUsedResolution_.width !== resolution.width ||\n      this.lastUsedResolution_.height !== resolution.height\n    ) {\n      context.configure({\n        device,\n        format: outputFormat,\n        size: { ...resolution },\n      });\n      this.lastUsedResolution_ = { ...resolution };\n    }\n\n    // This is an egregious hack to get consistent nearest-neighbor filtering on\n    // a scaled-up canvas texture in Chrome. See crbug.com/1044590.\n    canvas.style.filter = 'blur(0px)';\n\n    const now = new Date().getTime();\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n    const delta = now - (this.lastFrameTime_ ?? now);\n    this.lastFrameTime_ = now;\n\n    this.program_.updateUniforms({\n      time: (now - this.startTime_) / 1000,\n      timeDelta: delta / 1000,\n      frame: this.frame_++,\n      resolution,\n    });\n    this.program_.run(context.getCurrentTexture(), resolution, outputFormat);\n  }\n\n  onGpuAcquired_ = () => {\n    if (this.program_) {\n      this.program_.dispose();\n    }\n    this.program_ = new Program(this.gpu_.device!);\n    if (this.blueprint_) {\n      this.program_.setBlueprint(this.blueprint_);\n    }\n    if (this.onShadersCompiled_) {\n      this.program_.onShadersCompiled = this.onShadersCompiled_;\n    }\n  };\n}\n","import 'codemirror/theme/3024-day.css';\nimport 'codemirror/theme/3024-night.css';\nimport 'codemirror/theme/abbott.css';\nimport 'codemirror/theme/abcdef.css';\nimport 'codemirror/theme/ambiance-mobile.css';\nimport 'codemirror/theme/ambiance.css';\nimport 'codemirror/theme/ayu-dark.css';\nimport 'codemirror/theme/ayu-mirage.css';\nimport 'codemirror/theme/base16-dark.css';\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/bespin.css';\nimport 'codemirror/theme/blackboard.css';\nimport 'codemirror/theme/cobalt.css';\nimport 'codemirror/theme/colorforth.css';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/duotone-dark.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/theme/elegant.css';\nimport 'codemirror/theme/erlang-dark.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/theme/hopscotch.css';\nimport 'codemirror/theme/icecoder.css';\nimport 'codemirror/theme/idea.css';\nimport 'codemirror/theme/isotope.css';\nimport 'codemirror/theme/juejin.css';\nimport 'codemirror/theme/lesser-dark.css';\nimport 'codemirror/theme/liquibyte.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/theme/material-darker.css';\nimport 'codemirror/theme/material-ocean.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/mbo.css';\nimport 'codemirror/theme/mdn-like.css';\nimport 'codemirror/theme/midnight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/moxer.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/theme/neo.css';\nimport 'codemirror/theme/night.css';\nimport 'codemirror/theme/nord.css';\nimport 'codemirror/theme/oceanic-next.css';\nimport 'codemirror/theme/panda-syntax.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/paraiso-light.css';\nimport 'codemirror/theme/pastel-on-dark.css';\nimport 'codemirror/theme/railscasts.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/theme/seti.css';\nimport 'codemirror/theme/shadowfox.css';\nimport 'codemirror/theme/solarized.css';\nimport 'codemirror/theme/ssms.css';\nimport 'codemirror/theme/the-matrix.css';\nimport 'codemirror/theme/tomorrow-night-bright.css';\nimport 'codemirror/theme/tomorrow-night-eighties.css';\nimport 'codemirror/theme/ttcn.css';\nimport 'codemirror/theme/twilight.css';\nimport 'codemirror/theme/vibrant-ink.css';\nimport 'codemirror/theme/xq-dark.css';\nimport 'codemirror/theme/xq-light.css';\nimport 'codemirror/theme/yeti.css';\nimport 'codemirror/theme/yonce.css';\nimport 'codemirror/theme/zenburn.css';\n\nexport const CODE_MIRROR_THEMES = [\n  '3024-day',\n  '3024-night',\n  'abbott',\n  'abcdef',\n  'ambiance-mobile',\n  'ambiance',\n  'ayu-dark',\n  'ayu-mirage',\n  'base16-dark',\n  'base16-light',\n  'bespin',\n  'blackboard',\n  'cobalt',\n  'colorforth',\n  'darcula',\n  'dracula',\n  'duotone-dark',\n  'duotone-light',\n  'eclipse',\n  'elegant',\n  'erlang-dark',\n  'gruvbox-dark',\n  'hopscotch',\n  'icecoder',\n  'idea',\n  'isotope',\n  'juejin',\n  'lesser-dark',\n  'liquibyte',\n  'lucario',\n  'material-darker',\n  'material-ocean',\n  'material-palenight',\n  'material',\n  'mbo',\n  'mdn-like',\n  'midnight',\n  'monokai',\n  'moxer',\n  'neat',\n  'neo',\n  'night',\n  'nord',\n  'oceanic-next',\n  'panda-syntax',\n  'paraiso-dark',\n  'paraiso-light',\n  'pastel-on-dark',\n  'railscasts',\n  'rubyblue',\n  'seti',\n  'shadowfox',\n  'solarized',\n  'ssms',\n  'the-matrix',\n  'tomorrow-night-bright',\n  'tomorrow-night-eighties',\n  'ttcn',\n  'twilight',\n  'vibrant-ink',\n  'xq-dark',\n  'xq-light',\n  'yeti',\n  'yonce',\n  'zenburn',\n];\n","import './LabeledField.css';\n\nimport React from 'react';\n\ninterface Props {\n  label: string;\n  children: React.ReactNode;\n}\n\nexport const LabeledField = ({ label, children }: Props) => {\n  return (\n    <div className=\"LabeledField\">\n      <div className=\"Label\">{label}</div>\n      <div className=\"Field\">{children}</div>\n    </div>\n  );\n};\n","import './ControlPanel.css';\n\nimport React from 'react';\n\nimport {\n  Blueprint,\n  deserializeBlueprint,\n  serializeBlueprint,\n  SerializedBlueprint,\n} from '../gpu/Blueprint';\nimport { CODE_MIRROR_THEMES } from './CodeMirrorThemes';\nimport { DisplayConfig } from './Display';\nimport { LabeledField } from './LabeledField';\n\ninterface Props {\n  blueprint: Blueprint;\n  displayConfig: DisplayConfig;\n  onDisplayConfigChange: (change: Partial<DisplayConfig>) => void;\n  savedBlueprints: Record<string, SerializedBlueprint>;\n  onSaveBlueprint: (name: string) => void;\n  onLoadBlueprint: (name: string) => void;\n  onImportBlueprint: (blueprint: SerializedBlueprint) => void;\n  onDeleteBlueprint: (name: string) => void;\n  codeMirrorTheme: string;\n  onCodeMirrorThemeChange: (name: string) => void;\n}\n\ninterface State {\n  optionsVisible: boolean;\n  loadMenuVisible: boolean;\n  pasteMenuVisible: boolean;\n}\n\nexport class ControlPanel extends React.Component<Props, State> {\n  private pixelSizeToggleRef_: React.RefObject<HTMLInputElement>;\n  private pixelSizeRef_: React.RefObject<HTMLInputElement>;\n  private framebufferWidthRef_: React.RefObject<HTMLInputElement>;\n  private framebufferHeightRef_: React.RefObject<HTMLInputElement>;\n  private importRef_: React.RefObject<HTMLTextAreaElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      optionsVisible: false,\n      loadMenuVisible: false,\n      pasteMenuVisible: false,\n    };\n\n    this.pixelSizeToggleRef_ = React.createRef();\n    this.pixelSizeRef_ = React.createRef();\n    this.framebufferWidthRef_ = React.createRef();\n    this.framebufferHeightRef_ = React.createRef();\n    this.importRef_ = React.createRef();\n  }\n\n  render() {\n    const displayConfig = this.props.displayConfig;\n    const makeAspectOption = (ratio: string) => (\n      <label>\n        <input\n          type=\"radio\"\n          name=\"aspect\"\n          value={ratio}\n          onChange={this.setAspectRatio_}\n          checked={ratio === displayConfig.aspect}\n        />\n        {ratio}\n      </label>\n    );\n\n    return (\n      <div className=\"ControlPanel\">\n        <button\n          className=\"Toggle\"\n          title=\"Options\"\n          onClick={this.toggleOptions_}\n        >\n          ⚙️\n        </button>\n        <button\n          className=\"Toggle\"\n          title=\"Toggle Fullscreen\"\n          onClick={this.enterFullscreen_}\n        >\n          🖥️\n        </button>\n        {this.state.optionsVisible && (\n          <div className=\"OptionsPanel\">\n            <h1>Display Options</h1>\n            <h2>Aspect Ratio</h2>\n            {makeAspectOption('None')}\n            {makeAspectOption('1:1')}\n            {makeAspectOption('4:3')}\n            {makeAspectOption('16:9')}\n            {makeAspectOption('16:10')}\n            <h2>Resolution</h2>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"pixel\"\n                ref={this.pixelSizeToggleRef_}\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'pixel'}\n              />\n              Fixed Pixel Size\n              <input\n                type=\"number\"\n                name=\"pixelSize\"\n                value={displayConfig.resolution.pixelSize ?? 1}\n                ref={this.pixelSizeRef_}\n                style={{ width: '3em', marginLeft: '1em' }}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"framebuffer\"\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'framebuffer'}\n              />\n              Fixed Framebuffer Size\n              <input\n                type=\"text\"\n                name=\"framebufferWidth\"\n                style={{ width: '4em', marginLeft: '1em' }}\n                ref={this.framebufferWidthRef_}\n                value={displayConfig.resolution.framebufferSize?.width ?? 4}\n                onChange={this.updateResolution_}\n              />\n              x\n              <input\n                type=\"text\"\n                name=\"framebufferHeight\"\n                style={{ width: '4em' }}\n                ref={this.framebufferHeightRef_}\n                value={displayConfig.resolution.framebufferSize?.height ?? 4}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <h1>Editor Options</h1>\n            <LabeledField label=\"Theme\">\n              <select\n                value={this.props.codeMirrorTheme}\n                onChange={e =>\n                  this.props.onCodeMirrorThemeChange(e.currentTarget.value)\n                }\n              >\n                {CODE_MIRROR_THEMES.map(theme => {\n                  return (\n                    <option key={theme} value={theme}>\n                      {theme}\n                    </option>\n                  );\n                })}\n              </select>\n            </LabeledField>\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.saveBlueprint_}\n          title=\"Save Blueprint\"\n        >\n          💾\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.toggleLoadBlueprintPanel_}\n          title=\"Load Blueprint\"\n        >\n          📂\n        </button>\n        {this.state.loadMenuVisible && (\n          <div className=\"LoadBlueprintPanel\">\n            <h1>Saved Shaders</h1>\n            {Object.entries(this.props.savedBlueprints).map(\n              ([name, blueprint]) => {\n                return (\n                  <div key={name} className=\"LoadMenuItem\">\n                    <div\n                      className=\"LoadMenuName\"\n                      onClick={() => this.loadBlueprint_(name)}\n                    >\n                      {name}\n                    </div>\n                    <button\n                      className=\"LoadMenuRemove\"\n                      onClick={() => this.deleteBlueprint_(name)}\n                    >\n                      x\n                    </button>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.copyBlueprintToClipboard_}\n          title=\"Copy Blueprint To Clipboard\"\n        >\n          📋\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.togglePasteMenu_}\n          title=\"Paste Blueprint From Clipboard\"\n        >\n          ⬇\n        </button>\n        {this.state.pasteMenuVisible && (\n          <div className=\"PasteBlueprintPanel\">\n            <h1>Import From Clipboard</h1>\n            Paste it here:\n            <textarea ref={this.importRef_} />\n            <button title=\"Import\" onClick={this.importBlueprintFromClipboard_}>\n              Import\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  saveBlueprint_ = () => {\n    const name = prompt('Name it!');\n    if (name === null || name === '') {\n      return;\n    }\n\n    this.props.onSaveBlueprint(name);\n  };\n\n  loadBlueprint_ = (name: string) => {\n    this.props.onLoadBlueprint(name);\n    this.toggleLoadBlueprintPanel_();\n  };\n\n  copyBlueprintToClipboard_ = async () => {\n    navigator.clipboard.writeText(\n      JSON.stringify(\n        await serializeBlueprint(this.props.blueprint, { serializeBlobs: true })\n      )\n    );\n  };\n\n  importBlueprintFromClipboard_ = () => {\n    this.togglePasteMenu_();\n\n    if (!this.importRef_.current) {\n      return;\n    }\n\n    const serializedBlueprint = this.importRef_.current.value;\n    const serialized = JSON.parse(\n      serializedBlueprint\n    ) as null | SerializedBlueprint;\n    if (!serialized) {\n      return;\n    }\n\n    this.props.onImportBlueprint(deserializeBlueprint(serialized));\n  };\n\n  togglePasteMenu_ = () => {\n    this.setState((state, props) => ({\n      pasteMenuVisible: !state.pasteMenuVisible,\n    }));\n  };\n\n  deleteBlueprint_ = (name: string) => {\n    this.props.onDeleteBlueprint(name);\n  };\n\n  toggleLoadBlueprintPanel_ = () => {\n    this.setState((state, props) => ({\n      loadMenuVisible: !state.loadMenuVisible,\n    }));\n  };\n\n  toggleOptions_ = () => {\n    this.setState((state, props) => ({\n      optionsVisible: !state.optionsVisible,\n    }));\n  };\n\n  enterFullscreen_ = async () => {\n    document.querySelector('canvas')!.requestFullscreen();\n  };\n\n  setAspectRatio_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onDisplayConfigChange({ aspect: e.currentTarget.value });\n    this.toggleOptions_();\n  };\n\n  updateResolution_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const target = e.currentTarget!;\n    if (\n      target === this.pixelSizeToggleRef_.current ||\n      target.name === 'pixelSize'\n    ) {\n      const pixelSize = parseInt(this.pixelSizeRef_.current!.value);\n      if (!isNaN(pixelSize)) {\n        this.props.onDisplayConfigChange({\n          resolution: {\n            mode: 'pixel',\n            pixelSize,\n          },\n        });\n      }\n      return;\n    }\n\n    const framebufferSize = {\n      width: parseInt(this.framebufferWidthRef_.current!.value),\n      height: parseInt(this.framebufferHeightRef_.current!.value),\n    };\n    if (isNaN(framebufferSize.width) || isNaN(framebufferSize.height)) {\n      return;\n    }\n\n    this.props.onDisplayConfigChange({\n      resolution: {\n        mode: 'framebuffer',\n        framebufferSize,\n      },\n    });\n  };\n}\n","import './Display.css';\n\nimport React from 'react';\n\nexport interface DisplayConfig {\n  aspect: string;\n  resolution: {\n    mode: 'pixel' | 'framebuffer';\n    pixelSize?: number;\n    framebufferSize?: { width: number; height: number };\n  };\n}\n\ninterface Props {\n  render: (canvas: HTMLCanvasElement) => void;\n  config: DisplayConfig;\n}\n\nexport class Display extends React.Component<Props> {\n  private wrapperRef_: React.RefObject<HTMLDivElement>;\n  private canvasRef_: React.RefObject<HTMLCanvasElement>;\n  private pendingFrameRequest_: null | number;\n\n  constructor(props: Props) {\n    super(props);\n    this.wrapperRef_ = React.createRef();\n    this.canvasRef_ = React.createRef();\n    this.pendingFrameRequest_ = null;\n  }\n\n  componentDidMount() {\n    const renderNextFrame = () => {\n      const wrapper = this.wrapperRef_.current!;\n      const canvas = this.canvasRef_.current!;\n      const width = wrapper.clientWidth;\n      const height = wrapper.clientHeight;\n      if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n      }\n      this.props.render(canvas);\n      this.pendingFrameRequest_ = requestAnimationFrame(renderNextFrame);\n    };\n\n    renderNextFrame();\n  }\n\n  componentWillUnmount() {\n    if (this.pendingFrameRequest_ !== null) {\n      cancelAnimationFrame(this.pendingFrameRequest_);\n      this.pendingFrameRequest_ = null;\n    }\n  }\n\n  render() {\n    const config = this.props.config;\n    const [aspectX, aspectY] = config.aspect.split(':').map(s => parseInt(s));\n    const stretch = isNaN(aspectX) || isNaN(aspectY);\n    const computedWrapperStyle: React.CSSProperties = {\n      height: stretch ? '100%' : 'auto',\n      aspectRatio: stretch ? 'auto' : `${aspectX}/${aspectY}`,\n    };\n    return (\n      <div className=\"Display\">\n        <div\n          ref={this.wrapperRef_}\n          className=\"CanvasWrapper\"\n          style={computedWrapperStyle}\n        >\n          <canvas ref={this.canvasRef_} />\n        </div>\n      </div>\n    );\n  }\n}\n","import './EditableLabel.css';\n\nimport React from 'react';\n\ninterface Props {\n  value: string;\n  enabled?: boolean;\n  emptyText?: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n  isEditing: boolean;\n}\n\nexport class EditableLabel extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value ?? '',\n      isEditing: false,\n    };\n  }\n\n  render() {\n    const isEmpty = this.state.value === '';\n    const isEditing = this.state.isEditing;\n    const editingClass = isEditing ? 'Editing' : 'NotEditing';\n    const emptyClass = isEmpty ? 'Empty' : 'NotEmpty';\n    const defaultValue = !isEmpty\n      ? this.state.value\n      : this.props.emptyText ?? '';\n    return (\n      <input\n        className={`EditableLabel ${editingClass} ${emptyClass}`}\n        type=\"text\"\n        onKeyDown={this.onKeyDown_}\n        onBlur={this.onFocusOut_}\n        defaultValue={defaultValue}\n        readOnly={!isEditing}\n        onClick={this.onClick_}\n        autoFocus\n      />\n    );\n  }\n\n  onClick_ = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.enabled === false) {\n      return;\n    }\n    this.setState({ isEditing: true });\n  };\n\n  commit_ = (untrimmedValue: string) => {\n    const value = untrimmedValue.trim();\n    if (value === '') {\n      this.setState({ isEditing: false });\n      return;\n    }\n    this.setState({ value, isEditing: false });\n    this.props.onChange(value);\n  };\n\n  onKeyDown_ = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      this.commit_(e.currentTarget.value);\n    } else if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  };\n\n  onFocusOut_ = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.commit_(e.currentTarget.value);\n  };\n}\n","import './NodePanel.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { Blueprint, Node } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\n\ntype UpdateFn<NodeType extends Node> = (update: Partial<NodeType>) => void;\n\ninterface NodePanelData<NodeType extends Node> {\n  blueprint: Blueprint;\n  node: NodeType;\n  onChange: UpdateFn<NodeType>;\n  destroy: () => void;\n}\n\nexport interface NodePanelProps<NodeType extends Node> {\n  data: NodePanelData<NodeType>;\n}\n\ninterface Props {\n  title?: string;\n  className?: string;\n  node: Node;\n  onRename?: (name: string) => void;\n  destroy: () => void;\n  children?: ReactNode;\n}\n\nexport const NodePanel = (props: Props) => {\n  return (\n    <div className={`Node Node-${props.node.type} ${props.className}`}>\n      <button className=\"RemoveButton\" onClick={props.destroy}></button>\n      <div className=\"Title\">{props.title}</div>\n      <div className=\"Content\">\n        {props.onRename ? (\n          <LabeledField label=\"Name\">\n            <EditableLabel value={props.node.name} onChange={props.onRename} />\n          </LabeledField>\n        ) : (\n          <div />\n        )}\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","import { Connection } from 'react-flow-renderer';\n\nimport { Blueprint, Node, NodeID } from '../../gpu/Blueprint';\n\ninterface ConnectionData {\n  source: Node;\n  target: Node;\n  sourceName: NodeID;\n  targetName: NodeID;\n  targetHandle: string;\n}\n\nfunction resolveConnection(\n  c: Connection,\n  blueprint: Blueprint\n): null | ConnectionData {\n  if (!c.source || !c.target) {\n    return null;\n  }\n\n  const source = blueprint.nodes[c.source];\n  const target = blueprint.nodes[c.target];\n  if (!source || !target || !c.targetHandle) {\n    return null;\n  }\n\n  return {\n    source,\n    target,\n    sourceName: c.source,\n    targetName: c.target,\n    targetHandle: c.targetHandle,\n  };\n}\n\nexport function isValidBindingConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (\n    data.source.type !== 'buffer' &&\n    data.source.type !== 'texture' &&\n    data.source.type !== 'sampler'\n  ) {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  if (data.targetHandle !== 'bindings') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: Node) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'binding' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n\nexport function isValidQueueConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (data.source.type !== 'render' && data.source.type !== 'compute') {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: Node) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'queue' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { BufferInitializer, BufferNode } from '../../gpu/Blueprint';\nimport { LabeledField } from '../LabeledField';\nimport { NodePanel, NodePanelProps } from './NodePanel';\nimport { isValidBindingConnection } from './Validation';\n\nexport const BufferNodePanel = (props: NodePanelProps<BufferNode>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <NodePanel\n      title=\"Buffer\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Size\">\n          <input\n            type=\"number\"\n            value={node.size}\n            style={{ width: '5em', textAlign: 'right' }}\n            onChange={e =>\n              data.onChange({ size: e.currentTarget.valueAsNumber })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Init\">\n          <select\n            value={node.init}\n            style={{ width: '9em' }}\n            onChange={e =>\n              data.onChange({\n                init: e.currentTarget.value as BufferInitializer,\n              })\n            }\n          >\n            <option value=\"zero\">Zero</option>\n            <option value=\"random-floats\">Random Floats</option>\n            <option value=\"random-uints\">Random Uints</option>\n          </select>\n        </LabeledField>\n      </div>\n    </NodePanel>\n  );\n};\n","type Closure = () => void;\n\nexport class Debouncer {\n  private minDelayMs_: number;\n  private lastInvocationMs_: null | number;\n  private pendingInvocation_: null | ReturnType<typeof setTimeout>;\n\n  constructor(minDelayMs: number) {\n    this.minDelayMs_ = minDelayMs;\n    this.lastInvocationMs_ = null;\n    this.pendingInvocation_ = null;\n  }\n\n  invoke(f: Closure) {\n    if (this.onCooldown()) {\n      this.scheduleSuppressed(f);\n      return;\n    }\n\n    this.invokeInternal(f);\n  }\n\n  private clearPendingInvocation() {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    this.pendingInvocation_ = null;\n  }\n\n  private invokeInternal(f: Closure) {\n    this.clearPendingInvocation();\n    this.lastInvocationMs_ = Date.now();\n    f();\n  }\n\n  private onCooldown(): boolean {\n    if (this.lastInvocationMs_ === null) {\n      return false;\n    }\n    return Date.now() - this.lastInvocationMs_ < this.minDelayMs_;\n  }\n\n  private scheduleSuppressed(f: Closure) {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    const delay = this.lastInvocationMs_! + this.minDelayMs_ - Date.now();\n    this.pendingInvocation_ = setTimeout(this.invoke.bind(this, f), delay);\n  }\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { Debouncer } from '../../base/Debouncer';\nimport { RenderNode } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { NodePanel, NodePanelProps } from './NodePanel';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nfunction colorValue(c: GPUColorDict): string {\n  const p = (x: number) => `${x < 16 ? '0' : ''}${x.toString(16)}`;\n  const cp = [c.r, c.g, c.b].map(c => p(c * 255));\n  return `#${cp.join('')}`;\n}\n\nfunction parseColor(value: string): GPUColorDict {\n  const parseComponent = (index: number) =>\n    parseInt(value.slice(index, index + 2), 16) / 255;\n  return {\n    r: parseComponent(1),\n    g: parseComponent(3),\n    b: parseComponent(5),\n    a: 1,\n  };\n}\n\nexport const RenderNodePanel = (props: NodePanelProps<RenderNode>) => {\n  const data = props.data;\n  const node = data.node;\n  const debouncer = new Debouncer(30);\n  return (\n    <NodePanel\n      title=\"Render Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n\n        <LabeledField label=\"Vertex Shader\">\n          <select\n            value={node.vertexShader}\n            onChange={e =>\n              data.onChange({ vertexShader: e.currentTarget.value })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Vertex Entry Point\">\n          <EditableLabel\n            value={node.vertexEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ vertexEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Fragment Shader\">\n          <select\n            value={node.fragmentShader}\n            onChange={e =>\n              data.onChange({\n                fragmentShader: e.currentTarget.value,\n              })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Fragment Entry Point\">\n          <EditableLabel\n            value={node.fragmentEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ fragmentEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Topology\">\n          <select\n            value={node.topology ?? 'triangle-list'}\n            onChange={e =>\n              data.onChange({\n                topology: e.currentTarget.value as GPUPrimitiveTopology,\n              })\n            }\n          >\n            <option value=\"point-list\">Point List</option>\n            <option value=\"line-list\">Line List</option>\n            <option value=\"line-strip\">Line Strip</option>\n            <option value=\"triangle-list\">Triangle List</option>\n            <option value=\"triangle-strip\">Triangle Strip</option>\n          </select>\n        </LabeledField>\n        <LabeledField label=\"# Vertices\">\n          <input\n            type=\"number\"\n            value={node.numVertices}\n            onChange={e =>\n              data.onChange({\n                numVertices: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"# Instances\">\n          <input\n            type=\"number\"\n            value={node.numInstances}\n            onChange={e =>\n              data.onChange({\n                numInstances: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear\">\n          <input\n            type=\"checkbox\"\n            checked={node.clear ?? false}\n            onChange={e => data.onChange({ clear: !node.clear })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear Color\">\n          <input\n            type=\"color\"\n            value={colorValue(node.clearColor ?? { r: 0, g: 0, b: 0, a: 1 })}\n            onChange={e =>\n              debouncer.invoke(() =>\n                data.onChange({ clearColor: parseColor(e.currentTarget.value) })\n              )\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Depth Test\">\n          <select\n            value={node.depthTest ?? 'always'}\n            onChange={e =>\n              data.onChange({\n                depthTest: e.currentTarget.value as GPUCompareFunction,\n              })\n            }\n          >\n            <option value=\"never\">Never Pass</option>\n            <option value=\"less\">&lt;</option>\n            <option value=\"less-equal\">&lt;=</option>\n            <option value=\"equal\">=</option>\n            <option value=\"greater-equal\">&gt;=</option>\n            <option value=\"greater\">&gt;</option>\n            <option value=\"not-equal\">≠</option>\n            <option value=\"always\">Always Pass</option>\n          </select>\n        </LabeledField>\n      </div>\n    </NodePanel>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureNode } from '../../gpu/Blueprint';\nimport { NodePanel, NodePanelProps } from './NodePanel';\nimport { isValidBindingConnection } from './Validation';\n\nfunction getSelectedFile(input: HTMLInputElement): null | File {\n  if (!input.files || input.files.length === 0) {\n    return null;\n  }\n\n  return input.files[0];\n}\n\nasync function updateCanvasImage(\n  canvas: null | HTMLCanvasElement,\n  data: null | Blob\n) {\n  if (!canvas || !data) {\n    return;\n  }\n\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n\n  const image = await createImageBitmap(data);\n  if (!image) {\n    return;\n  }\n\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, 128, 128);\n}\n\ntype CanvasRef = React.RefObject<HTMLCanvasElement>;\n\nexport const TextureNodePanel = (props: NodePanelProps<TextureNode>) => {\n  const data = props.data;\n  const node = data.node;\n  const canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const ref = canvasRef as CanvasRef;\n    if (ref.current && node.imageData instanceof Blob) {\n      updateCanvasImage(ref.current, node.imageData);\n    }\n  });\n\n  return (\n    <NodePanel\n      title=\"Texture\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"TextureDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={e => {\n            const file = getSelectedFile(e.currentTarget);\n            if (file) {\n              data.onChange({ imageData: file });\n            }\n          }}\n        />\n        <canvas\n          id={node.name}\n          ref={canvasRef as CanvasRef}\n          className=\"Preview\"\n          width={128}\n          height={128}\n        />\n      </div>\n    </NodePanel>\n  );\n};\n","import './BlueprintEditor.css';\n\nimport React from 'react';\nimport ReactFlow, {\n  ArrowHeadType,\n  Connection,\n  Edge,\n  FlowElement,\n  Node as FlowNode,\n  OnLoadParams,\n  XYPosition,\n} from 'react-flow-renderer';\n\nimport {\n  Blueprint,\n  BufferBindingStorageType,\n  Node,\n  NodeID,\n  ShaderID,\n} from '../gpu/Blueprint';\nimport { BufferBindingNodePanel } from './graph/BufferBindingNodePanel';\nimport { BufferNodePanel } from './graph/BufferNodePanel';\nimport { ComputeNodePanel } from './graph/ComputeNodePanel';\nimport { CustomEdge } from './graph/CustomEdge';\nimport { RenderNodePanel } from './graph/RenderNodePanel';\nimport { SamplerBindingNodePanel } from './graph/SamplerBindingNodePanel';\nimport { SamplerNodePanel } from './graph/SamplerNodePanel';\nimport { TextureBindingNodePanel } from './graph/TextureBindingNodePanel';\nimport { TextureNodePanel } from './graph/TextureNodePanel';\n\nconst NODE_TYPES = {\n  buffer: BufferNodePanel,\n  texture: TextureNodePanel,\n  compute: ComputeNodePanel,\n  render: RenderNodePanel,\n  sampler: SamplerNodePanel,\n  'buffer-binding': BufferBindingNodePanel,\n  'sampler-binding': SamplerBindingNodePanel,\n  'texture-binding': TextureBindingNodePanel,\n};\n\nconst EDGE_TYPES = {\n  'custom-edge': CustomEdge,\n};\n\ninterface Props {\n  blueprint: Blueprint;\n  onChange: () => void;\n}\n\nfunction getUnusedKey<ID extends ShaderID | NodeID, T extends Record<ID, any>>(\n  dict: T,\n  base: ID\n): ID {\n  for (let i = 1; ; ++i) {\n    const id = `${base}${i}` as ID;\n    if (!dict.hasOwnProperty(id)) {\n      return id;\n    }\n  }\n}\n\nclass FlowErrorBounary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.log(error);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst isPassNode = (node: Node) =>\n  node.type === 'render' || node.type === 'compute';\n\nexport class BlueprintEditor extends React.Component<Props> {\n  private isMounted_: boolean;\n  private instance_: null | OnLoadParams;\n  private flowRef_: React.RefObject<HTMLDivElement>;\n  private lastConnectStart_: null | XYPosition;\n  private lastConnectEnd_: null | XYPosition;\n\n  constructor(props: Props) {\n    super(props);\n    this.isMounted_ = false;\n    this.instance_ = null;\n    this.flowRef_ = React.createRef();\n    this.lastConnectStart_ = null;\n    this.lastConnectEnd_ = null;\n  }\n\n  componentDidMount() {\n    this.isMounted_ = true;\n  }\n\n  componentWillUnmount() {\n    this.isMounted_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"BlueprintEditor\">\n        <FlowErrorBounary>\n          <ReactFlow\n            ref={this.flowRef_}\n            nodeTypes={NODE_TYPES}\n            edgeTypes={EDGE_TYPES}\n            elements={buildGraphFromBlueprint(\n              this.props.blueprint,\n              this.update_\n            )}\n            elementsSelectable={false}\n            nodesConnectable={true}\n            nodesDraggable={true}\n            onLoad={this.onLoad_}\n            onConnectStart={this.onConnectStart_}\n            onConnectStop={this.onConnectStop_}\n            onConnect={this.onConnect_}\n            onElementClick={this.onElementClick_}\n            onNodeDragStop={this.onMoveNode_}\n          >\n            <div className=\"Toolbar\">\n              <button onClick={this.addShader_}>+Shader</button>\n              <button onClick={this.addBuffer_}>+Buffer</button>\n              <button onClick={this.addTexture_}>+Texture</button>\n              <button onClick={this.addSampler_}>+Sampler</button>\n              <button onClick={this.addRenderPass_}>+Render Pass</button>\n              <button onClick={this.addComputePass_}>+Compute Pass</button>\n            </div>\n          </ReactFlow>\n        </FlowErrorBounary>\n      </div>\n    );\n  }\n\n  update_ = () => {\n    if (!this.isMounted_) {\n      return;\n    }\n\n    this.setState({\n      elements: buildGraphFromBlueprint(this.props.blueprint, this.update_),\n    });\n    this.props.onChange();\n  };\n\n  onLoad_ = (instance: OnLoadParams) => {\n    this.instance_ = instance;\n  };\n\n  onConnectStart_ = (e: React.MouseEvent) => {\n    this.lastConnectStart_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnectStop_ = (e: any) => {\n    this.lastConnectEnd_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnect_ = (edge: Edge<any> | Connection) => {\n    const source = this.props.blueprint.nodes[edge.source!];\n    const target = this.props.blueprint.nodes[edge.target!];\n    if (!source || !target) {\n      return;\n    }\n\n    let position = { x: 100, y: 100 };\n    if (\n      this.instance_ &&\n      this.lastConnectStart_ !== null &&\n      this.lastConnectEnd_ !== null &&\n      this.flowRef_.current\n    ) {\n      const view = this.flowRef_.current.getBoundingClientRect();\n      const midpoint = {\n        x:\n          (this.lastConnectStart_.x + this.lastConnectEnd_.x) / 2 - view.x - 60,\n        y:\n          (this.lastConnectStart_.y + this.lastConnectEnd_.y) / 2 - view.y - 40,\n      };\n      position = this.instance_.project(midpoint);\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'buffer' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addBufferBinding_(\n        edge.source!,\n        edge.target!,\n        position,\n        'storage-read'\n      );\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'texture' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTrivialBinding_('texture', edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'sampler' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTrivialBinding_('sampler', edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      isPassNode(source) &&\n      edge.targetHandle === 'queueIn'\n    ) {\n      const nodes = this.props.blueprint.nodes;\n      const id = getUnusedKey(nodes, `queue-dep`);\n      nodes[id] = {\n        id,\n        name: '',\n        position,\n        type: 'connection',\n        connectionType: 'queue',\n        source: edge.source!,\n        target: edge.target!,\n      };\n      this.props.onChange();\n      return;\n    }\n  };\n\n  onElementClick_ = (\n    event: React.MouseEvent<Element, MouseEvent>,\n    element: FlowNode<any> | Edge<any>\n  ) => {};\n\n  onMoveNode_ = (event: React.MouseEvent, node: FlowNode) => {\n    node.data.node.position = { ...node.position };\n    this.update_();\n  };\n\n  addShader_ = () => {\n    const shaders = this.props.blueprint.shaders;\n    const id = getUnusedKey(shaders, 'shader');\n    shaders[id] = { name: id, id, code: '' };\n    this.update_();\n  };\n\n  addNode_ = (type: string, node: Partial<Node>) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, type);\n    nodes[id] = {\n      id,\n      name: id,\n      type,\n      position: { x: 100, y: 100 },\n      ...node,\n    } as Node;\n    this.update_();\n  };\n\n  addBuffer_ = () => {\n    this.addNode_('buffer', {\n      size: 16384,\n      position: { x: 100, y: 100 },\n      init: 'zero',\n    });\n  };\n\n  addTexture_ = () => {\n    this.addNode_('texture', {\n      position: { x: 100, y: 100 },\n      size: { width: 1024, height: 1024 },\n      format: 'rgba8unorm',\n      mipLevelCount: 1,\n      sampleCount: 1,\n    });\n  };\n\n  addSampler_ = () => {\n    this.addNode_('sampler', {\n      position: { x: 100, y: 100 },\n    });\n  };\n\n  addBufferBinding_ = (\n    source: NodeID,\n    target: NodeID,\n    position: XYPosition,\n    storageType: BufferBindingStorageType\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, `binding-buffer`);\n    nodes[id] = {\n      id,\n      name: '',\n      position,\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      source,\n      target,\n      group: 0,\n      binding: 1,\n      storageType,\n    };\n  };\n\n  addTrivialBinding_ = (\n    type: 'sampler' | 'texture',\n    source: NodeID,\n    target: NodeID,\n    position: XYPosition\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, `binding-${type}`);\n    nodes[id] = {\n      id,\n      name: '',\n      position,\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: type,\n      source,\n      target,\n      group: 0,\n      binding: 1,\n    };\n  };\n\n  addRenderPass_ = () => {\n    this.addNode_('render', {\n      vertexShader: '',\n      vertexEntryPoint: '',\n      fragmentShader: '',\n      fragmentEntryPoint: '',\n      topology: 'triangle-list',\n      numVertices: 4,\n      numInstances: 1,\n      indexed: false,\n      clear: true,\n      clearColor: { r: 0, g: 0, b: 0, a: 1 },\n    });\n  };\n\n  addComputePass_ = () => {\n    this.addNode_('compute', {\n      shader: '',\n      entryPoint: '',\n      dispatchSize: { x: 1, y: 1, z: 1 },\n    });\n  };\n}\n\nfunction buildGraphFromBlueprint(\n  blueprint: Blueprint,\n  onChange: () => void\n): FlowElement[] {\n  const elements: FlowElement[] = [];\n  Object.entries(blueprint.nodes).forEach(([id, node]) => {\n    if (node.type !== 'connection') {\n      elements.push({\n        id,\n        type: node.type,\n        data: {\n          blueprint,\n          node,\n          onChange: (update: any) => {\n            Object.assign(blueprint.nodes[id], update);\n            onChange();\n          },\n          destroy: () => {\n            delete blueprint.nodes[id];\n            for (const [otherId, otherNode] of Object.entries(\n              blueprint.nodes\n            )) {\n              if (\n                otherNode.type === 'connection' &&\n                (otherNode.source === id || otherNode.target === id)\n              ) {\n                delete blueprint.nodes[otherId];\n              }\n            }\n            onChange();\n          },\n        },\n        position: node.position,\n      });\n    } else if (node.connectionType === 'binding') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id: `${id}-node`,\n        type: `${node.bindingType}-binding`,\n        data,\n        position: node.position,\n      });\n      elements.push({\n        id: `${id}-source-edge`,\n        source: node.source,\n        target: `${id}-node`,\n      });\n      elements.push({\n        id: `${id}-target-edge`,\n        source: `${id}-node`,\n        target: node.target,\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n      });\n    } else if (node.connectionType === 'queue') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id,\n        source: node.source,\n        target: node.target,\n        targetHandle: 'queueIn',\n        type: 'custom-edge',\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n        data,\n      });\n    }\n  });\n\n  return elements;\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { ComputeNode } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { NodePanel, NodePanelProps } from './NodePanel';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nexport const ComputeNodePanel = (props: NodePanelProps<ComputeNode>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <NodePanel\n      title=\"Compute Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Shader\">\n          <select\n            value={node.shader}\n            onChange={e => data.onChange({ shader: e.currentTarget.value })}\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Entry Point\">\n          <EditableLabel\n            emptyText=\"None\"\n            value={node.entryPoint}\n            onChange={value => data.onChange({ entryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Dispatch Size\">\n          <div className=\"DispatchSize\">\n            <div className=\"DispatchSizeElement\">\n              X{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.x}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: e.currentTarget.valueAsNumber,\n                      y: node.dispatchSize.y,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Y{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.y}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: e.currentTarget.valueAsNumber,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Z{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.z}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: node.dispatchSize.y,\n                      z: e.currentTarget.valueAsNumber,\n                    },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </LabeledField>\n      </div>\n    </NodePanel>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerNode } from '../../gpu/Blueprint';\nimport { NodePanel, NodePanelProps } from './NodePanel';\nimport { isValidBindingConnection } from './Validation';\n\nexport const SamplerNodePanel = (props: NodePanelProps<SamplerNode>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <NodePanel\n      title=\"Sampler\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"SamplerDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n      </div>\n    </NodePanel>\n  );\n};\n","import './NodePanel.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport {\n  BufferBindingNode,\n  BufferBindingStorageType,\n} from '../../gpu/Blueprint';\nimport { NodePanel, NodePanelProps } from './NodePanel';\n\nexport const BufferBindingNodePanel = (\n  props: NodePanelProps<BufferBindingNode>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <NodePanel className=\"BufferBinding\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <select\n        value={node.storageType}\n        onChange={e =>\n          data.onChange({\n            storageType: e.currentTarget.value as BufferBindingStorageType,\n          })\n        }\n      >\n        <option value=\"storage-read\">Storage (r/o)</option>\n        <option value=\"storage\">Storage (r/w)</option>\n        <option value=\"uniform\">Uniform</option>\n        <option value=\"sampler\">Sampler</option>\n        <option value=\"texture\">Texture</option>\n      </select>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </NodePanel>\n  );\n};\n","import './NodePanel.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerBindingNode } from '../../gpu/Blueprint';\nimport { NodePanel, NodePanelProps } from './NodePanel';\n\nexport const SamplerBindingNodePanel = (\n  props: NodePanelProps<SamplerBindingNode>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <NodePanel title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </NodePanel>\n  );\n};\n","import './NodePanel.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureBindingNode } from '../../gpu/Blueprint';\nimport { NodePanel, NodePanelProps } from './NodePanel';\n\nexport const TextureBindingNodePanel = (\n  props: NodePanelProps<TextureBindingNode>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <NodePanel title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </NodePanel>\n  );\n};\n","import './NodePanel.css';\n\nimport {\n  getBezierPath,\n  getEdgeCenter,\n  getMarkerEnd,\n  EdgeProps,\n} from 'react-flow-renderer';\n\ninterface Data {\n  destroy?: () => void;\n}\n\nexport const CustomEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data: anyData,\n  arrowHeadType,\n  markerEndId,\n}: EdgeProps) => {\n  const path = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n  const end = getMarkerEnd(arrowHeadType, markerEndId);\n  const [centerX, centerY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n  const data = anyData as Data;\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={path}\n        markerEnd={end}\n      />\n      {data.destroy && (\n        <foreignObject width={16} height={16} x={centerX - 8} y={centerY - 8}>\n          <div className=\"Edge\">\n            <button className=\"RemoveButton\" onClick={data.destroy} />\n          </div>\n        </foreignObject>\n      )}\n    </>\n  );\n};\n","import './CodeEditor.css';\n\nimport 'codemirror/keymap/sublime';\n\nimport CodeMirror, { IEditorInstance } from '@uiw/react-codemirror';\nimport React from 'react';\n\nimport { ShaderCompilationMessage } from '../gpu/program/ShaderCache';\n\ninterface Props {\n  compilationMessages?: ShaderCompilationMessage[];\n  contents: string;\n  mutable: boolean;\n  onChange: (contents: string) => void;\n  theme: string;\n}\n\nexport class CodeEditor extends React.Component<Props> {\n  private isDecorating_: boolean;\n  private editorRef_: React.RefObject<IEditorInstance>;\n\n  constructor(props: Props) {\n    super(props);\n    this.isDecorating_ = false;\n    this.editorRef_ = React.createRef();\n  }\n\n  refresh() {\n    const cm = this.editorRef_.current;\n    if (cm) {\n      cm.editor.refresh();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"CodeEditor\">\n        <CodeMirror\n          ref={this.editorRef_}\n          value={this.props.contents}\n          onChange={this.onChange_}\n          onUpdate={this.onUpdate_}\n          options={{\n            theme: this.props.theme,\n            keyMap: 'sublime',\n            mode: 'rust',\n            gutters: ['GutterMessages'],\n            readOnly: !this.props.mutable,\n          }}\n        />\n      </div>\n    );\n  }\n\n  onChange_ = (e: CodeMirror.Editor, change: CodeMirror.EditorChange) => {\n    this.props.onChange(e.getValue());\n  };\n\n  onUpdate_ = (e: CodeMirror.Editor) => {\n    if (this.isDecorating_) {\n      return;\n    }\n\n    this.isDecorating_ = true;\n    e.getAllMarks().forEach(m => m.clear());\n    e.clearGutter('GutterMessages');\n    for (const m of this.props.compilationMessages ?? []) {\n      const className = `MarkedText-${m.type}`;\n      const line = m.lineNum;\n      e.markText(\n        { line, ch: m.linePos - 1 },\n        { line, ch: m.linePos + m.length - 1 },\n        { className }\n      );\n      const marker = document.createElement('div');\n      marker.classList.add('Marker', `Marker-${m.type}`);\n      e.setGutterMarker(line, 'GutterMessages', marker);\n    }\n    this.isDecorating_ = false;\n  };\n}\n","import './TabContainer.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { EditableLabel } from './EditableLabel';\n\ninterface TabDescriptor {\n  key: string;\n  title: string;\n  mutable: boolean;\n  onActivate?: () => void;\n  onClose?: () => void;\n  onRename?: (newName: string) => void;\n}\n\ninterface Props {\n  tabs: TabDescriptor[];\n  children: ReactNode;\n}\n\ninterface State {\n  activeTab: number;\n}\n\nexport class TabContainer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeTab: 0,\n    };\n  }\n\n  componentDidUpdate() {\n    const numChildren = React.Children.count(this.props.children);\n    if (this.state.activeTab >= numChildren) {\n      this.setState({ activeTab: numChildren - 1 });\n    } else {\n      const tab = this.props.tabs[this.state.activeTab];\n      if (tab.onActivate) {\n        tab.onActivate();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"TabContainer\">\n        {this.renderTabs_()}\n        <div className=\"ContentArea\">\n          {React.Children.toArray(this.props.children).map((child, i) => {\n            const active = i === this.state.activeTab;\n            return (\n              <div\n                key={i}\n                className={`Content ${active ? 'Active' : 'Inactive'}`}\n              >\n                {child}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderTabs_() {\n    return (\n      <div className=\"TabStrip\">\n        {this.props.tabs.map((tab, i) => {\n          const active = this.state.activeTab === i;\n          return (\n            <div\n              key={tab.key + tab.title}\n              className={`${active ? 'Tab Active' : 'Tab Inactive'}\n                          ${tab.mutable ? 'Removable' : 'Permanent'}`}\n              onClick={_ => this.setActiveTab_(i)}\n            >\n              <EditableLabel\n                enabled={tab.mutable && active}\n                value={tab.title}\n                onChange={tab.onRename ?? (() => ({}))}\n              />\n              {tab.mutable && (\n                <button\n                  className=\"RemoveButton\"\n                  onClick={e => {\n                    if (tab.onClose) {\n                      tab.onClose();\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  setActiveTab_(tab: number) {\n    this.setState({ activeTab: tab });\n  }\n}\n","import './Editor.css';\n\nimport React from 'react';\n\nimport { Blueprint, ShaderID } from '../gpu/Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationResults } from '../gpu/program/Program';\nimport { BlueprintEditor } from './BlueprintEditor';\nimport { CodeEditor } from './CodeEditor';\nimport { TabContainer } from './TabContainer';\n\ninterface Props {\n  blueprint: Blueprint;\n  onBlueprintChange: () => void;\n\n  compilationResults: ShaderCompilationResults;\n\n  codeMirrorTheme: string;\n}\n\nexport const Editor = (props: Props) => {\n  const removeShader = (id: ShaderID) => {\n    delete props.blueprint.shaders[id];\n    props.onBlueprintChange();\n  };\n\n  const renameShader = (id: ShaderID, newName: string) => {\n    props.blueprint.shaders[id].name = newName;\n    props.onBlueprintChange();\n  };\n\n  const refreshEditor = (ref: React.RefObject<CodeEditor>) => {\n    if (ref.current) {\n      ref.current.refresh();\n    }\n  };\n\n  const shaders = Object.entries(props.blueprint.shaders);\n  const uniformsRef: React.RefObject<CodeEditor> = React.createRef();\n  const refs: React.RefObject<CodeEditor>[] = shaders.map(() =>\n    React.createRef()\n  );\n\n  return (\n    <div className=\"Editor\">\n      <TabContainer\n        tabs={[\n          { key: 'Blueprint', title: 'Blueprint', mutable: false },\n          {\n            key: 'Uniforms',\n            title: 'Uniforms',\n            mutable: false,\n            onActivate: () => {\n              refreshEditor(uniformsRef);\n            },\n          },\n          ...shaders.map(([id, shader], index) => ({\n            key: id,\n            title: shader.name,\n            mutable: true,\n            onActivate: () => {\n              refreshEditor(refs[index]);\n            },\n            onClose: () => removeShader(id),\n            onRename: (newName: string) => renameShader(id, newName),\n          })),\n        ]}\n      >\n        <BlueprintEditor\n          blueprint={props.blueprint}\n          onChange={props.onBlueprintChange}\n        />\n        <CodeEditor\n          ref={uniformsRef}\n          key=\"Uniforms\"\n          contents={BUILTIN_UNIFORMS_WGSL}\n          mutable={false}\n          onChange={() => ({})}\n          theme={props.codeMirrorTheme}\n        />\n        {shaders.map(([id, shader], index) => (\n          <CodeEditor\n            key={id}\n            ref={refs[index]}\n            compilationMessages={props.compilationResults.get(shader.id)}\n            contents={shader.code}\n            mutable={true}\n            onChange={code => {\n              shader.code = code;\n              props.onBlueprintChange();\n            }}\n            theme={props.codeMirrorTheme}\n          />\n        ))}\n      </TabContainer>\n    </div>\n  );\n};\n","import './App.css';\n\nimport React from 'react';\n\nimport { LocalPersistent } from './base/LocalPersistent';\nimport { deepCopy } from './base/Util';\nimport {\n  Blueprint,\n  deserializeBlueprint,\n  serializeBlueprint,\n  SerializedBlueprint,\n} from './gpu/Blueprint';\nimport { FrameProducer } from './gpu/FrameProducer';\nimport { ShaderCompilationResults } from './gpu/program/Program';\nimport { ControlPanel } from './ui/ControlPanel';\nimport { Display, DisplayConfig } from './ui/Display';\nimport { Editor } from './ui/Editor';\nimport { AppState } from './AppState';\n\ninterface Props {\n  appState: LocalPersistent<AppState>;\n}\n\ninterface State extends AppState {\n  compilationResults: ShaderCompilationResults;\n}\n\nclass App extends React.Component<Props, State> {\n  private frameProducer_: FrameProducer;\n  private blueprint_: Blueprint;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      ...this.props.appState.value,\n      compilationResults: new Map(),\n    };\n\n    this.blueprint_ = deserializeBlueprint(this.state.blueprint);\n\n    this.frameProducer_ = new FrameProducer();\n    this.frameProducer_.setBlueprint(this.blueprint_);\n  }\n\n  componentDidMount() {\n    this.frameProducer_.onShadersCompiled = this.onShadersCompiled_;\n  }\n\n  componentDidUpdate() {\n    this.props.appState.value = this.state;\n    this.frameProducer_.setBlueprint(this.blueprint_);\n  }\n\n  componentWillUnmount() {\n    this.frameProducer_.stop();\n  }\n\n  onDisplayConfigChange = (change: Partial<DisplayConfig>) => {\n    this.setState((state, props) => {\n      return {\n        displayConfig: Object.assign({ ...state.displayConfig }, change),\n      };\n    });\n  };\n\n  onFullscreenChange_ = () => {\n    this.frameProducer_.reconfigure();\n  };\n\n  onBlueprintChange_ = async () => {\n    this.frameProducer_.setBlueprint(this.blueprint_);\n    this.setState({ blueprint: await serializeBlueprint(this.blueprint_) });\n  };\n\n  onShadersCompiled_ = (compilationResults: ShaderCompilationResults) => {\n    this.setState({ compilationResults });\n  };\n\n  onSaveBlueprint_ = async (name: string) => {\n    const serialized = await serializeBlueprint(this.blueprint_);\n    this.setState((state, props) => ({\n      savedBlueprints: {\n        ...state.savedBlueprints,\n        [name]: serialized,\n      },\n    }));\n  };\n\n  onLoadBlueprint_ = async (name: string) => {\n    const blueprint = this.state.savedBlueprints[name];\n    if (!blueprint) {\n      return;\n    }\n\n    this.blueprint_ = deserializeBlueprint(blueprint);\n    const reserialized = await serializeBlueprint(this.blueprint_);\n\n    this.setState(state => {\n      const blueprints = state.savedBlueprints;\n      blueprints[name] = reserialized;\n      return {\n        blueprint: deepCopy(blueprint),\n        savedBlueprints: blueprints,\n      };\n    });\n  };\n\n  onImportBlueprint_ = (blueprint: SerializedBlueprint) => {\n    this.blueprint_ = deserializeBlueprint(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onDeleteBlueprint_ = (name: string) => {\n    this.setState((state, props) => {\n      delete state.savedBlueprints[name];\n      return { savedBlueprints: state.savedBlueprints };\n    });\n  };\n\n  onCodeMirrorThemeChange_ = (name: string) => {\n    this.setState({ codeMirrorTheme: name });\n  };\n\n  render() {\n    const renderDisplay = (canvas: HTMLCanvasElement) => {\n      let resolution: { width: number; height: number };\n      const config = this.state.displayConfig;\n      if (config.resolution.mode === 'pixel') {\n        const pixelSize =\n          config.resolution.pixelSize! >= 1 ? config.resolution.pixelSize! : 1;\n        resolution = {\n          width: canvas.clientWidth / pixelSize,\n          height: canvas.clientHeight / pixelSize,\n        };\n      } else {\n        resolution = { ...config.resolution.framebufferSize! };\n      }\n\n      this.frameProducer_.render(canvas, resolution);\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-title\">WebGPU Playground</div>\n        </div>\n        <div className=\"App-top\">\n          <div className=\"App-canvas\">\n            <Display render={renderDisplay} config={this.state.displayConfig} />\n          </div>\n          <div className=\"App-editor\">\n            <Editor\n              compilationResults={this.state.compilationResults}\n              blueprint={this.blueprint_}\n              onBlueprintChange={this.onBlueprintChange_}\n              codeMirrorTheme={this.state.codeMirrorTheme}\n            />\n          </div>\n        </div>\n        <div className=\"App-bottom\">\n          <ControlPanel\n            blueprint={this.blueprint_}\n            displayConfig={this.state.displayConfig}\n            onDisplayConfigChange={this.onDisplayConfigChange}\n            savedBlueprints={this.state.savedBlueprints}\n            onSaveBlueprint={this.onSaveBlueprint_}\n            onLoadBlueprint={this.onLoadBlueprint_}\n            onImportBlueprint={this.onImportBlueprint_}\n            onDeleteBlueprint={this.onDeleteBlueprint_}\n            codeMirrorTheme={this.state.codeMirrorTheme}\n            onCodeMirrorThemeChange={this.onCodeMirrorThemeChange_}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { SerializedBlueprint } from './gpu/Blueprint';\nimport { BASIC } from './presets/Basic';\nimport { BOIDS } from './presets/Boids';\nimport { INSTANCES } from './presets/Instances';\nimport { DisplayConfig } from './ui/Display';\n\nexport interface AppState {\n  blueprint: SerializedBlueprint;\n  savedBlueprints: Record<string, SerializedBlueprint>;\n  displayConfig: DisplayConfig;\n  codeMirrorTheme: string;\n}\n\nexport const DEFAULT_APP_STATE: AppState = {\n  blueprint: {\n    nodes: {},\n    shaders: {},\n  },\n  savedBlueprints: {\n    Basic: BASIC,\n    Boids: BOIDS,\n    Instances: INSTANCES,\n  },\n  displayConfig: {\n    aspect: '1:1',\n    resolution: { mode: 'pixel', pixelSize: 1 },\n  },\n  codeMirrorTheme: 'paraiso-dark',\n};\n","import { SerializedBlueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u);\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u);\n  return vec4<f32>(x, y, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx +\n                            vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const BASIC: SerializedBlueprint = {\n  version: 1,\n  nodes: [\n    {\n      id: 'render1',\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 1,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  ],\n  shaders: [\n    {\n      id: 'vertex1',\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    {\n      id: 'fragment1',\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  ],\n};\n","import { SerializedBlueprint } from '../gpu/Blueprint';\n\nexport const BOIDS: SerializedBlueprint = {\n  version: 1,\n  nodes: [\n    {\n      id: 'compute1',\n      name: 'first update',\n      type: 'compute',\n      position: {\n        x: 223,\n        y: 438,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 2000,\n        y: 1,\n        z: 1,\n      },\n    },\n    {\n      id: 'buffer1',\n      name: 'buffer1',\n      type: 'buffer',\n      position: {\n        x: -55,\n        y: -35,\n      },\n      size: 32000,\n      init: 'random-floats',\n    },\n    {\n      id: 'buffer2',\n      name: 'buffer2',\n      type: 'buffer',\n      position: {\n        x: 610,\n        y: 19,\n      },\n      size: 32000,\n      init: 'zero',\n    },\n    {\n      id: 'render1',\n      name: 'render boids',\n      position: {\n        x: -262,\n        y: 374,\n      },\n      type: 'render',\n      indexed: false,\n      numVertices: 3,\n      numInstances: 1000,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n    {\n      id: 'compute2',\n      name: 'update B',\n      type: 'compute',\n      position: {\n        x: 658,\n        y: 442,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 1000,\n        y: 1,\n        z: 1,\n      },\n    },\n    {\n      id: 'binding1a',\n      name: '',\n      position: {\n        x: 65,\n        y: 210,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'compute1',\n    },\n    {\n      id: 'binding1b',\n      name: '',\n      position: {\n        x: -191,\n        y: 140,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'render1',\n    },\n    {\n      id: 'binding2',\n      name: '',\n      position: {\n        x: 220,\n        y: 218,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer1',\n      target: 'compute2',\n    },\n    {\n      id: 'binding3',\n      name: '',\n      position: {\n        x: 713,\n        y: 179,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer2',\n      target: 'compute2',\n    },\n    {\n      id: 'binding4',\n      name: '',\n      position: {\n        x: 566,\n        y: 181,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer2',\n      target: 'compute1',\n    },\n    {\n      id: 'queue1',\n      name: '',\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'render1',\n      target: 'compute1',\n      type: 'connection',\n      connectionType: 'queue',\n    },\n    {\n      id: 'queue2',\n      name: '',\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'compute1',\n      target: 'compute2',\n      type: 'connection',\n      connectionType: 'queue',\n    },\n  ],\n  shaders: [\n    {\n      id: 'compute1',\n      name: 'compute',\n      code: 'let kRule1Distance = 0.1;\\nlet kRule2Distance = 0.025;\\nlet kRule3Distance = 0.025;\\nlet kRule1Scale = 0.02;\\nlet kRule2Scale = 0.05;\\nlet kRule3Scale = 0.005;\\nlet kNumParticles = 2000u;\\n\\nstruct Particle {\\n  pos: vec2<f32>;\\n  vel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particlesA: Particles;\\n[[group(0), binding(2)]] var<storage, read_write> particlesB: Particles;\\n\\n[[stage(compute), workgroup_size(1)]]\\nfn main([[builtin(global_invocation_id)]] id: vec3<u32>) {\\n  let index = id.x;\\n  if (index >= kNumParticles) {\\n    return;\\n  }\\n\\n  var vPos = particlesA.particles[index].pos;\\n  var vVel = particlesA.particles[index].vel;\\n  var cMass = vec2<f32>(0.0, 0.0);\\n  var cVel = vec2<f32>(0.0, 0.0);\\n  var colVel = vec2<f32>(0.0, 0.0);\\n  var cMassCount = 0u;\\n  var cVelCount = 0u;\\n  var pos: vec2<f32>;\\n  var vel: vec2<f32>;\\n\\n  for (var i = 0u; i < kNumParticles; i = i + 1u) {\\n    if (i == index) {\\n      continue;\\n    }\\n    pos = particlesA.particles[i].pos.xy;\\n    vel = particlesA.particles[i].vel.xy;\\n    if (distance(pos, vPos) < kRule1Distance) {\\n      cMass = cMass + pos;\\n      cMassCount = cMassCount + 1u;\\n    }\\n    if (distance(pos, vPos) < kRule2Distance) {\\n      colVel = colVel - (pos - vPos);\\n    }\\n    if (distance(pos, vPos) < kRule3Distance) {\\n      cVel = cVel + vel;\\n      cVelCount = cVelCount + 1u;\\n    }\\n  }\\n\\n  if (cMassCount > 0u) {\\n    cMass = (cMass / vec2<f32>(f32(cMassCount), f32(cMassCount))) - vPos;\\n  }\\n\\n  if (cVelCount > 0u) {\\n    cVel = cVel / vec2<f32>(f32(cVelCount), f32(cVelCount));\\n  }\\n\\n  vVel = vVel + (cMass * kRule1Scale) + (colVel * kRule2Scale) +\\n      (cVel * kRule3Scale);\\n\\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 1.0);\\n  vPos = vPos + (vVel * builtinUniforms.timeDelta * 0.25);\\n\\n  if (vPos.x < -1.0) {\\n    vPos.x = vPos.x + 2.0;\\n  }\\n  if (vPos.x > 1.0) {\\n    vPos.x = vPos.x - 2.0;\\n  }\\n  if (vPos.y < -1.0) {\\n    vPos.y = vPos.y + 2.0;\\n  }\\n  if (vPos.y > 1.0) {\\n    vPos.y = vPos.y - 2.0;\\n  }\\n\\n  particlesB.particles[index].pos = vPos;\\n  particlesB.particles[index].vel = vVel;\\n}\\n',\n    },\n    {\n      id: 'vertex1',\n      name: 'vertex',\n      code: 'struct Particle {\\n  particlePos: vec2<f32>;\\n  particleVel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particles: Particles;\\n\\nfn getPos(vid: u32) -> vec2<f32> {\\n  return select(\\n      vec2<f32>(-0.01, -0.02),\\n      select(vec2<f32>(0.01, -0.02), vec2<f32>(0.00, 0.02), vid >= 2u),\\n      vid >= 1u);\\n}\\n\\n[[stage(vertex)]]\\nfn main([[builtin(vertex_index)]] vid: u32,\\n        [[builtin(instance_index)]] id: u32)\\n    -> [[builtin(position)]] vec4<f32> {\\n  let angle = -atan2(particles.particles[id].particleVel.x, particles.particles[id].particleVel.y);\\n  let ppos = getPos(vid);\\n  let pos = vec2<f32>(ppos.x * cos(angle) - ppos.y * sin(angle),\\n                      ppos.x * sin(angle) + ppos.y * cos(angle));\\n  return vec4<f32>(pos + particles.particles[id].particlePos, 0.0, 1.0);\\n}\\n',\n    },\n    {\n      id: 'fragment1',\n      name: 'fragment',\n      code: '[[stage(fragment)]]\\nfn main() -> [[location(0)]] vec4<f32> {\\n  return vec4<f32>(0.0, 1.0, 0.0, 1.0);\\n}\\n',\n    },\n  ],\n};\n","import { SerializedBlueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32,\n        [[builtin(instance_index)]] instance: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let t = builtinUniforms.time * 6.283 / 2.0;\n  let b = 1.0 + f32(instance / 10u) * 0.5;\n  let k = 0.5 + cos(t * 3.0) * 0.2;\n  let c = k * cos(t);\n  let s = k * sin(t);\n  let xo = cos(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let yo = sin(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u) * 0.3;\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u) * 0.3;\n  return vec4<f32>(x * c - y * s + xo, x * s + y * c + yo, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx + vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const INSTANCES: SerializedBlueprint = {\n  version: 1,\n  nodes: [\n    {\n      id: 'render1',\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 30,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  ],\n  shaders: [\n    {\n      id: 'vertex1',\n      name: 'Vertex',\n      code: VERTEX,\n    },\n    {\n      id: 'fragment1',\n      name: 'Fragment',\n      code: FRAGMENT,\n    },\n  ],\n};\n","import { Debouncer } from './Debouncer';\n\nimport localForage from 'localforage';\n\nconst DEFAULT_DEBOUNCE_MS = 100;\n\ninterface Options<Type> {\n  key: string;\n  default: Type;\n  debounceMs?: number;\n}\n\nfunction deepUpdate(target: any, source: any): any {\n  const isObject = (x: any) => typeof x === 'object' && x !== null;\n  for (const [key, value] of Object.entries(source)) {\n    if (!target.hasOwnProperty(key)) {\n      if (Array.isArray(value)) {\n        target[key] = [...value];\n      } else if (isObject(value)) {\n        target[key] = deepUpdate({}, value);\n      } else {\n        target[key] = value;\n      }\n    } else if (isObject(value) && isObject(target[key])) {\n      deepUpdate(target[key], value);\n    }\n  }\n  return target;\n}\n\nexport class LocalPersistent<Type> {\n  private key_: string;\n  private cachedValue_: Type;\n  private debouncer_: Debouncer;\n\n  constructor(key: string, initialValue: Type, debounceMs: number) {\n    this.key_ = key;\n    this.cachedValue_ = initialValue;\n    this.debouncer_ = new Debouncer(debounceMs);\n  }\n\n  set value(value: Type) {\n    this.cachedValue_ = value;\n    this.debouncer_.invoke(() => localForage.setItem(this.key_, value));\n  }\n\n  get value(): Type {\n    return this.cachedValue_;\n  }\n}\n\nfunction loadValueFromLocalStorage<Type>(key: string): null | Type {\n  const serializedValue = localStorage[key];\n  let cachedValue = null;\n  if (serializedValue) {\n    cachedValue = JSON.parse(serializedValue) ?? null;\n  }\n  if (cachedValue !== null) {\n    return cachedValue as Type;\n  }\n  return null;\n}\n\nexport async function restoreLocalPersistent<Type>(\n  options: Options<Type>\n): Promise<LocalPersistent<Type>> {\n  const asyncCachedValue = localForage.getItem(options.key);\n  const cachedLegacyValue = loadValueFromLocalStorage<Type>(options.key);\n  const cachedValue = (await asyncCachedValue) as null | Type;\n  let restoredValue: null | Partial<Type> = null;\n  if (cachedValue !== null) {\n    restoredValue = cachedValue;\n  } else {\n    restoredValue = cachedLegacyValue ?? {};\n  }\n  return new LocalPersistent<Type>(\n    options.key,\n    deepUpdate(restoredValue, options.default),\n    options.debounceMs ?? DEFAULT_DEBOUNCE_MS\n  );\n}\n","import './index.css';\n\nimport localForage from 'localforage';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './App';\nimport { AppState, DEFAULT_APP_STATE } from './AppState';\nimport { restoreLocalPersistent } from './base/LocalPersistent';\nimport { modernizeBlueprint } from './gpu/Blueprint';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'shady',\n  version: 1,\n  storeName: 'local_state',\n});\n\nasync function init() {\n  const state = await restoreLocalPersistent<AppState>({\n    key: 'gpu-app-state',\n    default: DEFAULT_APP_STATE,\n  });\n\n  const value = state.value;\n  for (const [id, serialized] of Object.entries(value.savedBlueprints)) {\n    value.savedBlueprints[id] = await modernizeBlueprint(serialized);\n  }\n  state.value = value;\n\n  render(\n    <React.StrictMode>\n      <App appState={state} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n"],"sourceRoot":""}