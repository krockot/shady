{"version":3,"sources":["../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","base/Util.tsx","base/Uuid.tsx","gpu/Blueprint.tsx","gpu/Gpu.tsx","gpu/program/CompiledResourceCache.tsx","gpu/program/Buffer.tsx","gpu/program/Sampler.tsx","gpu/BuiltinUniforms.tsx","gpu/program/Shader.tsx","gpu/program/Texture.tsx","gpu/program/Executable.tsx","gpu/program/Linker.tsx","gpu/program/ProgramMap.tsx","gpu/Program.tsx","gpu/program/CompiledResourceBundle.tsx","gpu/FrameProducer.tsx","ui/CodeMirrorThemes.tsx","ui/LabeledField.tsx","ui/ControlPanel.tsx","ui/Display.tsx","ui/EditableLabel.tsx","ui/nodes/Node.tsx","ui/nodes/Validation.tsx","ui/nodes/BufferNode.tsx","base/Debouncer.tsx","ui/nodes/RenderNode.tsx","ui/nodes/TextureNode.tsx","ui/BlueprintEditor.tsx","ui/nodes/ComputeNode.tsx","ui/nodes/SamplerNode.tsx","ui/nodes/BufferBindingNode.tsx","ui/nodes/SamplerBindingNode.tsx","ui/nodes/TextureBindingNode.tsx","ui/nodes/CustomEdge.tsx","ui/CodeEditor.tsx","ui/TabContainer.tsx","ui/Editor.tsx","App.tsx","AppState.tsx","presets/Basic.tsx","presets/Boids.tsx","presets/Instances.tsx","base/LocalPersistent.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","doCopy","value","traversed","Array","isArray","has","add","x","Blob","copy","entries","k","v","undefined","deepCopy","Set","deepEquals","a","b","length","every","i","randomUUID","crypto","canonicalize","blueprint","data","values","nodes","node","type","uuid","shaders","shader","Gpu","adapter_","device_","lost_","pendingAcquisition_","onAcquired","onLost","acquire","acquireInternal_","release","isAcquired","onLost_","console","warn","setTimeout","this","navigator","gpu","requestAdapter","adapter","requestDevice","device","log","lost","CompiledResourceCache","compiler","compiler_","cache_","Map","from","filter","get","key","delete","dispose","resource","programMap","newCache","pendingUpdates","props","entry","needsRecompile","set","compile","update","fillRandomUint32Array","offset","byteLength","size","Math","min","view","Uint32Array","buffer","getRandomValues","Buffer","init","usage","size_","init_","usage_","buffer_","destroy","BufferCompiler","newDescriptor","bufferUsage","descriptor","mappedAtCreation","createBuffer","getMappedRange","uints","floats","Float32Array","forEach","unmap","createCompiledBufferCache","Sampler","sampler","sampler_","SamplerCompiler","createSampler","createCompiledSamplerCache","BUILTIN_UNIFORMS_WGSL","BUILTIN_WGSL_NUM_LINES","split","Shader","messages","code_","module_","messages_","ShaderCompiler","createShaderModule","compilationInfo","info","failed","message","push","lineNum","linePos","createCompiledShaderCache","Texture","imageData","bitmap","texture","imageData_","bitmap_","texture_","TextureCompiler","createImageBitmap","width","height","createTexture","format","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","createCompiledTextureCache","Executable","passes","passes_","outputDepthStencilTexture_","outputDepthStencilTextureSize_","submit","encodeCommands_","encoder","createCommandEncoder","pass","encodeRenderCommands_","encodeComputeCommands_","finish","loadValue","clear","clearColor","r","g","depthStencilTexture","renderPass","beginRenderPass","colorAttachments","createView","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","executeBundles","bundle","endPass","computePass","beginComputePass","dispatchSize","setPipeline","pipeline","bindGroups","group","setBindGroup","dispatch","y","z","getResourceForBinding","resources","buffers","name","textures","samplers","linkBindings","passId","visibility","builtinUniforms","groups","bindings","layoutEntries","groupEntries","newLayoutEntries","newGroupEntries","layoutEntry","binding","unshift","bindGroupLayouts","layout","createBindGroupLayout","createBindGroup","pipelineLayout","createPipelineLayout","linkPass","outputFormat","vertexDescriptor","vertexShader","fragmentDescriptor","fragmentShader","GPUShaderStage","VERTEX","FRAGMENT","topology","stripIndexFormat","createRenderPipeline","vertex","entryPoint","vertexEntryPoint","primitive","cullMode","fragment","targets","fragmentEntryPoint","depthStencil","depthWriteEnabled","depthCompare","depthTest","createRenderBundleEncoder","colorFormats","depthStencilFormat","draw","numVertices","numInstances","linkRenderPass","shaderDescriptor","COMPUTE","createComputePipeline","compute","linkComputePass","linkProgram","linkedPasses","passOrder","ProgramMap","textureUsage","s","populate_","bindingNodes","queueDeps","incoming","outgoing","connectionType","target","populateBindings_","computePassOrder_","bindingNode","bindingType","compileBufferBinding_","compileTextureBinding_","compileSamplerBinding_","startNodes","thisPhase","nextPhase","added","incomingDeps","passType","bufferType","newUsage","storageType","GPUBufferUsage","STORAGE","UNIFORM","visibilityForPass","addBindGroupEntry","groupBindings","Program","builtinUniforms_","resources_","executable_","blueprint_","lastCompile_","outputFormat_","onShadersCompiled_","createCompiledResourceBundle","handler","compile_","uniforms","ArrayBuffer","writeBuffer","resolution","run","thisCompile","doCompile_","newResources","releaseKeysAndDisposeRemainder","results","FrameProducer","gpu_","lastUsedContext_","lastUsedResolution_","startTime_","lastFrameTime_","frame_","program_","onGpuAcquired_","setBlueprint","onShadersCompiled","canvas","context","getContext","getContextFromCanvas","stop","getPreferredFormat","configure","style","now","Date","getTime","delta","updateUniforms","time","timeDelta","frame","getCurrentTexture","CODE_MIRROR_THEMES","LabeledField","label","children","className","ControlPanel","pixelSizeToggleRef_","pixelSizeRef_","framebufferWidthRef_","framebufferHeightRef_","importRef_","saveBlueprint_","prompt","onSaveBlueprint","loadBlueprint_","onLoadBlueprint","toggleLoadBlueprintPanel_","copyBlueprintToClipboard_","Uint8Array","arrayBuffer","bytes","imageDataSerialized","fromByteArray","clipboard","writeText","JSON","stringify","importBlueprintFromClipboard_","togglePasteMenu_","current","serializedBlueprint","parse","toByteArray","onImportBlueprint","setState","state","pasteMenuVisible","deleteBlueprint_","onDeleteBlueprint","loadMenuVisible","toggleOptions_","optionsVisible","enterFullscreen_","document","querySelector","requestFullscreen","setAspectRatio_","onDisplayConfigChange","aspect","currentTarget","updateResolution_","framebufferSize","parseInt","isNaN","mode","pixelSize","React","createRef","displayConfig","makeAspectOption","ratio","onChange","checked","title","onClick","ref","marginLeft","codeMirrorTheme","onCodeMirrorThemeChange","theme","savedBlueprints","Component","Display","wrapperRef_","canvasRef_","pendingFrameRequest_","renderNextFrame","wrapper","clientWidth","clientHeight","render","requestAnimationFrame","cancelAnimationFrame","config","aspectX","aspectY","stretch","computedWrapperStyle","aspectRatio","EditableLabel","onClick_","enabled","isEditing","commit_","untrimmedValue","trim","onKeyDown_","onFocusOut_","isEmpty","editingClass","emptyClass","defaultValue","emptyText","onKeyDown","onBlur","readOnly","autoFocus","Node","onRename","resolveConnection","c","targetHandle","sourceName","targetName","isValidBindingConnection","some","isValidQueueConnection","Debouncer","minDelayMs","minDelayMs_","lastInvocationMs_","pendingInvocation_","f","onCooldown","scheduleSuppressed","invokeInternal","clearTimeout","clearPendingInvocation","delay","invoke","bind","colorValue","cp","toString","join","parseColor","parseComponent","index","image","drawImage","NODE_TYPES","position","isValidConnection","textAlign","valueAsNumber","canvasRef","useRef","useEffect","updateCanvasImage","accept","input","file","files","debouncer","max","isConnectable","EDGE_TYPES","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","anyData","arrowHeadType","markerEndId","path","getBezierPath","end","getMarkerEnd","getEdgeCenter","centerX","centerY","d","markerEnd","getUnusedKey","dict","base","hasOwnProperty","FlowErrorBounary","error","errorInfo","isPassNode","BlueprintEditor","isMounted_","instance_","flowRef_","lastConnectStart_","lastConnectEnd_","update_","elements","buildGraphFromBlueprint","onLoad_","instance","onConnectStart_","clientX","clientY","onConnectStop_","onConnect_","edge","getBoundingClientRect","midpoint","project","addBufferBinding_","addTrivialBinding_","onElementClick_","event","element","onMoveNode_","addShader_","addNode_","addBuffer_","addTexture_","mipLevelCount","sampleCount","addSampler_","addRenderPass_","indexed","addComputePass_","nodeTypes","edgeTypes","elementsSelectable","nodesConnectable","nodesDraggable","onLoad","onConnectStart","onConnectStop","onConnect","onElementClick","onNodeDragStop","assign","otherId","otherNode","CodeEditor","isDecorating_","editorRef_","onChange_","change","getValue","onUpdate_","getAllMarks","m","clearGutter","compilationMessages","line","markText","ch","marker","createElement","classList","setGutterMarker","cm","editor","refresh","contents","onUpdate","options","keyMap","gutters","mutable","TabContainer","activeTab","numChildren","Children","count","tab","tabs","onActivate","renderTabs_","toArray","child","active","_","setActiveTab_","onClose","stopPropagation","Editor","refreshEditor","uniformsRef","refs","onBlueprintChange","removeShader","newName","renameShader","compilationResults","App","frameProducer_","onFullscreenChange_","reconfigure","onBlueprintChange_","onSaveBlueprint_","onLoadBlueprint_","onImportBlueprint_","onDeleteBlueprint_","onCodeMirrorThemeChange_","appState","DEFAULT_APP_STATE","Basic","render1","vertex1","fragment1","Boids","compute1","buffer1","buffer2","compute2","binding1a","binding1b","binding2","binding3","binding4","queue1","queue2","Instances","deepUpdate","isObject","LocalPersistent","initialValue","debounceMs","key_","cachedValue_","debouncer_","localForage","setItem","loadValueFromLocalStorage","serializedValue","localStorage","cachedValue","restoreLocalPersistent","asyncCachedValue","getItem","cachedLegacyValue","restoredValue","default","StrictMode","getElementById","driver","INDEXEDDB","version","storeName"],"mappings":"uNAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,mBAAoB,CACnB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,GAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,uBAAwB,CACvB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,EACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,GAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,mBAAoB,CACnB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,yBAA0B,CACzB,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,EACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,GAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,WAAY,CACX,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,GAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,C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","file":"static/js/main.84700d94.chunk.js","sourcesContent":["var map = {\n\t\"./apl/apl.js\": [\n\t\t139,\n\t\t30\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t140,\n\t\t31\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t141,\n\t\t32\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t142,\n\t\t33\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t143,\n\t\t34\n\t],\n\t\"./clike/clike.js\": [\n\t\t128,\n\t\t2\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t144,\n\t\t35\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t145,\n\t\t36\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t146,\n\t\t37\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t129,\n\t\t38\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t147,\n\t\t39\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t148,\n\t\t40\n\t],\n\t\"./css/css.js\": [\n\t\t125,\n\t\t1\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t149,\n\t\t41\n\t],\n\t\"./d/d.js\": [\n\t\t150,\n\t\t42\n\t],\n\t\"./dart/dart.js\": [\n\t\t151,\n\t\t2,\n\t\t43\n\t],\n\t\"./diff/diff.js\": [\n\t\t152,\n\t\t44\n\t],\n\t\"./django/django.js\": [\n\t\t153,\n\t\t0,\n\t\t1,\n\t\t11\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t154,\n\t\t21\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t155,\n\t\t45\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t156,\n\t\t46\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t157,\n\t\t47\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t158,\n\t\t48\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t159,\n\t\t49\n\t],\n\t\"./elm/elm.js\": [\n\t\t160,\n\t\t50\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t161,\n\t\t51\n\t],\n\t\"./factor/factor.js\": [\n\t\t162,\n\t\t22\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t163,\n\t\t52\n\t],\n\t\"./forth/forth.js\": [\n\t\t164,\n\t\t53\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t165,\n\t\t54\n\t],\n\t\"./gas/gas.js\": [\n\t\t166,\n\t\t55\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t167,\n\t\t4,\n\t\t20\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t168,\n\t\t56\n\t],\n\t\"./go/go.js\": [\n\t\t169,\n\t\t57\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t170,\n\t\t58\n\t],\n\t\"./haml/haml.js\": [\n\t\t171,\n\t\t0,\n\t\t1,\n\t\t14\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t130,\n\t\t16\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t172,\n\t\t26\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t131,\n\t\t59\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t173,\n\t\t60\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t174,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t124,\n\t\t0,\n\t\t1,\n\t\t27\n\t],\n\t\"./http/http.js\": [\n\t\t175,\n\t\t61\n\t],\n\t\"./idl/idl.js\": [\n\t\t176,\n\t\t62\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t126,\n\t\t0\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t177,\n\t\t63\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t178,\n\t\t0,\n\t\t28\n\t],\n\t\"./julia/julia.js\": [\n\t\t179,\n\t\t64\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t180,\n\t\t65\n\t],\n\t\"./lua/lua.js\": [\n\t\t181,\n\t\t66\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t136,\n\t\t4\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t182,\n\t\t67\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t183,\n\t\t68\n\t],\n\t\"./meta.js\": [\n\t\t24\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t184,\n\t\t69\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t185,\n\t\t70\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t186,\n\t\t71\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t187,\n\t\t72\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t188,\n\t\t73\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t189,\n\t\t74\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t190,\n\t\t23\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t191,\n\t\t75\n\t],\n\t\"./octave/octave.js\": [\n\t\t192,\n\t\t76\n\t],\n\t\"./oz/oz.js\": [\n\t\t193,\n\t\t77\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t194,\n\t\t78\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t195,\n\t\t0,\n\t\t79\n\t],\n\t\"./perl/perl.js\": [\n\t\t196,\n\t\t80\n\t],\n\t\"./php/php.js\": [\n\t\t197,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t17\n\t],\n\t\"./pig/pig.js\": [\n\t\t198,\n\t\t81\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t199,\n\t\t82\n\t],\n\t\"./properties/properties.js\": [\n\t\t200,\n\t\t83\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t201,\n\t\t84\n\t],\n\t\"./pug/pug.js\": [\n\t\t137,\n\t\t0,\n\t\t1,\n\t\t3\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t202,\n\t\t85\n\t],\n\t\"./python/python.js\": [\n\t\t132,\n\t\t86\n\t],\n\t\"./q/q.js\": [\n\t\t203,\n\t\t87\n\t],\n\t\"./r/r.js\": [\n\t\t204,\n\t\t88\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t205,\n\t\t89\n\t],\n\t\"./rst/rst.js\": [\n\t\t206,\n\t\t13\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t127,\n\t\t90\n\t],\n\t\"./rust/rust.js\": [\n\t\t207,\n\t\t24\n\t],\n\t\"./sas/sas.js\": [\n\t\t208,\n\t\t91\n\t],\n\t\"./sass/sass.js\": [\n\t\t134,\n\t\t1,\n\t\t92\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t209,\n\t\t93\n\t],\n\t\"./shell/shell.js\": [\n\t\t210,\n\t\t94\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t211,\n\t\t95\n\t],\n\t\"./slim/slim.js\": [\n\t\t212,\n\t\t0,\n\t\t1,\n\t\t15\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t213,\n\t\t96\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t214,\n\t\t97\n\t],\n\t\"./solr/solr.js\": [\n\t\t215,\n\t\t98\n\t],\n\t\"./soy/soy.js\": [\n\t\t216,\n\t\t0,\n\t\t1,\n\t\t18\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t217,\n\t\t99\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t218,\n\t\t100\n\t],\n\t\"./sql/sql.js\": [\n\t\t219,\n\t\t101\n\t],\n\t\"./stex/stex.js\": [\n\t\t133,\n\t\t102\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t138,\n\t\t5\n\t],\n\t\"./swift/swift.js\": [\n\t\t220,\n\t\t103\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t221,\n\t\t104\n\t],\n\t\"./textile/textile.js\": [\n\t\t222,\n\t\t105\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t223,\n\t\t106\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t224,\n\t\t107\n\t],\n\t\"./toml/toml.js\": [\n\t\t225,\n\t\t108\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t226,\n\t\t0,\n\t\t1,\n\t\t12\n\t],\n\t\"./troff/troff.js\": [\n\t\t227,\n\t\t109\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t229,\n\t\t110\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t228,\n\t\t111\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t230,\n\t\t112\n\t],\n\t\"./twig/twig.js\": [\n\t\t231,\n\t\t19\n\t],\n\t\"./vb/vb.js\": [\n\t\t232,\n\t\t113\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t233,\n\t\t114\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t234,\n\t\t115\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t235,\n\t\t116\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t236,\n\t\t117\n\t],\n\t\"./vue/vue.js\": [\n\t\t237,\n\t\t0,\n\t\t1,\n\t\t5,\n\t\t3,\n\t\t9\n\t],\n\t\"./wast/wast.js\": [\n\t\t238,\n\t\t25\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t239,\n\t\t118\n\t],\n\t\"./xml/xml.js\": [\n\t\t123,\n\t\t119\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t240,\n\t\t120\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t241,\n\t\t121\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t242,\n\t\t29\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t135,\n\t\t122\n\t],\n\t\"./z80/z80.js\": [\n\t\t243,\n\t\t123\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 120;\nmodule.exports = webpackAsyncContext;","function doCopy<T>(value: T, traversed: Set<any>): T {\n  if (Array.isArray(value)) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n    return value.map(x => doCopy(x, traversed)) as any;\n  }\n\n  if (value instanceof Blob) {\n    return value;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    if (traversed.has(value)) {\n      throw new Error('cycle detected in deep copy');\n    }\n    traversed.add(value);\n\n    const copy: Record<string, any> = {};\n    for (const [k, v] of Object.entries(value)) {\n      copy[k] = doCopy(v, traversed);\n    }\n    return copy as T;\n  }\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (\n    typeof value === 'number' ||\n    typeof value === 'string' ||\n    typeof value === 'boolean'\n  ) {\n    return value;\n  }\n\n  throw new Error('value not deep-copyable');\n}\n\nexport function deepCopy<T extends Record<string, any>>(value: T): T {\n  return doCopy(value, new Set());\n}\n\nexport function deepEquals<T extends Record<string, any>>(a: T, b: T): boolean {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n    return a.every((x, i) => deepEquals(x, b[i]));\n  }\n\n  if (a instanceof Blob || b instanceof Blob) {\n    return a === b;\n  }\n\n  if (typeof a === 'object' && a !== null) {\n    if (typeof b !== 'object' || b === null) {\n      return false;\n    }\n    return (\n      Object.keys(a).length === Object.keys(b).length &&\n      Object.keys(a).every(k => deepEquals(a[k], b[k]))\n    );\n  }\n\n  return a === b;\n}\n","/// <reference path=\"../index.d.ts\" />\n\n// TODO: polyfill when Crypto impl is not available\nexport const randomUUID = () => crypto.randomUUID();\n","import { randomUUID } from '../base/Uuid';\n\nexport interface Blueprint {\n  nodes: Record<string, NodeDescriptor>;\n  shaders: Record<string, ShaderDescriptor>;\n}\n\nexport type NodeMap = Map<string, NodeDescriptor>;\n\nexport type NodeDescriptor =\n  | BufferNodeDescriptor\n  | ComputeNodeDescriptor\n  | ConnectionNodeDescriptor\n  | RenderNodeDescriptor\n  | SamplerNodeDescriptor\n  | TextureNodeDescriptor;\n\nexport type ConnectionNodeDescriptor =\n  | BufferBindingNodeDescriptor\n  | QueueNodeDescriptor\n  | SamplerBindingNodeDescriptor\n  | TextureBindingNodeDescriptor;\n\nexport type NodeType =\n  | 'render'\n  | 'compute'\n  | 'buffer'\n  | 'texture'\n  | 'sampler'\n  | 'connection';\n\nexport interface NodeDescriptorBase {\n  name: string;\n  position: { x: number; y: number };\n  type: NodeType;\n}\n\nexport interface RenderNodeDescriptor extends NodeDescriptorBase {\n  type: 'render';\n\n  // TODO: Configuration for primitive state, depth/stencil, multisampling\n\n  vertexShader: string;\n  vertexEntryPoint: string;\n\n  fragmentShader: string;\n  fragmentEntryPoint: string;\n\n  topology?: GPUPrimitiveTopology;\n  indexed: boolean;\n  numVertices: number;\n  numInstances: number;\n\n  clear?: boolean;\n  clearColor?: GPUColorDict;\n\n  depthTest?: GPUCompareFunction;\n}\n\nexport interface ComputeNodeDescriptor extends NodeDescriptorBase {\n  type: 'compute';\n  shader: string;\n  entryPoint: string;\n  dispatchSize: { x: number; y: number; z: number };\n}\n\nexport type BufferInitializer = 'zero' | 'random-floats' | 'random-uints';\n\nexport interface BufferNodeDescriptor extends NodeDescriptorBase {\n  type: 'buffer';\n  uuid: string;\n  size: number;\n  init?: BufferInitializer;\n}\n\nexport interface TextureNodeDescriptor extends NodeDescriptorBase {\n  type: 'texture';\n  uuid: string;\n  imageData: null | Blob;\n  imageDataSerialized: null | string;\n  size: GPUExtent3DDict;\n  format: GPUTextureFormat;\n  mipLevelCount: number;\n  sampleCount: number;\n}\n\nexport interface SamplerNodeDescriptor extends NodeDescriptorBase {\n  type: 'sampler';\n  uuid: string;\n\n  // TODO: Filtering, addressing, clamping, comparison, anisotropy.\n}\n\nexport interface ShaderDescriptor {\n  name: string;\n  uuid: string;\n  code: string;\n}\n\nexport type ConnectionType = 'binding' | 'queue';\n\nexport interface ConnectionNodeDescriptorBase extends NodeDescriptorBase {\n  type: 'connection';\n  connectionType: ConnectionType;\n  source: string;\n  target: string;\n}\n\nexport type BindingType = 'buffer' | 'sampler' | 'texture';\n\nexport interface BindingNodeDescriptorBase\n  extends ConnectionNodeDescriptorBase {\n  connectionType: 'binding';\n  bindingType: BindingType;\n  group: number;\n  binding: number;\n}\n\nexport type BufferBindingStorageType = 'storage-read' | 'storage' | 'uniform';\n\nexport interface BufferBindingNodeDescriptor extends BindingNodeDescriptorBase {\n  bindingType: 'buffer';\n  storageType: BufferBindingStorageType;\n}\n\nexport interface TextureBindingNodeDescriptor\n  extends BindingNodeDescriptorBase {\n  bindingType: 'texture';\n}\n\nexport interface SamplerBindingNodeDescriptor\n  extends BindingNodeDescriptorBase {\n  bindingType: 'sampler';\n}\n\nexport type BindingNodeDescriptor =\n  | BufferBindingNodeDescriptor\n  | SamplerBindingNodeDescriptor\n  | TextureBindingNodeDescriptor;\n\nexport interface QueueNodeDescriptor extends ConnectionNodeDescriptorBase {\n  connectionType: 'queue';\n}\n\nexport function canonicalize(blueprint: Blueprint) {\n  const data = blueprint as any;\n  for (const n of Object.values(data.nodes)) {\n    const node = n as any;\n    if (\n      (node.type === 'buffer' ||\n        node.type === 'texture' ||\n        node.type === 'sampler') &&\n      !node.uuid\n    ) {\n      node.uuid = randomUUID();\n    }\n  }\n  for (const s of Object.values(data.shaders)) {\n    const shader = s as any;\n    if (!shader.uuid) {\n      shader.uuid = randomUUID();\n    }\n  }\n}\n","const REACQUIRE_ON_LOST_DELAY_MS = 1000;\n\ntype AcquiredHandler = (() => void) | (() => Promise<void>);\ntype LostHandler = (() => void) | (() => Promise<void>);\n\nexport class Gpu {\n  private adapter_: null | GPUAdapter;\n  private device_: null | GPUDevice;\n  private lost_: boolean;\n  private pendingAcquisition_: null | Promise<void>;\n\n  onAcquired: null | AcquiredHandler;\n  onLost: null | LostHandler;\n\n  constructor() {\n    this.adapter_ = null;\n    this.device_ = null;\n    this.lost_ = false;\n    this.pendingAcquisition_ = null;\n    this.onAcquired = null;\n    this.onLost = null;\n    this.acquire();\n  }\n\n  get isAcquired() {\n    return this.adapter_ !== null;\n  }\n  get isLost() {\n    return !this.isAcquired;\n  }\n  get adapter() {\n    return this.adapter_;\n  }\n  get device() {\n    return this.device_;\n  }\n\n  acquire = async () => {\n    if (this.pendingAcquisition_ === null) {\n      this.pendingAcquisition_ = this.acquireInternal_();\n    }\n    return this.pendingAcquisition_;\n  };\n\n  release = () => {\n    if (!this.isAcquired) {\n      throw new Error('not acquired');\n    }\n\n    this.adapter_ = null;\n    this.device_ = null;\n  };\n\n  async acquireInternal_() {\n    if (this.isAcquired) {\n      throw new Error('already acquired.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('no webgpu adapter available');\n    }\n\n    try {\n      const device = await adapter.requestDevice();\n      if (!device) {\n        throw new Error('no webgpu device available');\n      }\n      this.device_ = device;\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.pendingAcquisition_ = null;\n    this.adapter_ = adapter;\n    this.device_!.lost.then(this.onLost_);\n    if (this.onAcquired !== null) {\n      await this.onAcquired();\n    }\n  }\n\n  onLost_ = async () => {\n    console.warn('Lost GPU. Reacquiring after short delay...');\n\n    this.adapter_ = null;\n    this.device_ = null;\n    if (this.onLost != null) {\n      await this.onLost();\n    }\n    await new Promise(resolve =>\n      setTimeout(resolve, REACQUIRE_ON_LOST_DELAY_MS)\n    );\n  };\n}\n","import { ProgramMap } from './ProgramMap';\n\ninterface HasUuid {\n  uuid: string;\n}\n\nexport interface CompiledResource {\n  dispose: () => void;\n}\n\ntype Cache<Resource extends CompiledResource> = Map<string, null | Resource>;\n\nexport interface ResourceCompiler<\n  Props extends HasUuid,\n  Resource extends CompiledResource\n> {\n  needsRecompile(\n    newProps: Props,\n    resource: Resource,\n    programMap: ProgramMap\n  ): boolean;\n  compile(props: Props, programMap: ProgramMap): Promise<null | Resource>;\n}\n\nexport class CompiledResourceCache<\n  Props extends HasUuid,\n  Resource extends CompiledResource\n> {\n  private readonly compiler_: ResourceCompiler<Props, Resource>;\n  private readonly cache_: Cache<Resource>;\n\n  constructor(compiler: ResourceCompiler<Props, Resource>) {\n    this.compiler_ = compiler;\n    this.cache_ = new Map();\n  }\n\n  get keys() {\n    return this.cache_.keys();\n  }\n\n  get entries() {\n    return Array.from(this.cache_.entries()).filter(\n      ([key, value]) => value !== null\n    ) as [[string, Resource]];\n  }\n\n  get(uuid: string): null | Resource {\n    return this.cache_.get(uuid) ?? null;\n  }\n\n  releaseKeysAndDisposeRemainder(keys: Iterable<string>) {\n    for (const key of keys) {\n      this.cache_.delete(key);\n    }\n\n    this.dispose();\n  }\n\n  dispose() {\n    for (const resource of Object.values(this.cache_)) {\n      if (resource !== null) {\n        resource.dispose();\n      }\n    }\n  }\n\n  async compile(\n    entries: Iterable<Props>,\n    programMap: ProgramMap\n  ): Promise<CompiledResourceCache<Props, Resource>> {\n    const newCache = new CompiledResourceCache<Props, Resource>(this.compiler_);\n    const pendingUpdates: Map<Props, Promise<null | Resource>> = new Map();\n    for (const props of entries) {\n      const entry = this.cache_.get(props.uuid);\n      if (entry && !this.compiler_.needsRecompile(props, entry, programMap)) {\n        newCache.cache_.set(props.uuid, entry);\n      } else {\n        pendingUpdates.set(props, this.compiler_.compile(props, programMap));\n      }\n    }\n\n    for (const [props, update] of pendingUpdates.entries()) {\n      newCache.cache_.set(props.uuid, await update);\n    }\n    return newCache;\n  }\n}\n","import { BufferInitializer, BufferNodeDescriptor } from '../Blueprint';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nfunction fillRandomUint32Array(data: Uint32Array) {\n  for (let offset = 0; offset < data.byteLength; offset += 65536) {\n    const size = Math.min(65536, data.byteLength - offset);\n    const view = new Uint32Array(data.buffer, offset, size / 4);\n    crypto.getRandomValues(view);\n  }\n}\n\nexport class Buffer implements CompiledResource {\n  private readonly size_: number;\n  private readonly init_: BufferInitializer;\n  private readonly usage_: GPUBufferUsageFlags;\n  private readonly buffer_: GPUBuffer;\n\n  constructor(\n    size: number,\n    init: BufferInitializer,\n    usage: GPUBufferUsageFlags,\n    buffer: GPUBuffer\n  ) {\n    this.size_ = size;\n    this.init_ = init;\n    this.usage_ = usage;\n    this.buffer_ = buffer;\n  }\n\n  get size() {\n    return this.size_;\n  }\n  get init() {\n    return this.init_;\n  }\n  get usage() {\n    return this.usage_;\n  }\n  get buffer() {\n    return this.buffer_;\n  }\n\n  dispose() {\n    this.buffer_.destroy();\n  }\n}\n\nexport class BufferCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: BufferNodeDescriptor,\n    buffer: Buffer,\n    programMap: ProgramMap\n  ) {\n    return (\n      newDescriptor.size !== buffer.size ||\n      newDescriptor.init !== buffer.init ||\n      programMap.bufferUsage.get(newDescriptor.uuid) !== buffer.usage\n    );\n  }\n\n  async compile(descriptor: BufferNodeDescriptor, programMap: ProgramMap) {\n    const usage = programMap.bufferUsage.get(descriptor.uuid);\n    if (!usage) {\n      // No need to do anything, this buffer isn't used by anyone.\n      return null;\n    }\n\n    const mappedAtCreation = descriptor.init !== 'zero';\n    const buffer = this.device_.createBuffer({\n      size: descriptor.size,\n      usage,\n      mappedAtCreation,\n    });\n    if (!buffer) {\n      return null;\n    }\n\n    if (mappedAtCreation) {\n      const data = buffer.getMappedRange(0, descriptor.size);\n      const uints = new Uint32Array(data);\n      const floats = new Float32Array(data);\n      fillRandomUint32Array(uints);\n      if (descriptor.init === 'random-floats') {\n        uints.forEach((x, i) => {\n          floats[i] = x / 2 ** 31 - 1;\n        });\n      }\n      buffer.unmap();\n    }\n\n    return new Buffer(\n      descriptor.size,\n      descriptor.init ?? 'zero',\n      usage,\n      buffer\n    );\n  }\n}\n\nexport type CompiledBufferCache = CompiledResourceCache<\n  BufferNodeDescriptor,\n  Buffer\n>;\n\nexport function createCompiledBufferCache(\n  device: GPUDevice\n): CompiledBufferCache {\n  return new CompiledResourceCache<BufferNodeDescriptor, Buffer>(\n    new BufferCompiler(device)\n  );\n}\n","import { SamplerNodeDescriptor } from '../Blueprint';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nexport class Sampler implements CompiledResource {\n  private readonly sampler_: GPUSampler;\n\n  constructor(sampler: GPUSampler) {\n    this.sampler_ = sampler;\n  }\n\n  get sampler() {\n    return this.sampler_;\n  }\n\n  dispose() {}\n}\n\nexport class SamplerCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: SamplerNodeDescriptor,\n    sampler: Sampler,\n    programMap: ProgramMap\n  ) {\n    return false;\n  }\n\n  async compile(descriptor: SamplerNodeDescriptor, programMap: ProgramMap) {\n    return new Sampler(this.device_.createSampler());\n  }\n}\n\nexport type CompiledSamplerCache = CompiledResourceCache<\n  SamplerNodeDescriptor,\n  Sampler\n>;\n\nexport function createCompiledSamplerCache(\n  device: GPUDevice\n): CompiledSamplerCache {\n  return new CompiledResourceCache<SamplerNodeDescriptor, Sampler>(\n    new SamplerCompiler(device)\n  );\n}\n","import { UniformLayout } from './UniformLayout';\n\nexport const BUILTIN_UNIFORMS_WGSL = `// All shader sources are prefixed with the definitions below, providing a\n// set of builtin uniform inputs which are updated by the application before\n// each frame iteration.\n[[block]] struct BuiltinUniforms {\n  // The time in seconds since the application loaded.\n  time: f32;\n\n  // The time in seconds since the last frame iteration. Zero for the first\n  // frame.\n  timeDelta: f32;\n\n  // The count of the current frame. The first frame is frame 0.\n  frame: u32;\n\n  // The resolution in pixels of the main output texture displayed by the app.\n  [[align(16)]] resolution: vec2<u32>;\n};\n\n// All builtin uniforms are accessible to all shaders through this global.\n[[group(0), binding(0)]] var<uniform> builtinUniforms: BuiltinUniforms;\n`;\n\nexport const BUILTIN_UNIFORMS: UniformLayout = {\n  fields: [\n    { name: 'time', type: 'f32' },\n    { name: 'timeDelta', type: 'f32' },\n    { name: 'frame', type: 'u32' },\n    { name: 'resolution', type: { vectorType: 'vec2', componentType: 'u32' } },\n  ],\n};\n","import { ShaderDescriptor } from '../Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../BuiltinUniforms';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nconst BUILTIN_WGSL_NUM_LINES = BUILTIN_UNIFORMS_WGSL.split(/\\r\\n|\\r|\\n/).length;\n\nexport type ShaderCompilationMessageType = 'info' | 'warning' | 'error';\n\nexport interface ShaderCompilationMessage {\n  message: string;\n  type: ShaderCompilationMessageType;\n  lineNum: number;\n  linePos: number;\n  offset: number;\n  length: number;\n}\n\nexport interface ShaderCompilationResult {\n  module: null | GPUShaderModule;\n  messages: ShaderCompilationMessage[];\n}\n\nexport class Shader implements CompiledResource {\n  private readonly code_: string;\n  private readonly module_: null | GPUShaderModule;\n  private readonly messages_: ShaderCompilationMessage[];\n\n  constructor(\n    code: string,\n    module: null | GPUShaderModule,\n    messages: ShaderCompilationMessage[]\n  ) {\n    this.code_ = code;\n    this.module_ = module;\n    this.messages_ = messages;\n  }\n\n  get code() {\n    return this.code_;\n  }\n  get module() {\n    return this.module_;\n  }\n  get messages() {\n    return this.messages_;\n  }\n\n  dispose() {}\n}\n\nexport class ShaderCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: ShaderDescriptor,\n    shader: Shader,\n    programMap: ProgramMap\n  ) {\n    return newDescriptor.code !== shader.code;\n  }\n\n  async compile(descriptor: ShaderDescriptor, programMap: ProgramMap) {\n    const module = this.device_.createShaderModule({\n      code: BUILTIN_UNIFORMS_WGSL + descriptor.code,\n    });\n    const info = await module.compilationInfo();\n    let failed = false;\n    const messages = [];\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        failed = true;\n      }\n      messages.push({\n        message: message.message,\n        type: message.type as ShaderCompilationMessageType,\n        lineNum: message.lineNum - BUILTIN_WGSL_NUM_LINES,\n        linePos: message.linePos,\n        offset: message.offset,\n        length: message.length,\n      });\n    }\n\n    return new Shader(descriptor.code, failed ? null : module, messages);\n  }\n}\n\nexport type CompiledShaderCache = CompiledResourceCache<\n  ShaderDescriptor,\n  Shader\n>;\n\nexport function createCompiledShaderCache(\n  device: GPUDevice\n): CompiledShaderCache {\n  return new CompiledResourceCache<ShaderDescriptor, Shader>(\n    new ShaderCompiler(device)\n  );\n}\n","import { TextureNodeDescriptor } from '../Blueprint';\nimport {\n  CompiledResource,\n  CompiledResourceCache,\n} from './CompiledResourceCache';\nimport { ProgramMap } from './ProgramMap';\n\nexport class Texture implements CompiledResource {\n  private readonly imageData_: Blob;\n  private readonly bitmap_: ImageBitmap;\n  private readonly texture_: GPUTexture;\n\n  constructor(imageData: Blob, bitmap: ImageBitmap, texture: GPUTexture) {\n    this.imageData_ = imageData;\n    this.bitmap_ = bitmap;\n    this.texture_ = texture;\n  }\n\n  get imageData() {\n    return this.imageData_;\n  }\n\n  get bitmap() {\n    return this.bitmap_;\n  }\n\n  get texture() {\n    return this.texture_;\n  }\n\n  dispose() {\n    this.texture_.destroy();\n  }\n}\n\nexport class TextureCompiler {\n  private readonly device_: GPUDevice;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n  }\n\n  needsRecompile(\n    newDescriptor: TextureNodeDescriptor,\n    texture: Texture,\n    programMap: ProgramMap\n  ) {\n    return newDescriptor.imageData !== texture.imageData;\n  }\n\n  async compile(descriptor: TextureNodeDescriptor, programMap: ProgramMap) {\n    if (!descriptor.imageData) {\n      return null;\n    }\n\n    const bitmap = await createImageBitmap(descriptor.imageData);\n    const size = { width: bitmap.width, height: bitmap.height };\n    const texture = this.device_.createTexture({\n      size,\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    this.device_.queue.copyExternalImageToTexture(\n      { source: bitmap },\n      { texture },\n      size\n    );\n    return new Texture(descriptor.imageData, bitmap, texture);\n  }\n}\n\nexport type CompiledTextureCache = CompiledResourceCache<\n  TextureNodeDescriptor,\n  Texture\n>;\n\nexport function createCompiledTextureCache(\n  device: GPUDevice\n): CompiledTextureCache {\n  return new CompiledResourceCache<TextureNodeDescriptor, Texture>(\n    new TextureCompiler(device)\n  );\n}\n","import { ComputeNodeDescriptor, RenderNodeDescriptor } from '../Blueprint';\n\nexport type PassType = 'render' | 'compute';\n\nexport type LinkedPass = LinkedRenderPass | LinkedComputePass;\n\nexport interface LinkedRenderPass {\n  type: 'render';\n  descriptor: RenderNodeDescriptor;\n  bundle: GPURenderBundle;\n}\n\nexport interface LinkedComputePass {\n  type: 'compute';\n  descriptor: ComputeNodeDescriptor;\n  bindGroups: GPUBindGroup[];\n  pipeline: GPUComputePipeline;\n}\n\nexport class Executable {\n  private readonly device_: GPUDevice;\n  private readonly passes_: LinkedPass[];\n  private outputDepthStencilTexture_: null | GPUTexture;\n  private outputDepthStencilTextureSize_: GPUExtent3DDict;\n\n  constructor(device: GPUDevice, passes: LinkedPass[]) {\n    this.device_ = device;\n    this.passes_ = passes;\n    this.outputDepthStencilTexture_ = null;\n    this.outputDepthStencilTextureSize_ = { width: 0, height: 0 };\n  }\n\n  run(texture: GPUTexture, { width, height }: GPUExtent3DDict) {\n    const device = this.device_;\n\n    // TODO: configurable depth/stencil state\n    if (\n      this.outputDepthStencilTexture_ === null ||\n      this.outputDepthStencilTextureSize_.width !== width ||\n      this.outputDepthStencilTextureSize_.height !== height\n    ) {\n      if (this.outputDepthStencilTexture_ !== null) {\n        this.outputDepthStencilTexture_.destroy();\n        this.outputDepthStencilTexture_ = null;\n      }\n\n      this.outputDepthStencilTexture_ = device.createTexture({\n        size: { width, height },\n        format: 'depth24plus-stencil8',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n      this.outputDepthStencilTextureSize_ = { width, height };\n    }\n\n    device.queue.submit([this.encodeCommands_(texture)]);\n  }\n\n  encodeCommands_(texture: GPUTexture) {\n    const encoder = this.device_.createCommandEncoder();\n    for (const pass of this.passes_) {\n      switch (pass.type) {\n        case 'render':\n          this.encodeRenderCommands_(pass, encoder, texture);\n          break;\n\n        case 'compute':\n          this.encodeComputeCommands_(pass, encoder);\n          break;\n      }\n    }\n    return encoder.finish();\n  }\n\n  encodeRenderCommands_(\n    pass: LinkedRenderPass,\n    encoder: GPUCommandEncoder,\n    texture: GPUTexture\n  ) {\n    const loadValue = pass.descriptor.clear\n      ? pass.descriptor.clearColor ?? { r: 0, g: 0, b: 0, a: 1 }\n      : ('load' as const);\n    const depthStencilTexture = this.outputDepthStencilTexture_!;\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: texture.createView(),\n          loadValue,\n          storeOp: 'store' as const,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthLoadValue: pass.descriptor.clear ? 1 : 'load',\n        depthStoreOp: 'store',\n        stencilLoadValue: 1,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPass.executeBundles([pass.bundle]);\n    renderPass.endPass();\n  }\n\n  encodeComputeCommands_(pass: LinkedComputePass, encoder: GPUCommandEncoder) {\n    const computePass = encoder.beginComputePass();\n    const dispatchSize = pass.descriptor.dispatchSize;\n    computePass.setPipeline(pass.pipeline);\n    pass.bindGroups.forEach((group, i) => {\n      computePass.setBindGroup(i, group);\n    });\n    computePass.dispatch(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n    computePass.endPass();\n  }\n}\n","import {\n  Blueprint,\n  ComputeNodeDescriptor,\n  RenderNodeDescriptor,\n} from '../Blueprint';\nimport { CompiledResourceBundle } from './CompiledResourceBundle';\nimport {\n  LinkedComputePass,\n  LinkedPass,\n  LinkedRenderPass,\n  Executable,\n} from './Executable';\nimport { BindGroupEntry, PassNode } from './ProgramMap';\n\ninterface LinkedBindings {\n  pipelineLayout: GPUPipelineLayout;\n  bindGroups: GPUBindGroup[];\n}\n\nfunction getResourceForBinding(\n  entry: BindGroupEntry,\n  resources: CompiledResourceBundle\n): null | GPUBindingResource {\n  const node = entry.node;\n  switch (node.type) {\n    case 'buffer':\n      const buffer = resources.buffers.get(node.uuid);\n      if (!buffer) {\n        console.warn(`unable to bind missing buffer ${node.name}`);\n        return null;\n      }\n      return { buffer: buffer.buffer };\n\n    case 'texture':\n      const texture = resources.textures.get(node.uuid);\n      if (!texture) {\n        console.warn(`unable to bind missing texture ${node.name}`);\n        return null;\n      }\n      return texture.texture.createView();\n\n    case 'sampler':\n      const sampler = resources.samplers.get(node.uuid);\n      if (!sampler) {\n        console.warn(`unable to bind missing sampler ${node.name}`);\n        return null;\n      }\n      return sampler.sampler;\n  }\n}\n\nfunction linkBindings(\n  passId: string,\n  device: GPUDevice,\n  resources: CompiledResourceBundle,\n  visibility: GPUShaderStageFlags,\n  builtinUniforms: GPUBuffer\n): LinkedBindings {\n  const groups = resources.programMap!.bindings.get(passId) ?? [];\n  const layoutEntries: GPUBindGroupLayoutEntry[][] = [];\n  const groupEntries: GPUBindGroupEntry[][] = [];\n  for (const group of groups) {\n    const newLayoutEntries: GPUBindGroupLayoutEntry[] = [];\n    const newGroupEntries: GPUBindGroupEntry[] = [];\n    for (const entry of group.values()) {\n      const resource = getResourceForBinding(entry, resources);\n      if (!resource) {\n        continue;\n      }\n\n      newLayoutEntries.push(entry.layoutEntry);\n      newGroupEntries.push({\n        binding: entry.layoutEntry.binding,\n        resource,\n      });\n    }\n    layoutEntries.push(newLayoutEntries);\n    groupEntries.push(newGroupEntries);\n  }\n\n  if (layoutEntries.length === 0) {\n    layoutEntries.push([]);\n    groupEntries.push([]);\n  }\n\n  layoutEntries[0].unshift({\n    binding: 0,\n    visibility,\n    buffer: { type: 'uniform' },\n  });\n  groupEntries[0].unshift({\n    binding: 0,\n    resource: { buffer: builtinUniforms },\n  });\n\n  const bindGroupLayouts: GPUBindGroupLayout[] = [];\n  const bindGroups: GPUBindGroup[] = [];\n  layoutEntries.forEach((entries, i) => {\n    const layout = device.createBindGroupLayout({ entries });\n    bindGroupLayouts.push(layout);\n    bindGroups.push(\n      device.createBindGroup({\n        layout,\n        entries: groupEntries[i],\n      })\n    );\n  });\n\n  const pipelineLayout = device.createPipelineLayout({ bindGroupLayouts });\n  return { pipelineLayout, bindGroups };\n}\n\nfunction linkRenderPass(\n  device: GPUDevice,\n  id: string,\n  node: RenderNodeDescriptor,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | LinkedRenderPass {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const vertexDescriptor = blueprint.shaders[node.vertexShader];\n  const fragmentDescriptor = blueprint.shaders[node.fragmentShader];\n  if (!vertexDescriptor || !fragmentDescriptor) {\n    return null;\n  }\n  const vertexShader = resources.shaders.get(vertexDescriptor.uuid);\n  const fragmentShader = resources.shaders.get(fragmentDescriptor.uuid);\n  if (\n    !vertexShader ||\n    !fragmentShader ||\n    !vertexShader.module ||\n    !fragmentShader.module\n  ) {\n    return null;\n  }\n\n  const bindings = linkBindings(\n    id,\n    device,\n    resources,\n    GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    builtinUniforms\n  );\n  const topology = node.topology ?? 'triangle-list';\n  const stripIndexFormat =\n    topology === 'line-strip' || topology === 'triangle-strip'\n      ? 'uint32'\n      : undefined;\n  const pipeline = device.createRenderPipeline({\n    layout: bindings.pipelineLayout,\n    vertex: {\n      module: vertexShader.module,\n      entryPoint: node.vertexEntryPoint,\n    },\n    primitive: {\n      topology,\n      stripIndexFormat,\n      cullMode: 'none',\n    },\n    fragment: {\n      targets: [{ format: outputFormat }],\n      module: fragmentShader.module,\n      entryPoint: node.fragmentEntryPoint,\n    },\n    depthStencil: {\n      format: 'depth24plus-stencil8',\n      depthWriteEnabled: true,\n      depthCompare: node.depthTest ?? 'always',\n    },\n  });\n  const encoder = device.createRenderBundleEncoder({\n    colorFormats: [outputFormat],\n    depthStencilFormat: 'depth24plus-stencil8',\n  });\n  encoder.setPipeline(pipeline);\n  bindings.bindGroups.forEach((group, i) => {\n    if (group) {\n      encoder.setBindGroup(i, group);\n    }\n  });\n  encoder.draw(node.numVertices, node.numInstances);\n  return {\n    type: 'render',\n    descriptor: node,\n    bundle: encoder.finish(),\n  };\n}\n\nfunction linkComputePass(\n  device: GPUDevice,\n  id: string,\n  node: ComputeNodeDescriptor,\n  builtinUniforms: GPUBuffer,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | LinkedComputePass {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const shaderDescriptor = blueprint.shaders[node.shader];\n  if (!shaderDescriptor) {\n    return null;\n  }\n  const shader = resources.shaders.get(shaderDescriptor.uuid);\n  if (!shader || !shader.module) {\n    return null;\n  }\n\n  const bindings = linkBindings(\n    id,\n    device,\n    resources,\n    GPUShaderStage.COMPUTE,\n    builtinUniforms\n  );\n  const pipeline = device.createComputePipeline({\n    layout: bindings.pipelineLayout,\n    compute: {\n      module: shader.module,\n      entryPoint: node.entryPoint,\n    },\n  });\n  return {\n    type: 'compute',\n    descriptor: node,\n    bindGroups: bindings.bindGroups,\n    pipeline,\n  };\n}\n\nfunction linkPass(\n  device: GPUDevice,\n  id: string,\n  node: PassNode,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | LinkedPass {\n  if (node.type === 'render') {\n    return linkRenderPass(\n      device,\n      id,\n      node,\n      builtinUniforms,\n      outputFormat,\n      resources,\n      blueprint\n    );\n  }\n  return linkComputePass(\n    device,\n    id,\n    node,\n    builtinUniforms,\n    resources,\n    blueprint\n  );\n}\n\nexport function linkProgram(\n  device: GPUDevice,\n  builtinUniforms: GPUBuffer,\n  outputFormat: GPUTextureFormat,\n  resources: CompiledResourceBundle,\n  blueprint: Blueprint\n): null | Executable {\n  if (resources.programMap === null) {\n    return null;\n  }\n\n  const passes = resources.programMap.passes;\n  const linkedPasses = resources.programMap.passOrder.map(id =>\n    linkPass(\n      device,\n      id,\n      passes.get(id)!,\n      builtinUniforms,\n      outputFormat,\n      resources,\n      blueprint\n    )\n  );\n  return new Executable(\n    device,\n    linkedPasses.filter(pass => pass !== null) as LinkedPass[]\n  );\n}\n","import { deepCopy } from '../../base/Util';\nimport {\n  Blueprint,\n  BindingNodeDescriptor,\n  BufferBindingNodeDescriptor,\n  BufferNodeDescriptor,\n  ComputeNodeDescriptor,\n  RenderNodeDescriptor,\n  SamplerBindingNodeDescriptor,\n  SamplerNodeDescriptor,\n  ShaderDescriptor,\n  TextureBindingNodeDescriptor,\n  TextureNodeDescriptor,\n} from '../Blueprint';\n\n// TODO: This should be devised dynamically from device limits.\nconst kMaxBindGroups = 4;\n\nexport type PassNode = RenderNodeDescriptor | ComputeNodeDescriptor;\n\nexport type ShaderMap = Map<string, ShaderDescriptor>;\nexport type BufferMap = Map<string, BufferNodeDescriptor>;\nexport type TextureMap = Map<string, TextureNodeDescriptor>;\nexport type SamplerMap = Map<string, SamplerNodeDescriptor>;\nexport type PassMap = Map<string, PassNode>;\n\nexport type BindableNode =\n  | BufferNodeDescriptor\n  | TextureNodeDescriptor\n  | SamplerNodeDescriptor;\n\nexport interface BindGroupEntry {\n  layoutEntry: GPUBindGroupLayoutEntry;\n  node: BindableNode;\n}\n\nexport type BindGroup = Map<number, BindGroupEntry>;\nexport type BindingsMap = Map<string, BindGroup[]>;\n\nexport type PassType = 'render' | 'compute';\n\nexport type BufferUsageMap = Map<string, GPUBufferUsageFlags>;\nexport type TextureUsageMap = Map<string, GPUTextureUsageFlags>;\n\ninterface QueueDeps {\n  // Maps each pass ID to the set of pass IDs which depend upon it.\n  incoming: Map<string, Set<string>>;\n\n  // Maps each pass ID to the set of pass IDs on which it depends.\n  outgoing: Map<string, Set<string>>;\n}\n\nexport class ProgramMap {\n  public readonly blueprint: Blueprint;\n  public readonly shaders: ShaderMap;\n  public readonly buffers: BufferMap;\n  public readonly textures: TextureMap;\n  public readonly samplers: SamplerMap;\n  public readonly passes: PassMap;\n  public readonly bindings: BindingsMap;\n  public readonly bufferUsage: BufferUsageMap;\n  public readonly textureUsage: TextureUsageMap;\n  public readonly passOrder: string[];\n\n  constructor(blueprint: Blueprint) {\n    this.blueprint = deepCopy(blueprint);\n    this.shaders = new Map(\n      Object.values(this.blueprint.shaders).map(s => [s.uuid, s])\n    );\n    this.buffers = new Map();\n    this.textures = new Map();\n    this.samplers = new Map();\n    this.passes = new Map();\n    this.bindings = new Map();\n    this.bufferUsage = new Map();\n    this.textureUsage = new Map();\n    this.passOrder = [];\n    this.populate_();\n  }\n\n  populate_() {\n    const bindingNodes = [];\n    const queueDeps = { incoming: new Map(), outgoing: new Map() };\n    for (const [id, node] of Object.entries(this.blueprint.nodes)) {\n      switch (node.type) {\n        case 'buffer':\n          this.buffers.set(node.uuid, node);\n          break;\n\n        case 'texture':\n          this.textures.set(node.uuid, node);\n          break;\n\n        case 'sampler':\n          this.samplers.set(node.uuid, node);\n          break;\n\n        case 'connection':\n          switch (node.connectionType) {\n            case 'binding':\n              bindingNodes.push(node);\n              break;\n\n            case 'queue':\n              const incoming = queueDeps.incoming.get(node.target) ?? new Set();\n              const outgoing = queueDeps.outgoing.get(node.source) ?? new Set();\n              incoming.add(node.source);\n              outgoing.add(node.target);\n              queueDeps.incoming.set(node.target, incoming);\n              queueDeps.outgoing.set(node.source, outgoing);\n              break;\n          }\n          break;\n\n        case 'compute':\n          this.passes.set(id, node);\n          break;\n\n        case 'render':\n          this.passes.set(id, node);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.populateBindings_(bindingNodes);\n    this.computePassOrder_(queueDeps);\n  }\n\n  populateBindings_(bindingNodes: BindingNodeDescriptor[]) {\n    for (const node of bindingNodes) {\n      const pass = this.passes.get(node.target);\n      if (!pass) {\n        console.warn(`ignoring unknown pass: ${node.target}`);\n        continue;\n      }\n      if (node.group >= kMaxBindGroups) {\n        console.warn(`invalid bind group ${node.group}`);\n        continue;\n      }\n      let groups = this.bindings.get(node.target);\n      if (!groups) {\n        groups = [];\n        this.bindings.set(node.target, groups);\n      }\n\n      const bindingNode = this.blueprint.nodes[node.source];\n      if (!bindingNode || bindingNode.type !== node.bindingType) {\n        console.warn(`ignoring unknown binding source ${node.source}`);\n        continue;\n      }\n      switch (node.bindingType) {\n        case 'buffer':\n          const buffer = this.buffers.get(bindingNode.uuid);\n          if (!buffer) {\n            console.warn(`ignoring unknown buffer: ${node.source}`);\n            continue;\n          }\n          this.compileBufferBinding_(pass.type, groups, buffer, node);\n          break;\n\n        case 'texture':\n          const texture = this.textures.get(bindingNode.uuid);\n          if (!texture) {\n            console.warn(`ignoring unknown texture: ${node.source}`);\n            continue;\n          }\n          this.compileTextureBinding_(pass.type, groups, texture, node);\n          break;\n\n        case 'sampler':\n          const sampler = this.samplers.get(bindingNode.uuid);\n          if (!sampler) {\n            console.warn(`ignoring unknown sampler: ${node.source}`);\n            continue;\n          }\n          this.compileSamplerBinding_(pass.type, groups, sampler, node);\n          break;\n      }\n    }\n  }\n\n  computePassOrder_(queueDeps: QueueDeps) {\n    // The initial working set is the set of all passes with no incoming queue\n    // dependencies.\n    const startNodes: Set<string> = new Set(this.passes.keys());\n    for (const target of queueDeps.incoming.keys()) {\n      startNodes.delete(target);\n    }\n\n    // Iteratively append nodes as their dependencies are met.\n    let thisPhase = Array.from(startNodes);\n    while (thisPhase.length !== 0) {\n      this.passOrder.push(...thisPhase);\n      const nextPhase: string[] = [];\n      for (const added of thisPhase) {\n        const targets = queueDeps.outgoing.get(added);\n        if (!targets) {\n          continue;\n        }\n        for (const target of targets.values()) {\n          const incomingDeps = queueDeps.incoming.get(target);\n          if (incomingDeps) {\n            incomingDeps.delete(added);\n            if (incomingDeps.size === 0) {\n              nextPhase.push(target);\n            }\n          }\n        }\n      }\n      thisPhase = nextPhase;\n    }\n  }\n\n  compileBufferBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    buffer: BufferNodeDescriptor,\n    binding: BufferBindingNodeDescriptor\n  ) {\n    let newUsage = 0;\n    let bufferType: GPUBufferBindingType;\n    switch (binding.storageType) {\n      case 'storage-read':\n        newUsage = GPUBufferUsage.STORAGE;\n        bufferType = 'read-only-storage';\n        break;\n\n      case 'storage':\n        newUsage = GPUBufferUsage.STORAGE;\n        bufferType = 'storage';\n        break;\n\n      case 'uniform':\n        newUsage = GPUBufferUsage.UNIFORM;\n        bufferType = 'uniform';\n        break;\n    }\n\n    this.bufferUsage.set(\n      buffer.uuid,\n      (this.bufferUsage.get(buffer.uuid) ?? 0) | newUsage\n    );\n\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      buffer: { type: bufferType },\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, buffer);\n  }\n\n  compileTextureBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    texture: TextureNodeDescriptor,\n    binding: TextureBindingNodeDescriptor\n  ) {\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      texture: {},\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, texture);\n  }\n\n  compileSamplerBinding_(\n    passType: PassType,\n    groups: BindGroup[],\n    sampler: SamplerNodeDescriptor,\n    binding: SamplerBindingNodeDescriptor\n  ) {\n    const layoutEntry: GPUBindGroupLayoutEntry = {\n      binding: binding.binding,\n      visibility: visibilityForPass(passType),\n      sampler: {},\n    };\n\n    addBindGroupEntry(groups, binding.group, layoutEntry, sampler);\n  }\n}\n\nfunction addBindGroupEntry(\n  groups: BindGroup[],\n  group: number,\n  layoutEntry: GPUBindGroupLayoutEntry,\n  node: BindableNode\n) {\n  while (group >= groups.length) {\n    groups.push(new Map());\n  }\n  const binding = layoutEntry.binding;\n  const groupBindings = groups[group];\n  if (groupBindings.has(binding)) {\n    console.warn(`ignoring duplicate binding (${group}, ${binding})`);\n    return;\n  }\n  groupBindings.set(binding, { layoutEntry, node });\n}\n\nfunction visibilityForPass(passType: PassType): GPUShaderStageFlags {\n  if (passType === 'render') {\n    return GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT;\n  }\n  return GPUShaderStage.COMPUTE;\n}\n","import { Blueprint } from './Blueprint';\nimport {\n  CompiledResourceBundle,\n  createCompiledResourceBundle,\n} from './program/CompiledResourceBundle';\nimport { Executable } from './program/Executable';\nimport { linkProgram } from './program/Linker';\nimport { ProgramMap } from './program/ProgramMap';\nimport { ShaderCompilationMessage } from './program/Shader';\n\nexport type ShaderCompilationResults = Map<string, ShaderCompilationMessage[]>;\n\nexport type ShadersCompiledHandler = (\n  results: ShaderCompilationResults\n) => void;\n\nexport class Program {\n  private readonly device_: GPUDevice;\n  private readonly builtinUniforms_: GPUBuffer;\n  private resources_: CompiledResourceBundle;\n  private executable_: null | Executable;\n  private blueprint_: null | Blueprint;\n  private lastCompile_: null | Promise<CompiledResourceBundle>;\n  private outputFormat_: GPUTextureFormat;\n  private onShadersCompiled_: null | ShadersCompiledHandler;\n\n  constructor(device: GPUDevice) {\n    this.device_ = device;\n    this.builtinUniforms_ = device.createBuffer({\n      size: 24,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    this.executable_ = null;\n    this.blueprint_ = null;\n    this.lastCompile_ = null;\n    this.resources_ = createCompiledResourceBundle(device);\n    this.outputFormat_ = 'bgra8unorm';\n    this.onShadersCompiled_ = null;\n  }\n\n  get resources() {\n    return this.resources_;\n  }\n\n  set onShadersCompiled(handler: null | ShadersCompiledHandler) {\n    this.onShadersCompiled_ = handler;\n  }\n\n  dispose() {\n    this.builtinUniforms_.destroy();\n    this.resources_.shaders.dispose();\n    this.resources_.buffers.dispose();\n    this.resources_.textures.dispose();\n    this.resources_.samplers.dispose();\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    this.blueprint_ = blueprint;\n    this.compile_();\n  }\n\n  updateUniforms(uniforms: Record<string, any>) {\n    const device = this.device_;\n    const data = new ArrayBuffer(24);\n    const floats = new Float32Array(data);\n    const uints = new Uint32Array(data);\n    floats[0] = (uniforms['time'] as number) ?? 0;\n    floats[1] = (uniforms['timeDelta'] as number) ?? 0;\n    uints[2] = (uniforms['frame'] as number) ?? 0;\n    uints[4] = uniforms['resolution']?.width ?? 1;\n    uints[5] = uniforms['resolution']?.height ?? 1;\n    device.queue.writeBuffer(this.builtinUniforms_, 0, data, 0, 24);\n  }\n\n  run(\n    texture: GPUTexture,\n    resolution: GPUExtent3DDict,\n    outputFormat: GPUTextureFormat\n  ) {\n    if (this.outputFormat_ !== outputFormat && this.blueprint_ !== null) {\n      this.executable_ = null;\n      this.outputFormat_ = outputFormat;\n      this.compile_();\n      return;\n    }\n\n    if (this.executable_ === null) {\n      return;\n    }\n\n    this.executable_.run(texture, resolution);\n  }\n\n  async compile_() {\n    const blueprint = this.blueprint_!;\n    const thisCompile = this.doCompile_(blueprint);\n    this.lastCompile_ = thisCompile;\n    const newResources = await thisCompile;\n    if (this.lastCompile_ !== thisCompile) {\n      return;\n    }\n\n    this.resources_.shaders.releaseKeysAndDisposeRemainder(\n      newResources.shaders.keys\n    );\n    this.resources_.buffers.releaseKeysAndDisposeRemainder(\n      newResources.buffers.keys\n    );\n    this.resources_.textures.releaseKeysAndDisposeRemainder(\n      newResources.textures.keys\n    );\n    this.resources_.samplers.releaseKeysAndDisposeRemainder(\n      newResources.samplers.keys\n    );\n    this.resources_ = newResources;\n    if (this.onShadersCompiled_) {\n      const results = new Map();\n      for (const [uuid, shader] of this.resources_.shaders.entries) {\n        results.set(uuid, shader.messages);\n      }\n      this.onShadersCompiled_(results);\n    }\n    this.executable_ = linkProgram(\n      this.device_,\n      this.builtinUniforms_,\n      this.outputFormat_,\n      this.resources_,\n      blueprint\n    );\n  }\n\n  async doCompile_(blueprint: Blueprint): Promise<CompiledResourceBundle> {\n    const programMap = new ProgramMap(blueprint);\n    const shaders = this.resources_.shaders.compile(\n      programMap.shaders.values(),\n      programMap\n    );\n    const buffers = this.resources_.buffers.compile(\n      programMap.buffers.values(),\n      programMap\n    );\n    const textures = this.resources_.textures.compile(\n      programMap.textures.values(),\n      programMap\n    );\n    const samplers = this.resources_.samplers.compile(\n      programMap.samplers.values(),\n      programMap\n    );\n    return {\n      programMap,\n      shaders: await shaders,\n      buffers: await buffers,\n      textures: await textures,\n      samplers: await samplers,\n    };\n  }\n}\n","import { CompiledBufferCache, createCompiledBufferCache } from './Buffer';\nimport { ProgramMap } from './ProgramMap';\nimport { CompiledSamplerCache, createCompiledSamplerCache } from './Sampler';\nimport { CompiledShaderCache, createCompiledShaderCache } from './Shader';\nimport { CompiledTextureCache, createCompiledTextureCache } from './Texture';\n\nexport interface CompiledResourceBundle {\n  programMap: null | ProgramMap;\n  shaders: CompiledShaderCache;\n  buffers: CompiledBufferCache;\n  textures: CompiledTextureCache;\n  samplers: CompiledSamplerCache;\n}\n\nexport function createCompiledResourceBundle(device: GPUDevice) {\n  return {\n    programMap: null,\n    shaders: createCompiledShaderCache(device),\n    buffers: createCompiledBufferCache(device),\n    textures: createCompiledTextureCache(device),\n    samplers: createCompiledSamplerCache(device),\n  };\n}\n","import { deepCopy, deepEquals } from '../base/Util';\nimport { Blueprint } from './Blueprint';\nimport { Gpu } from './Gpu';\nimport { Program, ShadersCompiledHandler } from './Program';\n\nconst getContextFromCanvas = (\n  canvas: HTMLCanvasElement\n): null | GPUCanvasContext => {\n  return canvas.getContext('webgpu') as null | GPUCanvasContext;\n};\n\nexport class FrameProducer {\n  private gpu_: Gpu;\n\n  private lastUsedContext_?: GPUCanvasContext;\n  private lastUsedResolution_?: GPUExtent3DDict;\n\n  private startTime_?: number;\n  private lastFrameTime_?: number;\n  private frame_: number;\n\n  private blueprint_: null | Blueprint;\n  private program_: null | Program;\n\n  private onShadersCompiled_?: ShadersCompiledHandler;\n\n  constructor() {\n    this.gpu_ = new Gpu();\n    this.gpu_.onAcquired = this.onGpuAcquired_;\n    this.frame_ = 0;\n    this.blueprint_ = null;\n    this.program_ = null;\n  }\n\n  reconfigure() {}\n\n  set onShadersCompiled(handler: ShadersCompiledHandler) {\n    this.onShadersCompiled_ = handler;\n    if (this.program_) {\n      this.program_.onShadersCompiled = handler;\n    }\n  }\n\n  setBlueprint(blueprint: Blueprint) {\n    if (this.blueprint_ && deepEquals(this.blueprint_, blueprint)) {\n      return;\n    }\n\n    this.blueprint_ = deepCopy(blueprint);\n    if (this.program_) {\n      this.program_.setBlueprint(blueprint);\n    }\n  }\n\n  stop() {\n    this.blueprint_ = null;\n    this.program_ = null;\n  }\n\n  render(canvas: HTMLCanvasElement, resolution: GPUExtent3DDict) {\n    if (!this.gpu_ || !this.gpu_.isAcquired || !this.program_) {\n      return;\n    }\n\n    const context = getContextFromCanvas(canvas);\n    if (context === null) {\n      this.stop();\n      throw new Error('no webgpu context');\n    }\n\n    const device = this.gpu_.device!;\n    const outputFormat: GPUTextureFormat = context.getPreferredFormat(\n      this.gpu_.adapter!\n    );\n\n    if (\n      !this.lastUsedContext_ ||\n      !this.lastUsedResolution_ ||\n      this.lastUsedContext_ !== context ||\n      this.lastUsedResolution_.width !== resolution.width ||\n      this.lastUsedResolution_.height !== resolution.height\n    ) {\n      context.configure({\n        device,\n        format: outputFormat,\n        size: { ...resolution },\n      });\n      this.lastUsedResolution_ = { ...resolution };\n    }\n\n    // This is an egregious hack to get consistent nearest-neighbor filtering on\n    // a scaled-up canvas texture in Chrome. See crbug.com/1044590.\n    canvas.style.filter = 'blur(0px)';\n\n    const now = new Date().getTime();\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n    const delta = now - (this.lastFrameTime_ ?? now);\n    this.lastFrameTime_ = now;\n\n    this.program_.updateUniforms({\n      time: (now - this.startTime_) / 1000,\n      timeDelta: delta / 1000,\n      frame: this.frame_++,\n      resolution,\n    });\n    this.program_.run(context.getCurrentTexture(), resolution, outputFormat);\n  }\n\n  onGpuAcquired_ = () => {\n    if (this.program_) {\n      this.program_.dispose();\n    }\n    this.program_ = new Program(this.gpu_.device!);\n    if (this.blueprint_) {\n      this.program_.setBlueprint(this.blueprint_);\n    }\n    if (this.onShadersCompiled_) {\n      this.program_.onShadersCompiled = this.onShadersCompiled_;\n    }\n  };\n}\n","import 'codemirror/theme/3024-day.css';\nimport 'codemirror/theme/3024-night.css';\nimport 'codemirror/theme/abbott.css';\nimport 'codemirror/theme/abcdef.css';\nimport 'codemirror/theme/ambiance-mobile.css';\nimport 'codemirror/theme/ambiance.css';\nimport 'codemirror/theme/ayu-dark.css';\nimport 'codemirror/theme/ayu-mirage.css';\nimport 'codemirror/theme/base16-dark.css';\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/bespin.css';\nimport 'codemirror/theme/blackboard.css';\nimport 'codemirror/theme/cobalt.css';\nimport 'codemirror/theme/colorforth.css';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/duotone-dark.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/theme/elegant.css';\nimport 'codemirror/theme/erlang-dark.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/theme/hopscotch.css';\nimport 'codemirror/theme/icecoder.css';\nimport 'codemirror/theme/idea.css';\nimport 'codemirror/theme/isotope.css';\nimport 'codemirror/theme/juejin.css';\nimport 'codemirror/theme/lesser-dark.css';\nimport 'codemirror/theme/liquibyte.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/theme/material-darker.css';\nimport 'codemirror/theme/material-ocean.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/mbo.css';\nimport 'codemirror/theme/mdn-like.css';\nimport 'codemirror/theme/midnight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/moxer.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/theme/neo.css';\nimport 'codemirror/theme/night.css';\nimport 'codemirror/theme/nord.css';\nimport 'codemirror/theme/oceanic-next.css';\nimport 'codemirror/theme/panda-syntax.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/paraiso-light.css';\nimport 'codemirror/theme/pastel-on-dark.css';\nimport 'codemirror/theme/railscasts.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/theme/seti.css';\nimport 'codemirror/theme/shadowfox.css';\nimport 'codemirror/theme/solarized.css';\nimport 'codemirror/theme/ssms.css';\nimport 'codemirror/theme/the-matrix.css';\nimport 'codemirror/theme/tomorrow-night-bright.css';\nimport 'codemirror/theme/tomorrow-night-eighties.css';\nimport 'codemirror/theme/ttcn.css';\nimport 'codemirror/theme/twilight.css';\nimport 'codemirror/theme/vibrant-ink.css';\nimport 'codemirror/theme/xq-dark.css';\nimport 'codemirror/theme/xq-light.css';\nimport 'codemirror/theme/yeti.css';\nimport 'codemirror/theme/yonce.css';\nimport 'codemirror/theme/zenburn.css';\n\nexport const CODE_MIRROR_THEMES = [\n  '3024-day',\n  '3024-night',\n  'abbott',\n  'abcdef',\n  'ambiance-mobile',\n  'ambiance',\n  'ayu-dark',\n  'ayu-mirage',\n  'base16-dark',\n  'base16-light',\n  'bespin',\n  'blackboard',\n  'cobalt',\n  'colorforth',\n  'darcula',\n  'dracula',\n  'duotone-dark',\n  'duotone-light',\n  'eclipse',\n  'elegant',\n  'erlang-dark',\n  'gruvbox-dark',\n  'hopscotch',\n  'icecoder',\n  'idea',\n  'isotope',\n  'juejin',\n  'lesser-dark',\n  'liquibyte',\n  'lucario',\n  'material-darker',\n  'material-ocean',\n  'material-palenight',\n  'material',\n  'mbo',\n  'mdn-like',\n  'midnight',\n  'monokai',\n  'moxer',\n  'neat',\n  'neo',\n  'night',\n  'nord',\n  'oceanic-next',\n  'panda-syntax',\n  'paraiso-dark',\n  'paraiso-light',\n  'pastel-on-dark',\n  'railscasts',\n  'rubyblue',\n  'seti',\n  'shadowfox',\n  'solarized',\n  'ssms',\n  'the-matrix',\n  'tomorrow-night-bright',\n  'tomorrow-night-eighties',\n  'ttcn',\n  'twilight',\n  'vibrant-ink',\n  'xq-dark',\n  'xq-light',\n  'yeti',\n  'yonce',\n  'zenburn',\n];\n","import './LabeledField.css';\n\nimport React from 'react';\n\ninterface Props {\n  label: string;\n  children: React.ReactNode;\n}\n\nexport const LabeledField = ({ label, children }: Props) => {\n  return (\n    <div className=\"LabeledField\">\n      <div className=\"Label\">{label}</div>\n      <div className=\"Field\">{children}</div>\n    </div>\n  );\n};\n","import './ControlPanel.css';\n\nimport React from 'react';\nimport { toByteArray, fromByteArray } from 'base64-js';\n\nimport { deepCopy } from '../base/Util';\nimport { Blueprint } from '../gpu/Blueprint';\nimport { CODE_MIRROR_THEMES } from './CodeMirrorThemes';\nimport { DisplayConfig } from './Display';\nimport { LabeledField } from './LabeledField';\n\ninterface Props {\n  blueprint: Blueprint;\n  displayConfig: DisplayConfig;\n  onDisplayConfigChange: (change: Partial<DisplayConfig>) => void;\n  savedBlueprints: Record<string, Blueprint>;\n  onSaveBlueprint: (name: string) => void;\n  onLoadBlueprint: (name: string) => void;\n  onImportBlueprint: (blueprint: Blueprint) => void;\n  onDeleteBlueprint: (name: string) => void;\n  codeMirrorTheme: string;\n  onCodeMirrorThemeChange: (name: string) => void;\n}\n\ninterface State {\n  optionsVisible: boolean;\n  loadMenuVisible: boolean;\n  pasteMenuVisible: boolean;\n}\n\nexport class ControlPanel extends React.Component<Props, State> {\n  private pixelSizeToggleRef_: React.RefObject<HTMLInputElement>;\n  private pixelSizeRef_: React.RefObject<HTMLInputElement>;\n  private framebufferWidthRef_: React.RefObject<HTMLInputElement>;\n  private framebufferHeightRef_: React.RefObject<HTMLInputElement>;\n  private importRef_: React.RefObject<HTMLTextAreaElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      optionsVisible: false,\n      loadMenuVisible: false,\n      pasteMenuVisible: false,\n    };\n\n    this.pixelSizeToggleRef_ = React.createRef();\n    this.pixelSizeRef_ = React.createRef();\n    this.framebufferWidthRef_ = React.createRef();\n    this.framebufferHeightRef_ = React.createRef();\n    this.importRef_ = React.createRef();\n  }\n\n  render() {\n    const displayConfig = this.props.displayConfig;\n    const makeAspectOption = (ratio: string) => (\n      <label>\n        <input\n          type=\"radio\"\n          name=\"aspect\"\n          value={ratio}\n          onChange={this.setAspectRatio_}\n          checked={ratio === displayConfig.aspect}\n        />\n        {ratio}\n      </label>\n    );\n\n    return (\n      <div className=\"ControlPanel\">\n        <button\n          className=\"Toggle\"\n          title=\"Options\"\n          onClick={this.toggleOptions_}\n        >\n          ⚙️\n        </button>\n        <button\n          className=\"Toggle\"\n          title=\"Toggle Fullscreen\"\n          onClick={this.enterFullscreen_}\n        >\n          🖥️\n        </button>\n        {this.state.optionsVisible && (\n          <div className=\"OptionsPanel\">\n            <h1>Display Options</h1>\n            <h2>Aspect Ratio</h2>\n            {makeAspectOption('None')}\n            {makeAspectOption('1:1')}\n            {makeAspectOption('4:3')}\n            {makeAspectOption('16:9')}\n            {makeAspectOption('16:10')}\n            <h2>Resolution</h2>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"pixel\"\n                ref={this.pixelSizeToggleRef_}\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'pixel'}\n              />\n              Fixed Pixel Size\n              <input\n                type=\"number\"\n                name=\"pixelSize\"\n                value={displayConfig.resolution.pixelSize ?? 1}\n                ref={this.pixelSizeRef_}\n                style={{ width: '3em', marginLeft: '1em' }}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"resolution\"\n                value=\"framebuffer\"\n                onChange={this.updateResolution_}\n                checked={displayConfig.resolution.mode === 'framebuffer'}\n              />\n              Fixed Framebuffer Size\n              <input\n                type=\"text\"\n                name=\"framebufferWidth\"\n                style={{ width: '4em', marginLeft: '1em' }}\n                ref={this.framebufferWidthRef_}\n                value={displayConfig.resolution.framebufferSize?.width ?? 4}\n                onChange={this.updateResolution_}\n              />\n              x\n              <input\n                type=\"text\"\n                name=\"framebufferHeight\"\n                style={{ width: '4em' }}\n                ref={this.framebufferHeightRef_}\n                value={displayConfig.resolution.framebufferSize?.height ?? 4}\n                onChange={this.updateResolution_}\n              />\n            </label>\n            <h1>Editor Options</h1>\n            <LabeledField label=\"Theme\">\n              <select\n                value={this.props.codeMirrorTheme}\n                onChange={e =>\n                  this.props.onCodeMirrorThemeChange(e.currentTarget.value)\n                }\n              >\n                {CODE_MIRROR_THEMES.map(theme => {\n                  return (\n                    <option key={theme} value={theme}>\n                      {theme}\n                    </option>\n                  );\n                })}\n              </select>\n            </LabeledField>\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.saveBlueprint_}\n          title=\"Save Blueprint\"\n        >\n          💾\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.toggleLoadBlueprintPanel_}\n          title=\"Load Blueprint\"\n        >\n          📂\n        </button>\n        {this.state.loadMenuVisible && (\n          <div className=\"LoadBlueprintPanel\">\n            <h1>Saved Shaders</h1>\n            {Object.entries(this.props.savedBlueprints).map(\n              ([name, blueprint]) => {\n                return (\n                  <div key={name} className=\"LoadMenuItem\">\n                    <div\n                      className=\"LoadMenuName\"\n                      onClick={() => this.loadBlueprint_(name)}\n                    >\n                      {name}\n                    </div>\n                    <button\n                      className=\"LoadMenuRemove\"\n                      onClick={() => this.deleteBlueprint_(name)}\n                    >\n                      x\n                    </button>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        )}\n        <button\n          className=\"Toggle\"\n          onClick={this.copyBlueprintToClipboard_}\n          title=\"Copy Blueprint To Clipboard\"\n        >\n          📋\n        </button>\n        <button\n          className=\"Toggle\"\n          onClick={this.togglePasteMenu_}\n          title=\"Paste Blueprint From Clipboard\"\n        >\n          ⬇\n        </button>\n        {this.state.pasteMenuVisible && (\n          <div className=\"PasteBlueprintPanel\">\n            <h1>Import From Clipboard</h1>\n            Paste it here:\n            <textarea ref={this.importRef_} />\n            <button title=\"Import\" onClick={this.importBlueprintFromClipboard_}>\n              Import\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  saveBlueprint_ = () => {\n    const name = prompt('Name it!');\n    if (name === null || name === '') {\n      return;\n    }\n\n    this.props.onSaveBlueprint(name);\n  };\n\n  loadBlueprint_ = (name: string) => {\n    this.props.onLoadBlueprint(name);\n    this.toggleLoadBlueprintPanel_();\n  };\n\n  copyBlueprintToClipboard_ = async () => {\n    const copy = deepCopy(this.props.blueprint);\n    for (const node of Object.values(copy.nodes)) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageData instanceof Blob) {\n        const bytes = new Uint8Array(await node.imageData.arrayBuffer());\n        node.imageDataSerialized = fromByteArray(bytes);\n        node.imageData = null;\n      }\n    }\n\n    navigator.clipboard.writeText(JSON.stringify(copy));\n  };\n\n  importBlueprintFromClipboard_ = () => {\n    this.togglePasteMenu_();\n\n    if (!this.importRef_.current) {\n      return;\n    }\n\n    const serializedBlueprint = this.importRef_.current.value;\n    const blueprint = JSON.parse(serializedBlueprint) as null | Blueprint;\n    if (!blueprint) {\n      return;\n    }\n\n    for (const node of Object.values(blueprint.nodes)) {\n      if (node.type !== 'texture') {\n        continue;\n      }\n\n      if (node.imageDataSerialized) {\n        const bytes = toByteArray(node.imageDataSerialized);\n        node.imageData = new Blob([bytes]);\n        node.imageDataSerialized = null;\n      }\n    }\n\n    this.props.onImportBlueprint(blueprint);\n  };\n\n  togglePasteMenu_ = () => {\n    this.setState((state, props) => ({\n      pasteMenuVisible: !state.pasteMenuVisible,\n    }));\n  };\n\n  deleteBlueprint_ = (name: string) => {\n    this.props.onDeleteBlueprint(name);\n  };\n\n  toggleLoadBlueprintPanel_ = () => {\n    this.setState((state, props) => ({\n      loadMenuVisible: !state.loadMenuVisible,\n    }));\n  };\n\n  toggleOptions_ = () => {\n    this.setState((state, props) => ({\n      optionsVisible: !state.optionsVisible,\n    }));\n  };\n\n  enterFullscreen_ = async () => {\n    document.querySelector('canvas')!.requestFullscreen();\n  };\n\n  setAspectRatio_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onDisplayConfigChange({ aspect: e.currentTarget.value });\n    this.toggleOptions_();\n  };\n\n  updateResolution_ = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const target = e.currentTarget!;\n    if (\n      target === this.pixelSizeToggleRef_.current ||\n      target.name === 'pixelSize'\n    ) {\n      const pixelSize = parseInt(this.pixelSizeRef_.current!.value);\n      if (!isNaN(pixelSize)) {\n        this.props.onDisplayConfigChange({\n          resolution: {\n            mode: 'pixel',\n            pixelSize,\n          },\n        });\n      }\n      return;\n    }\n\n    const framebufferSize = {\n      width: parseInt(this.framebufferWidthRef_.current!.value),\n      height: parseInt(this.framebufferHeightRef_.current!.value),\n    };\n    if (isNaN(framebufferSize.width) || isNaN(framebufferSize.height)) {\n      return;\n    }\n\n    this.props.onDisplayConfigChange({\n      resolution: {\n        mode: 'framebuffer',\n        framebufferSize,\n      },\n    });\n  };\n}\n","import './Display.css';\n\nimport React from 'react';\n\nexport interface DisplayConfig {\n  aspect: string;\n  resolution: {\n    mode: 'pixel' | 'framebuffer';\n    pixelSize?: number;\n    framebufferSize?: { width: number; height: number };\n  };\n}\n\ninterface Props {\n  render: (canvas: HTMLCanvasElement) => void;\n  config: DisplayConfig;\n}\n\nexport class Display extends React.Component<Props> {\n  private wrapperRef_: React.RefObject<HTMLDivElement>;\n  private canvasRef_: React.RefObject<HTMLCanvasElement>;\n  private pendingFrameRequest_: null | number;\n\n  constructor(props: Props) {\n    super(props);\n    this.wrapperRef_ = React.createRef();\n    this.canvasRef_ = React.createRef();\n    this.pendingFrameRequest_ = null;\n  }\n\n  componentDidMount() {\n    const renderNextFrame = () => {\n      const wrapper = this.wrapperRef_.current!;\n      const canvas = this.canvasRef_.current!;\n      const width = wrapper.clientWidth;\n      const height = wrapper.clientHeight;\n      if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n      }\n      this.props.render(canvas);\n      this.pendingFrameRequest_ = requestAnimationFrame(renderNextFrame);\n    };\n\n    renderNextFrame();\n  }\n\n  componentWillUnmount() {\n    if (this.pendingFrameRequest_ !== null) {\n      cancelAnimationFrame(this.pendingFrameRequest_);\n      this.pendingFrameRequest_ = null;\n    }\n  }\n\n  render() {\n    const config = this.props.config;\n    const [aspectX, aspectY] = config.aspect.split(':').map(s => parseInt(s));\n    const stretch = isNaN(aspectX) || isNaN(aspectY);\n    const computedWrapperStyle: React.CSSProperties = {\n      height: stretch ? '100%' : 'auto',\n      aspectRatio: stretch ? 'auto' : `${aspectX}/${aspectY}`,\n    };\n    return (\n      <div className=\"Display\">\n        <div\n          ref={this.wrapperRef_}\n          className=\"CanvasWrapper\"\n          style={computedWrapperStyle}\n        >\n          <canvas ref={this.canvasRef_} />\n        </div>\n      </div>\n    );\n  }\n}\n","import './EditableLabel.css';\n\nimport React from 'react';\n\ninterface Props {\n  value: string;\n  enabled?: boolean;\n  emptyText?: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n  isEditing: boolean;\n}\n\nexport class EditableLabel extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value ?? '',\n      isEditing: false,\n    };\n  }\n\n  render() {\n    const isEmpty = this.state.value === '';\n    const isEditing = this.state.isEditing;\n    const editingClass = isEditing ? 'Editing' : 'NotEditing';\n    const emptyClass = isEmpty ? 'Empty' : 'NotEmpty';\n    const defaultValue = !isEmpty\n      ? this.state.value\n      : this.props.emptyText ?? '';\n    return (\n      <input\n        className={`EditableLabel ${editingClass} ${emptyClass}`}\n        type=\"text\"\n        onKeyDown={this.onKeyDown_}\n        onBlur={this.onFocusOut_}\n        defaultValue={defaultValue}\n        readOnly={!isEditing}\n        onClick={this.onClick_}\n        autoFocus\n      />\n    );\n  }\n\n  onClick_ = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.enabled === false) {\n      return;\n    }\n    this.setState({ isEditing: true });\n  };\n\n  commit_ = (untrimmedValue: string) => {\n    const value = untrimmedValue.trim();\n    if (value === '') {\n      this.setState({ isEditing: false });\n      return;\n    }\n    this.setState({ value, isEditing: false });\n    this.props.onChange(value);\n  };\n\n  onKeyDown_ = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      this.commit_(e.currentTarget.value);\n    } else if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  };\n\n  onFocusOut_ = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.commit_(e.currentTarget.value);\n  };\n}\n","import './Node.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { Blueprint, NodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\n\ntype UpdateFn<DescriptorType extends NodeDescriptor> = (\n  update: Partial<DescriptorType>\n) => void;\n\ninterface NodeData<DescriptorType extends NodeDescriptor> {\n  blueprint: Blueprint;\n  node: DescriptorType;\n  onChange: UpdateFn<DescriptorType>;\n  destroy: () => void;\n}\n\nexport interface NodeProps<DescriptorType extends NodeDescriptor> {\n  data: NodeData<DescriptorType>;\n}\n\ninterface Props {\n  title?: string;\n  className?: string;\n  node: NodeDescriptor;\n  onRename?: (name: string) => void;\n  destroy: () => void;\n  children?: ReactNode;\n}\n\nexport const Node = (props: Props) => {\n  return (\n    <div className={`Node Node-${props.node.type} ${props.className}`}>\n      <button className=\"RemoveButton\" onClick={props.destroy}></button>\n      <div className=\"Title\">{props.title}</div>\n      <div className=\"Content\">\n        {props.onRename ? (\n          <LabeledField label=\"Name\">\n            <EditableLabel value={props.node.name} onChange={props.onRename} />\n          </LabeledField>\n        ) : (\n          <div />\n        )}\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","import { Connection } from 'react-flow-renderer';\n\nimport { Blueprint, NodeDescriptor } from '../../gpu/Blueprint';\n\ninterface ConnectionData {\n  source: NodeDescriptor;\n  target: NodeDescriptor;\n  sourceName: string;\n  targetName: string;\n  targetHandle: string;\n}\n\nfunction resolveConnection(\n  c: Connection,\n  blueprint: Blueprint\n): null | ConnectionData {\n  if (!c.source || !c.target) {\n    return null;\n  }\n\n  const source = blueprint.nodes[c.source];\n  const target = blueprint.nodes[c.target];\n  if (!source || !target || !c.targetHandle) {\n    return null;\n  }\n\n  return {\n    source,\n    target,\n    sourceName: c.source,\n    targetName: c.target,\n    targetHandle: c.targetHandle,\n  };\n}\n\nexport function isValidBindingConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (\n    data.source.type !== 'buffer' &&\n    data.source.type !== 'texture' &&\n    data.source.type !== 'sampler'\n  ) {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  if (data.targetHandle !== 'bindings') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: NodeDescriptor) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'binding' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n\nexport function isValidQueueConnection(c: Connection, blueprint: Blueprint) {\n  const data = resolveConnection(c, blueprint);\n  if (!data) {\n    return false;\n  }\n\n  if (data.source.type !== 'render' && data.source.type !== 'compute') {\n    return false;\n  }\n\n  if (data.target.type !== 'render' && data.target.type !== 'compute') {\n    return false;\n  }\n\n  return !Object.values(blueprint.nodes).some((node: NodeDescriptor) => {\n    return (\n      node.type === 'connection' &&\n      node.connectionType === 'queue' &&\n      node.source === data.sourceName &&\n      node.target === data.targetName\n    );\n  });\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { BufferInitializer, BufferNodeDescriptor } from '../../gpu/Blueprint';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const BufferNode = (props: NodeProps<BufferNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Buffer\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Size\">\n          <input\n            type=\"number\"\n            value={node.size}\n            style={{ width: '5em', textAlign: 'right' }}\n            onChange={e =>\n              data.onChange({ size: e.currentTarget.valueAsNumber })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Init\">\n          <select\n            value={node.init}\n            style={{ width: '9em' }}\n            onChange={e =>\n              data.onChange({\n                init: e.currentTarget.value as BufferInitializer,\n              })\n            }\n          >\n            <option value=\"zero\">Zero</option>\n            <option value=\"random-floats\">Random Floats</option>\n            <option value=\"random-uints\">Random Uints</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","type Closure = () => void;\n\nexport class Debouncer {\n  private minDelayMs_: number;\n  private lastInvocationMs_: null | number;\n  private pendingInvocation_: null | ReturnType<typeof setTimeout>;\n\n  constructor(minDelayMs: number) {\n    this.minDelayMs_ = minDelayMs;\n    this.lastInvocationMs_ = null;\n    this.pendingInvocation_ = null;\n  }\n\n  invoke(f: Closure) {\n    if (this.onCooldown()) {\n      this.scheduleSuppressed(f);\n      return;\n    }\n\n    this.invokeInternal(f);\n  }\n\n  private clearPendingInvocation() {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    this.pendingInvocation_ = null;\n  }\n\n  private invokeInternal(f: Closure) {\n    this.clearPendingInvocation();\n    this.lastInvocationMs_ = Date.now();\n    f();\n  }\n\n  private onCooldown(): boolean {\n    if (this.lastInvocationMs_ === null) {\n      return false;\n    }\n    return Date.now() - this.lastInvocationMs_ < this.minDelayMs_;\n  }\n\n  private scheduleSuppressed(f: Closure) {\n    if (this.pendingInvocation_ !== null) {\n      clearTimeout(this.pendingInvocation_);\n    }\n    const delay = this.lastInvocationMs_! + this.minDelayMs_ - Date.now();\n    this.pendingInvocation_ = setTimeout(this.invoke.bind(this, f), delay);\n  }\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { Debouncer } from '../../base/Debouncer';\nimport { RenderNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nfunction colorValue(c: GPUColorDict): string {\n  const p = (x: number) => `${x < 16 ? '0' : ''}${x.toString(16)}`;\n  const cp = [c.r, c.g, c.b].map(c => p(c * 255));\n  return `#${cp.join('')}`;\n}\n\nfunction parseColor(value: string): GPUColorDict {\n  const parseComponent = (index: number) =>\n    parseInt(value.slice(index, index + 2), 16) / 255;\n  return {\n    r: parseComponent(1),\n    g: parseComponent(3),\n    b: parseComponent(5),\n    a: 1,\n  };\n}\n\nexport const RenderNode = (props: NodeProps<RenderNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const debouncer = new Debouncer(30);\n  return (\n    <Node\n      title=\"Render Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n\n        <LabeledField label=\"Vertex Shader\">\n          <select\n            value={node.vertexShader}\n            onChange={e =>\n              data.onChange({ vertexShader: e.currentTarget.value })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Vertex Entry Point\">\n          <EditableLabel\n            value={node.vertexEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ vertexEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Fragment Shader\">\n          <select\n            value={node.fragmentShader}\n            onChange={e =>\n              data.onChange({\n                fragmentShader: e.currentTarget.value,\n              })\n            }\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Fragment Entry Point\">\n          <EditableLabel\n            value={node.fragmentEntryPoint}\n            emptyText=\"None\"\n            onChange={value => data.onChange({ fragmentEntryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Topology\">\n          <select\n            value={node.topology ?? 'triangle-list'}\n            onChange={e =>\n              data.onChange({\n                topology: e.currentTarget.value as GPUPrimitiveTopology,\n              })\n            }\n          >\n            <option value=\"point-list\">Point List</option>\n            <option value=\"line-list\">Line List</option>\n            <option value=\"line-strip\">Line Strip</option>\n            <option value=\"triangle-list\">Triangle List</option>\n            <option value=\"triangle-strip\">Triangle Strip</option>\n          </select>\n        </LabeledField>\n        <LabeledField label=\"# Vertices\">\n          <input\n            type=\"number\"\n            value={node.numVertices}\n            onChange={e =>\n              data.onChange({\n                numVertices: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"# Instances\">\n          <input\n            type=\"number\"\n            value={node.numInstances}\n            onChange={e =>\n              data.onChange({\n                numInstances: Math.max(e.currentTarget.valueAsNumber, 0),\n              })\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear\">\n          <input\n            type=\"checkbox\"\n            checked={node.clear ?? false}\n            onChange={e => data.onChange({ clear: !node.clear })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Clear Color\">\n          <input\n            type=\"color\"\n            value={colorValue(node.clearColor ?? { r: 0, g: 0, b: 0, a: 1 })}\n            onChange={e =>\n              debouncer.invoke(() =>\n                data.onChange({ clearColor: parseColor(e.currentTarget.value) })\n              )\n            }\n          />\n        </LabeledField>\n        <LabeledField label=\"Depth Test\">\n          <select\n            value={node.depthTest ?? 'always'}\n            onChange={e =>\n              data.onChange({\n                depthTest: e.currentTarget.value as GPUCompareFunction,\n              })\n            }\n          >\n            <option value=\"never\">Never Pass</option>\n            <option value=\"less\">&lt;</option>\n            <option value=\"less-equal\">&lt;=</option>\n            <option value=\"equal\">=</option>\n            <option value=\"greater-equal\">&gt;=</option>\n            <option value=\"greater\">&gt;</option>\n            <option value=\"not-equal\">≠</option>\n            <option value=\"always\">Always Pass</option>\n          </select>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nfunction getSelectedFile(input: HTMLInputElement): null | File {\n  if (!input.files || input.files.length === 0) {\n    return null;\n  }\n\n  return input.files[0];\n}\n\nasync function updateCanvasImage(\n  canvas: null | HTMLCanvasElement,\n  data: null | Blob\n) {\n  if (!canvas || !data) {\n    return;\n  }\n\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n\n  const image = await createImageBitmap(data);\n  if (!image) {\n    return;\n  }\n\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, 128, 128);\n}\n\ntype CanvasRef = React.RefObject<HTMLCanvasElement>;\n\nexport const TextureNode = (props: NodeProps<TextureNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  const canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const ref = canvasRef as CanvasRef;\n    if (ref.current && node.imageData instanceof Blob) {\n      updateCanvasImage(ref.current, node.imageData);\n    }\n  });\n\n  return (\n    <Node\n      title=\"Texture\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"TextureDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={e => {\n            const file = getSelectedFile(e.currentTarget);\n            if (file) {\n              data.onChange({ imageData: file });\n            }\n          }}\n        />\n        <canvas\n          id={node.name}\n          ref={canvasRef as CanvasRef}\n          className=\"Preview\"\n          width={128}\n          height={128}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './BlueprintEditor.css';\n\nimport React from 'react';\nimport ReactFlow, {\n  ArrowHeadType,\n  Connection,\n  Edge,\n  FlowElement,\n  Node,\n  OnLoadParams,\n  XYPosition,\n} from 'react-flow-renderer';\n\nimport { randomUUID } from '../base/Uuid';\nimport {\n  Blueprint,\n  BufferBindingStorageType,\n  NodeDescriptor,\n} from '../gpu/Blueprint';\nimport { BufferBindingNode } from './nodes/BufferBindingNode';\nimport { CustomEdge } from './nodes/CustomEdge';\nimport { BufferNode } from './nodes/BufferNode';\nimport { ComputeNode } from './nodes/ComputeNode';\nimport { RenderNode } from './nodes/RenderNode';\nimport { SamplerBindingNode } from './nodes/SamplerBindingNode';\nimport { SamplerNode } from './nodes/SamplerNode';\nimport { TextureBindingNode } from './nodes/TextureBindingNode';\nimport { TextureNode } from './nodes/TextureNode';\n\nconst NODE_TYPES = {\n  buffer: BufferNode,\n  texture: TextureNode,\n  compute: ComputeNode,\n  render: RenderNode,\n  sampler: SamplerNode,\n  'buffer-binding': BufferBindingNode,\n  'sampler-binding': SamplerBindingNode,\n  'texture-binding': TextureBindingNode,\n};\n\nconst EDGE_TYPES = {\n  'custom-edge': CustomEdge,\n};\n\ninterface Props {\n  blueprint: Blueprint;\n  onChange: () => void;\n}\n\nfunction getUnusedKey<T extends Record<string, any>>(\n  dict: T,\n  base: string\n): string {\n  for (let i = 1; ; ++i) {\n    const id = `${base}${i}`;\n    if (!dict.hasOwnProperty(id)) {\n      return id;\n    }\n  }\n}\n\nclass FlowErrorBounary extends React.Component {\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.log(error);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst isPassNode = (node: NodeDescriptor) =>\n  node.type === 'render' || node.type === 'compute';\n\nexport class BlueprintEditor extends React.Component<Props> {\n  private isMounted_: boolean;\n  private instance_: null | OnLoadParams;\n  private flowRef_: React.RefObject<HTMLDivElement>;\n  private lastConnectStart_: null | XYPosition;\n  private lastConnectEnd_: null | XYPosition;\n\n  constructor(props: Props) {\n    super(props);\n    this.isMounted_ = false;\n    this.instance_ = null;\n    this.flowRef_ = React.createRef();\n    this.lastConnectStart_ = null;\n    this.lastConnectEnd_ = null;\n  }\n\n  componentDidMount() {\n    this.isMounted_ = true;\n  }\n\n  componentWillUnmount() {\n    this.isMounted_ = false;\n  }\n\n  render() {\n    return (\n      <div className=\"BlueprintEditor\">\n        <FlowErrorBounary>\n          <ReactFlow\n            ref={this.flowRef_}\n            nodeTypes={NODE_TYPES}\n            edgeTypes={EDGE_TYPES}\n            elements={buildGraphFromBlueprint(\n              this.props.blueprint,\n              this.update_\n            )}\n            elementsSelectable={false}\n            nodesConnectable={true}\n            nodesDraggable={true}\n            onLoad={this.onLoad_}\n            onConnectStart={this.onConnectStart_}\n            onConnectStop={this.onConnectStop_}\n            onConnect={this.onConnect_}\n            onElementClick={this.onElementClick_}\n            onNodeDragStop={this.onMoveNode_}\n          >\n            <div className=\"Toolbar\">\n              <button onClick={this.addShader_}>+Shader</button>\n              <button onClick={this.addBuffer_}>+Buffer</button>\n              <button onClick={this.addTexture_}>+Texture</button>\n              <button onClick={this.addSampler_}>+Sampler</button>\n              <button onClick={this.addRenderPass_}>+Render Pass</button>\n              <button onClick={this.addComputePass_}>+Compute Pass</button>\n            </div>\n          </ReactFlow>\n        </FlowErrorBounary>\n      </div>\n    );\n  }\n\n  update_ = () => {\n    if (!this.isMounted_) {\n      return;\n    }\n\n    this.setState({\n      elements: buildGraphFromBlueprint(this.props.blueprint, this.update_),\n    });\n    this.props.onChange();\n  };\n\n  onLoad_ = (instance: OnLoadParams) => {\n    this.instance_ = instance;\n  };\n\n  onConnectStart_ = (e: React.MouseEvent) => {\n    this.lastConnectStart_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnectStop_ = (e: any) => {\n    this.lastConnectEnd_ = { x: e.clientX, y: e.clientY };\n  };\n\n  onConnect_ = (edge: Edge<any> | Connection) => {\n    const source = this.props.blueprint.nodes[edge.source!];\n    const target = this.props.blueprint.nodes[edge.target!];\n    if (!source || !target) {\n      return;\n    }\n\n    let position = { x: 100, y: 100 };\n    if (\n      this.instance_ &&\n      this.lastConnectStart_ !== null &&\n      this.lastConnectEnd_ !== null &&\n      this.flowRef_.current\n    ) {\n      const view = this.flowRef_.current.getBoundingClientRect();\n      const midpoint = {\n        x:\n          (this.lastConnectStart_.x + this.lastConnectEnd_.x) / 2 - view.x - 60,\n        y:\n          (this.lastConnectStart_.y + this.lastConnectEnd_.y) / 2 - view.y - 40,\n      };\n      position = this.instance_.project(midpoint);\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'buffer' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addBufferBinding_(\n        edge.source!,\n        edge.target!,\n        position,\n        'storage-read'\n      );\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'texture' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTrivialBinding_('texture', edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      source.type === 'sampler' &&\n      edge.targetHandle === 'bindings'\n    ) {\n      this.addTrivialBinding_('sampler', edge.source!, edge.target!, position);\n      this.props.onChange();\n      return;\n    }\n\n    if (\n      isPassNode(target) &&\n      isPassNode(source) &&\n      edge.targetHandle === 'queueIn'\n    ) {\n      const nodes = this.props.blueprint.nodes;\n      const id = getUnusedKey(nodes, `queue-dep`);\n      nodes[id] = {\n        name: '',\n        position,\n        type: 'connection',\n        connectionType: 'queue',\n        source: edge.source!,\n        target: edge.target!,\n      };\n      this.props.onChange();\n      return;\n    }\n  };\n\n  onElementClick_ = (\n    event: React.MouseEvent<Element, MouseEvent>,\n    element: Node<any> | Edge<any>\n  ) => {};\n\n  onMoveNode_ = (event: React.MouseEvent, node: Node) => {\n    node.data.node.position = { ...node.position };\n    this.update_();\n  };\n\n  addShader_ = () => {\n    const shaders = this.props.blueprint.shaders;\n    const id = getUnusedKey(shaders, 'shader');\n    shaders[id] = { name: id, uuid: randomUUID(), code: '' };\n    this.update_();\n  };\n\n  addNode_ = (type: string, node: Partial<NodeDescriptor>) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, type);\n    nodes[id] = {\n      name: id,\n      type,\n      position: { x: 100, y: 100 },\n      ...node,\n    } as NodeDescriptor;\n    this.update_();\n  };\n\n  addBuffer_ = () => {\n    this.addNode_('buffer', {\n      uuid: randomUUID(),\n      size: 16384,\n      position: { x: 100, y: 100 },\n      init: 'zero',\n    });\n  };\n\n  addTexture_ = () => {\n    this.addNode_('texture', {\n      uuid: randomUUID(),\n      position: { x: 100, y: 100 },\n      size: { width: 1024, height: 1024 },\n      format: 'rgba8unorm',\n      mipLevelCount: 1,\n      sampleCount: 1,\n    });\n  };\n\n  addSampler_ = () => {\n    this.addNode_('sampler', {\n      uuid: randomUUID(),\n      position: { x: 100, y: 100 },\n    });\n  };\n\n  addBufferBinding_ = (\n    source: string,\n    target: string,\n    position: XYPosition,\n    storageType: BufferBindingStorageType\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, `binding-buffer`);\n    nodes[id] = {\n      name: '',\n      position,\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      source,\n      target,\n      group: 0,\n      binding: 1,\n      storageType,\n    };\n  };\n\n  addTrivialBinding_ = (\n    type: 'sampler' | 'texture',\n    source: string,\n    target: string,\n    position: XYPosition\n  ) => {\n    const nodes = this.props.blueprint.nodes;\n    const id = getUnusedKey(nodes, `binding-${type}`);\n    nodes[id] = {\n      name: '',\n      position,\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: type,\n      source,\n      target,\n      group: 0,\n      binding: 1,\n    };\n  };\n\n  addRenderPass_ = () => {\n    this.addNode_('render', {\n      vertexShader: '',\n      vertexEntryPoint: '',\n      fragmentShader: '',\n      fragmentEntryPoint: '',\n      topology: 'triangle-list',\n      numVertices: 4,\n      numInstances: 1,\n      indexed: false,\n      clear: true,\n      clearColor: { r: 0, g: 0, b: 0, a: 1 },\n    });\n  };\n\n  addComputePass_ = () => {\n    this.addNode_('compute', {\n      shader: '',\n      entryPoint: '',\n      dispatchSize: { x: 1, y: 1, z: 1 },\n    });\n  };\n}\n\nfunction buildGraphFromBlueprint(\n  blueprint: Blueprint,\n  onChange: () => void\n): FlowElement[] {\n  const elements: FlowElement[] = [];\n  Object.entries(blueprint.nodes).forEach(([id, node]) => {\n    if (node.type !== 'connection') {\n      elements.push({\n        id,\n        type: node.type,\n        data: {\n          blueprint,\n          node,\n          onChange: (update: any) => {\n            Object.assign(blueprint.nodes[id], update);\n            onChange();\n          },\n          destroy: () => {\n            delete blueprint.nodes[id];\n            for (const [otherId, otherNode] of Object.entries(\n              blueprint.nodes\n            )) {\n              if (\n                otherNode.type === 'connection' &&\n                (otherNode.source === id || otherNode.target === id)\n              ) {\n                delete blueprint.nodes[otherId];\n              }\n            }\n            onChange();\n          },\n        },\n        position: node.position,\n      });\n    } else if (node.connectionType === 'binding') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id: `${id}-node`,\n        type: `${node.bindingType}-binding`,\n        data,\n        position: node.position,\n      });\n      elements.push({\n        id: `${id}-source-edge`,\n        source: node.source,\n        target: `${id}-node`,\n      });\n      elements.push({\n        id: `${id}-target-edge`,\n        source: `${id}-node`,\n        target: node.target,\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n      });\n    } else if (node.connectionType === 'queue') {\n      const data = {\n        blueprint,\n        node,\n        onChange: (update: any) => {\n          Object.assign(node, update);\n          onChange();\n        },\n        destroy: () => {\n          delete blueprint.nodes[id];\n          onChange();\n        },\n      };\n      elements.push({\n        id,\n        source: node.source,\n        target: node.target,\n        targetHandle: 'queueIn',\n        type: 'custom-edge',\n        arrowHeadType: 'arrowclosed' as ArrowHeadType,\n        data,\n      });\n    }\n  });\n\n  return elements;\n}\n","import { Handle, Position } from 'react-flow-renderer';\n\nimport { ComputeNodeDescriptor } from '../../gpu/Blueprint';\nimport { EditableLabel } from '../EditableLabel';\nimport { LabeledField } from '../LabeledField';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection, isValidQueueConnection } from './Validation';\n\nexport const ComputeNode = (props: NodeProps<ComputeNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Compute Pass\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div>\n        <Handle\n          id=\"bindings\"\n          type=\"target\"\n          title=\"Bindings\"\n          position={'top' as Position}\n          className=\"Handle Binding\"\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueIn\"\n          type=\"target\"\n          title=\"Queue In\"\n          position={'left' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <Handle\n          id=\"queueOut\"\n          type=\"source\"\n          title=\"Queue Out\"\n          position={'right' as Position}\n          className=\"Handle Queue\"\n          isValidConnection={c => isValidQueueConnection(c, data.blueprint)}\n        />\n        <LabeledField label=\"Shader\">\n          <select\n            value={node.shader}\n            onChange={e => data.onChange({ shader: e.currentTarget.value })}\n          >\n            <option value=\"\"></option>\n            {Object.entries(data.blueprint.shaders).map(([id, shader]) => (\n              <option key={id} value={id}>\n                {shader.name}\n              </option>\n            ))}\n          </select>\n        </LabeledField>\n        <LabeledField label=\"Entry Point\">\n          <EditableLabel\n            emptyText=\"None\"\n            value={node.entryPoint}\n            onChange={value => data.onChange({ entryPoint: value })}\n          />\n        </LabeledField>\n        <LabeledField label=\"Dispatch Size\">\n          <div className=\"DispatchSize\">\n            <div className=\"DispatchSizeElement\">\n              X{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.x}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: e.currentTarget.valueAsNumber,\n                      y: node.dispatchSize.y,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Y{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.y}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: e.currentTarget.valueAsNumber,\n                      z: node.dispatchSize.z,\n                    },\n                  })\n                }\n              />\n            </div>\n            <div className=\"DispatchSizeElement\">\n              Z{' '}\n              <input\n                type=\"number\"\n                value={node.dispatchSize.z}\n                onChange={e =>\n                  data.onChange({\n                    dispatchSize: {\n                      x: node.dispatchSize.x,\n                      y: node.dispatchSize.y,\n                      z: e.currentTarget.valueAsNumber,\n                    },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </LabeledField>\n      </div>\n    </Node>\n  );\n};\n","import React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\nimport { isValidBindingConnection } from './Validation';\n\nexport const SamplerNode = (props: NodeProps<SamplerNodeDescriptor>) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node\n      title=\"Sampler\"\n      node={node}\n      onRename={name => data.onChange({ name })}\n      destroy={data.destroy}\n    >\n      <div className=\"SamplerDetails\">\n        <Handle\n          type=\"source\"\n          className=\"Handle Binding\"\n          position={'bottom' as Position}\n          isValidConnection={c => isValidBindingConnection(c, data.blueprint)}\n        />\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport {\n  BufferBindingNodeDescriptor,\n  BufferBindingStorageType,\n} from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const BufferBindingNode = (\n  props: NodeProps<BufferBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node className=\"BufferBinding\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <select\n        value={node.storageType}\n        onChange={e =>\n          data.onChange({\n            storageType: e.currentTarget.value as BufferBindingStorageType,\n          })\n        }\n      >\n        <option value=\"storage-read\">Storage (r/o)</option>\n        <option value=\"storage\">Storage (r/w)</option>\n        <option value=\"uniform\">Uniform</option>\n        <option value=\"sampler\">Sampler</option>\n        <option value=\"texture\">Texture</option>\n      </select>\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { SamplerBindingNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const SamplerBindingNode = (\n  props: NodeProps<SamplerBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport React from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\n\nimport { TextureBindingNodeDescriptor } from '../../gpu/Blueprint';\nimport { Node, NodeProps } from './Node';\n\nexport const TextureBindingNode = (\n  props: NodeProps<TextureBindingNodeDescriptor>\n) => {\n  const data = props.data;\n  const node = data.node;\n  return (\n    <Node title=\"\" node={node} destroy={data.destroy}>\n      <Handle\n        type=\"target\"\n        position={'top' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <Handle\n        type=\"source\"\n        position={'bottom' as Position}\n        className=\"Handle BindingStub\"\n        isConnectable={false}\n      />\n      <div>\n        <div className=\"Row\">\n          Group\n          <input\n            type=\"number\"\n            value={node.group}\n            onChange={e =>\n              data.onChange({ group: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n        <div className=\"Row\">\n          Binding\n          <input\n            type=\"number\"\n            value={node.binding}\n            onChange={e =>\n              data.onChange({ binding: e.currentTarget.valueAsNumber })\n            }\n          />\n        </div>\n      </div>\n    </Node>\n  );\n};\n","import './Node.css';\n\nimport {\n  getBezierPath,\n  getEdgeCenter,\n  getMarkerEnd,\n  EdgeProps,\n} from 'react-flow-renderer';\n\ninterface Data {\n  destroy?: () => void;\n}\n\nexport const CustomEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data: anyData,\n  arrowHeadType,\n  markerEndId,\n}: EdgeProps) => {\n  const path = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n  const end = getMarkerEnd(arrowHeadType, markerEndId);\n  const [centerX, centerY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n  const data = anyData as Data;\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={path}\n        markerEnd={end}\n      />\n      {data.destroy && (\n        <foreignObject width={16} height={16} x={centerX - 8} y={centerY - 8}>\n          <div className=\"Edge\">\n            <button className=\"RemoveButton\" onClick={data.destroy} />\n          </div>\n        </foreignObject>\n      )}\n    </>\n  );\n};\n","import './CodeEditor.css';\n\nimport 'codemirror/keymap/sublime';\n\nimport CodeMirror, { IEditorInstance } from '@uiw/react-codemirror';\nimport React from 'react';\n\nimport { ShaderCompilationMessage } from '../gpu/program/Shader';\n\ninterface Props {\n  compilationMessages?: ShaderCompilationMessage[];\n  contents: string;\n  mutable: boolean;\n  onChange: (contents: string) => void;\n  theme: string;\n}\n\nexport class CodeEditor extends React.Component<Props> {\n  private isDecorating_: boolean;\n  private editorRef_: React.RefObject<IEditorInstance>;\n\n  constructor(props: Props) {\n    super(props);\n    this.isDecorating_ = false;\n    this.editorRef_ = React.createRef();\n  }\n\n  refresh() {\n    const cm = this.editorRef_.current;\n    if (cm) {\n      cm.editor.refresh();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"CodeEditor\">\n        <CodeMirror\n          ref={this.editorRef_}\n          value={this.props.contents}\n          onChange={this.onChange_}\n          onUpdate={this.onUpdate_}\n          options={{\n            theme: this.props.theme,\n            keyMap: 'sublime',\n            mode: 'rust',\n            gutters: ['GutterMessages'],\n            readOnly: !this.props.mutable,\n          }}\n        />\n      </div>\n    );\n  }\n\n  onChange_ = (e: CodeMirror.Editor, change: CodeMirror.EditorChange) => {\n    this.props.onChange(e.getValue());\n  };\n\n  onUpdate_ = (e: CodeMirror.Editor) => {\n    if (this.isDecorating_) {\n      return;\n    }\n\n    this.isDecorating_ = true;\n    e.getAllMarks().forEach(m => m.clear());\n    e.clearGutter('GutterMessages');\n    for (const m of this.props.compilationMessages ?? []) {\n      const className = `MarkedText-${m.type}`;\n      const line = m.lineNum;\n      e.markText(\n        { line, ch: m.linePos - 1 },\n        { line, ch: m.linePos + m.length - 1 },\n        { className }\n      );\n      const marker = document.createElement('div');\n      marker.classList.add('Marker', `Marker-${m.type}`);\n      e.setGutterMarker(line, 'GutterMessages', marker);\n    }\n    this.isDecorating_ = false;\n  };\n}\n","import './TabContainer.css';\n\nimport React, { ReactNode } from 'react';\n\nimport { EditableLabel } from './EditableLabel';\n\ninterface TabDescriptor {\n  key: string;\n  title: string;\n  mutable: boolean;\n  onActivate?: () => void;\n  onClose?: () => void;\n  onRename?: (newName: string) => void;\n}\n\ninterface Props {\n  tabs: TabDescriptor[];\n  children: ReactNode;\n}\n\ninterface State {\n  activeTab: number;\n}\n\nexport class TabContainer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeTab: 0,\n    };\n  }\n\n  componentDidUpdate() {\n    const numChildren = React.Children.count(this.props.children);\n    if (this.state.activeTab >= numChildren) {\n      this.setState({ activeTab: numChildren - 1 });\n    } else {\n      const tab = this.props.tabs[this.state.activeTab];\n      if (tab.onActivate) {\n        tab.onActivate();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"TabContainer\">\n        {this.renderTabs_()}\n        <div className=\"ContentArea\">\n          {React.Children.toArray(this.props.children).map((child, i) => {\n            const active = i === this.state.activeTab;\n            return (\n              <div\n                key={i}\n                className={`Content ${active ? 'Active' : 'Inactive'}`}\n              >\n                {child}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderTabs_() {\n    return (\n      <div className=\"TabStrip\">\n        {this.props.tabs.map((tab, i) => {\n          const active = this.state.activeTab === i;\n          return (\n            <div\n              key={tab.key + tab.title}\n              className={`${active ? 'Tab Active' : 'Tab Inactive'}\n                          ${tab.mutable ? 'Removable' : 'Permanent'}`}\n              onClick={_ => this.setActiveTab_(i)}\n            >\n              <EditableLabel\n                enabled={tab.mutable && active}\n                value={tab.title}\n                onChange={tab.onRename ?? (() => ({}))}\n              />\n              {tab.mutable && (\n                <button\n                  className=\"RemoveButton\"\n                  onClick={e => {\n                    if (tab.onClose) {\n                      tab.onClose();\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  setActiveTab_(tab: number) {\n    this.setState({ activeTab: tab });\n  }\n}\n","import './Editor.css';\n\nimport React from 'react';\n\nimport { Blueprint } from '../gpu/Blueprint';\nimport { BUILTIN_UNIFORMS_WGSL } from '../gpu/BuiltinUniforms';\nimport { ShaderCompilationResults } from '../gpu/Program';\nimport { BlueprintEditor } from './BlueprintEditor';\nimport { CodeEditor } from './CodeEditor';\nimport { TabContainer } from './TabContainer';\n\ninterface Props {\n  blueprint: Blueprint;\n  onBlueprintChange: () => void;\n\n  compilationResults: ShaderCompilationResults;\n\n  codeMirrorTheme: string;\n}\n\nexport const Editor = (props: Props) => {\n  const removeShader = (id: string) => {\n    delete props.blueprint.shaders[id];\n    props.onBlueprintChange();\n  };\n\n  const renameShader = (id: string, newName: string) => {\n    props.blueprint.shaders[id].name = newName;\n    props.onBlueprintChange();\n  };\n\n  const refreshEditor = (ref: React.RefObject<CodeEditor>) => {\n    if (ref.current) {\n      ref.current.refresh();\n    }\n  };\n\n  const shaders = Object.entries(props.blueprint.shaders);\n  const uniformsRef: React.RefObject<CodeEditor> = React.createRef();\n  const refs: React.RefObject<CodeEditor>[] = shaders.map(() =>\n    React.createRef()\n  );\n\n  return (\n    <div className=\"Editor\">\n      <TabContainer\n        tabs={[\n          { key: 'Blueprint', title: 'Blueprint', mutable: false },\n          {\n            key: 'Uniforms',\n            title: 'Uniforms',\n            mutable: false,\n            onActivate: () => {\n              refreshEditor(uniformsRef);\n            },\n          },\n          ...shaders.map(([id, shader], index) => ({\n            key: id,\n            title: shader.name,\n            mutable: true,\n            onActivate: () => {\n              refreshEditor(refs[index]);\n            },\n            onClose: () => removeShader(id),\n            onRename: (newName: string) => renameShader(id, newName),\n          })),\n        ]}\n      >\n        <BlueprintEditor\n          blueprint={props.blueprint}\n          onChange={props.onBlueprintChange}\n        />\n        <CodeEditor\n          ref={uniformsRef}\n          key=\"Uniforms\"\n          contents={BUILTIN_UNIFORMS_WGSL}\n          mutable={false}\n          onChange={() => ({})}\n          theme={props.codeMirrorTheme}\n        />\n        {shaders.map(([id, shader], index) => (\n          <CodeEditor\n            key={id}\n            ref={refs[index]}\n            compilationMessages={props.compilationResults.get(shader.uuid)}\n            contents={shader.code}\n            mutable={true}\n            onChange={code => {\n              shader.code = code;\n              props.onBlueprintChange();\n            }}\n            theme={props.codeMirrorTheme}\n          />\n        ))}\n      </TabContainer>\n    </div>\n  );\n};\n","import './App.css';\n\nimport React from 'react';\n\nimport { LocalPersistent } from './base/LocalPersistent';\nimport { deepCopy } from './base/Util';\nimport { Blueprint, canonicalize } from './gpu/Blueprint';\nimport { FrameProducer } from './gpu/FrameProducer';\nimport { ShaderCompilationResults } from './gpu/Program';\nimport { ControlPanel } from './ui/ControlPanel';\nimport { Display, DisplayConfig } from './ui/Display';\nimport { Editor } from './ui/Editor';\nimport { AppState } from './AppState';\n\ninterface Props {\n  appState: LocalPersistent<AppState>;\n}\n\ninterface State extends AppState {\n  compilationResults: ShaderCompilationResults;\n}\n\nclass App extends React.Component<Props, State> {\n  private frameProducer_: FrameProducer;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      ...this.props.appState.value,\n      compilationResults: new Map(),\n    };\n\n    canonicalize(this.state.blueprint);\n\n    this.frameProducer_ = new FrameProducer();\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  }\n\n  componentDidMount() {\n    this.frameProducer_.onShadersCompiled = this.onShadersCompiled_;\n  }\n\n  componentDidUpdate() {\n    this.props.appState.value = this.state;\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  }\n\n  componentWillUnmount() {\n    this.frameProducer_.stop();\n  }\n\n  onDisplayConfigChange = (change: Partial<DisplayConfig>) => {\n    this.setState((state, props) => {\n      return {\n        displayConfig: Object.assign({ ...state.displayConfig }, change),\n      };\n    });\n  };\n\n  onFullscreenChange_ = () => {\n    this.frameProducer_.reconfigure();\n  };\n\n  onBlueprintChange_ = () => {\n    this.frameProducer_.setBlueprint(this.state.blueprint);\n  };\n\n  onShadersCompiled_ = (compilationResults: ShaderCompilationResults) => {\n    this.setState({ compilationResults });\n  };\n\n  onSaveBlueprint_ = (name: string) => {\n    this.setState((state, props) => ({\n      savedBlueprints: {\n        ...state.savedBlueprints,\n        [name]: deepCopy(state.blueprint),\n      },\n    }));\n  };\n\n  onLoadBlueprint_ = (name: string) => {\n    const blueprint = deepCopy(this.state.savedBlueprints[name]);\n    if (!blueprint) {\n      return;\n    }\n\n    canonicalize(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onImportBlueprint_ = (blueprint: Blueprint) => {\n    canonicalize(blueprint);\n    this.setState({ blueprint });\n  };\n\n  onDeleteBlueprint_ = (name: string) => {\n    this.setState((state, props) => {\n      delete state.savedBlueprints[name];\n      return { savedBlueprints: state.savedBlueprints };\n    });\n  };\n\n  onCodeMirrorThemeChange_ = (name: string) => {\n    this.setState({ codeMirrorTheme: name });\n  };\n\n  render() {\n    const renderDisplay = (canvas: HTMLCanvasElement) => {\n      let resolution: { width: number; height: number };\n      const config = this.state.displayConfig;\n      if (config.resolution.mode === 'pixel') {\n        const pixelSize =\n          config.resolution.pixelSize! >= 1 ? config.resolution.pixelSize! : 1;\n        resolution = {\n          width: canvas.clientWidth / pixelSize,\n          height: canvas.clientHeight / pixelSize,\n        };\n      } else {\n        resolution = { ...config.resolution.framebufferSize! };\n      }\n\n      this.frameProducer_.render(canvas, resolution);\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-title\">WebGPU Playground</div>\n        </div>\n        <div className=\"App-top\">\n          <div className=\"App-canvas\">\n            <Display render={renderDisplay} config={this.state.displayConfig} />\n          </div>\n          <div className=\"App-editor\">\n            <Editor\n              compilationResults={this.state.compilationResults}\n              blueprint={this.state.blueprint}\n              onBlueprintChange={this.onBlueprintChange_}\n              codeMirrorTheme={this.state.codeMirrorTheme}\n            />\n          </div>\n        </div>\n        <div className=\"App-bottom\">\n          <ControlPanel\n            blueprint={this.state.blueprint}\n            displayConfig={this.state.displayConfig}\n            onDisplayConfigChange={this.onDisplayConfigChange}\n            savedBlueprints={this.state.savedBlueprints}\n            onSaveBlueprint={this.onSaveBlueprint_}\n            onLoadBlueprint={this.onLoadBlueprint_}\n            onImportBlueprint={this.onImportBlueprint_}\n            onDeleteBlueprint={this.onDeleteBlueprint_}\n            codeMirrorTheme={this.state.codeMirrorTheme}\n            onCodeMirrorThemeChange={this.onCodeMirrorThemeChange_}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { Blueprint } from './gpu/Blueprint';\nimport { BASIC } from './presets/Basic';\nimport { BOIDS } from './presets/Boids';\nimport { INSTANCES } from './presets/Instances';\nimport { DisplayConfig } from './ui/Display';\n\nexport interface AppState {\n  blueprint: Blueprint;\n  savedBlueprints: Record<string, Blueprint>;\n  displayConfig: DisplayConfig;\n  codeMirrorTheme: string;\n}\n\nexport const DEFAULT_APP_STATE: AppState = {\n  blueprint: {\n    nodes: {},\n    shaders: {},\n  },\n  savedBlueprints: {\n    Basic: BASIC,\n    Boids: BOIDS,\n    Instances: INSTANCES,\n  },\n  displayConfig: {\n    aspect: '1:1',\n    resolution: { mode: 'pixel', pixelSize: 1 },\n  },\n  codeMirrorTheme: 'paraiso-dark',\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u);\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u);\n  return vec4<f32>(x, y, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx +\n                            vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const BASIC: Blueprint = {\n  nodes: {\n    render1: {\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 1,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  },\n  shaders: {\n    vertex1: {\n      name: 'Vertex',\n      uuid: '4f57e815-8d09-46f6-b0ca-3e09c83e3ee1',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'Fragment',\n      uuid: '9328f39e-8906-4736-bd3a-c8bc31b39c6f',\n      code: FRAGMENT,\n    },\n  },\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nexport const BOIDS: Blueprint = {\n  nodes: {\n    compute1: {\n      name: 'first update',\n      type: 'compute',\n      position: {\n        x: 223,\n        y: 438,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 2000,\n        y: 1,\n        z: 1,\n      },\n    },\n    buffer1: {\n      name: 'buffer1',\n      type: 'buffer',\n      uuid: '483d5c60-26ae-47c9-b173-ea2177a101cb',\n      position: {\n        x: -55,\n        y: -35,\n      },\n      size: 32000,\n      init: 'random-floats',\n    },\n    buffer2: {\n      name: 'buffer2',\n      type: 'buffer',\n      uuid: '0e9b3cd4-7694-44ad-8082-41cc4024d970',\n      position: {\n        x: 610,\n        y: 19,\n      },\n      size: 32000,\n      init: 'zero',\n    },\n    render1: {\n      name: 'render boids',\n      position: {\n        x: -262,\n        y: 374,\n      },\n      type: 'render',\n      indexed: false,\n      numVertices: 3,\n      numInstances: 1000,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n    compute2: {\n      name: 'update B',\n      type: 'compute',\n      position: {\n        x: 658,\n        y: 442,\n      },\n      shader: 'compute1',\n      entryPoint: 'main',\n      dispatchSize: {\n        x: 1000,\n        y: 1,\n        z: 1,\n      },\n    },\n    binding1a: {\n      name: '',\n      position: {\n        x: 65,\n        y: 210,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'compute1',\n    },\n    binding1b: {\n      name: '',\n      position: {\n        x: -191,\n        y: 140,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer1',\n      target: 'render1',\n    },\n    binding2: {\n      name: '',\n      position: {\n        x: 220,\n        y: 218,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer1',\n      target: 'compute2',\n    },\n    binding3: {\n      name: '',\n      position: {\n        x: 713,\n        y: 179,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage-read',\n      group: 0,\n      binding: 1,\n      source: 'buffer2',\n      target: 'compute2',\n    },\n    binding4: {\n      name: '',\n      position: {\n        x: 566,\n        y: 181,\n      },\n      type: 'connection',\n      connectionType: 'binding',\n      bindingType: 'buffer',\n      storageType: 'storage',\n      group: 0,\n      binding: 2,\n      source: 'buffer2',\n      target: 'compute1',\n    },\n    queue1: {\n      name: '',\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'render1',\n      target: 'compute1',\n      type: 'connection',\n      connectionType: 'queue',\n    },\n    queue2: {\n      name: '',\n      position: {\n        x: 100,\n        y: 100,\n      },\n      source: 'compute1',\n      target: 'compute2',\n      type: 'connection',\n      connectionType: 'queue',\n    },\n  },\n  shaders: {\n    compute1: {\n      name: 'compute',\n      uuid: '4b74d686-9fd1-4020-8a28-0388af77130c',\n      code: 'let kRule1Distance = 0.1;\\nlet kRule2Distance = 0.025;\\nlet kRule3Distance = 0.025;\\nlet kRule1Scale = 0.02;\\nlet kRule2Scale = 0.05;\\nlet kRule3Scale = 0.005;\\nlet kNumParticles = 2000u;\\n\\nstruct Particle {\\n  pos: vec2<f32>;\\n  vel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particlesA: Particles;\\n[[group(0), binding(2)]] var<storage, read_write> particlesB: Particles;\\n\\n[[stage(compute), workgroup_size(1)]]\\nfn main([[builtin(global_invocation_id)]] id: vec3<u32>) {\\n  let index = id.x;\\n  if (index >= kNumParticles) {\\n    return;\\n  }\\n\\n  var vPos = particlesA.particles[index].pos;\\n  var vVel = particlesA.particles[index].vel;\\n  var cMass = vec2<f32>(0.0, 0.0);\\n  var cVel = vec2<f32>(0.0, 0.0);\\n  var colVel = vec2<f32>(0.0, 0.0);\\n  var cMassCount = 0u;\\n  var cVelCount = 0u;\\n  var pos: vec2<f32>;\\n  var vel: vec2<f32>;\\n\\n  for (var i = 0u; i < kNumParticles; i = i + 1u) {\\n    if (i == index) {\\n      continue;\\n    }\\n    pos = particlesA.particles[i].pos.xy;\\n    vel = particlesA.particles[i].vel.xy;\\n    if (distance(pos, vPos) < kRule1Distance) {\\n      cMass = cMass + pos;\\n      cMassCount = cMassCount + 1u;\\n    }\\n    if (distance(pos, vPos) < kRule2Distance) {\\n      colVel = colVel - (pos - vPos);\\n    }\\n    if (distance(pos, vPos) < kRule3Distance) {\\n      cVel = cVel + vel;\\n      cVelCount = cVelCount + 1u;\\n    }\\n  }\\n\\n  if (cMassCount > 0u) {\\n    cMass = (cMass / vec2<f32>(f32(cMassCount), f32(cMassCount))) - vPos;\\n  }\\n\\n  if (cVelCount > 0u) {\\n    cVel = cVel / vec2<f32>(f32(cVelCount), f32(cVelCount));\\n  }\\n\\n  vVel = vVel + (cMass * kRule1Scale) + (colVel * kRule2Scale) +\\n      (cVel * kRule3Scale);\\n\\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 1.0);\\n  vPos = vPos + (vVel * builtinUniforms.timeDelta * 0.25);\\n\\n  if (vPos.x < -1.0) {\\n    vPos.x = vPos.x + 2.0;\\n  }\\n  if (vPos.x > 1.0) {\\n    vPos.x = vPos.x - 2.0;\\n  }\\n  if (vPos.y < -1.0) {\\n    vPos.y = vPos.y + 2.0;\\n  }\\n  if (vPos.y > 1.0) {\\n    vPos.y = vPos.y - 2.0;\\n  }\\n\\n  particlesB.particles[index].pos = vPos;\\n  particlesB.particles[index].vel = vVel;\\n}\\n',\n    },\n    vertex1: {\n      name: 'vertex',\n      uuid: '82e97a4c-9872-4409-959f-9335d991defe',\n      code: 'struct Particle {\\n  particlePos: vec2<f32>;\\n  particleVel: vec2<f32>;\\n};\\n\\n[[block]] struct Particles {\\n  particles: array<Particle>;\\n};\\n\\n[[group(0), binding(1)]] var<storage, read> particles: Particles;\\n\\nfn getPos(vid: u32) -> vec2<f32> {\\n  return select(\\n      vec2<f32>(-0.01, -0.02),\\n      select(vec2<f32>(0.01, -0.02), vec2<f32>(0.00, 0.02), vid >= 2u),\\n      vid >= 1u);\\n}\\n\\n[[stage(vertex)]]\\nfn main([[builtin(vertex_index)]] vid: u32,\\n        [[builtin(instance_index)]] id: u32)\\n    -> [[builtin(position)]] vec4<f32> {\\n  let angle = -atan2(particles.particles[id].particleVel.x, particles.particles[id].particleVel.y);\\n  let ppos = getPos(vid);\\n  let pos = vec2<f32>(ppos.x * cos(angle) - ppos.y * sin(angle),\\n                      ppos.x * sin(angle) + ppos.y * cos(angle));\\n  return vec4<f32>(pos + particles.particles[id].particlePos, 0.0, 1.0);\\n}\\n',\n    },\n    fragment1: {\n      name: 'fragment',\n      uuid: '0ab0fa83-44df-404b-bb0b-5d09339f0adf',\n      code: '[[stage(fragment)]]\\nfn main() -> [[location(0)]] vec4<f32> {\\n  return vec4<f32>(0.0, 1.0, 0.0, 1.0);\\n}\\n',\n    },\n  },\n};\n","import { Blueprint } from '../gpu/Blueprint';\n\nconst VERTEX = `[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] index: u32,\n        [[builtin(instance_index)]] instance: u32)\n    -> [[builtin(position)]] vec4<f32> {\n  let t = builtinUniforms.time * 6.283 / 2.0;\n  let b = 1.0 + f32(instance / 10u) * 0.5;\n  let k = 0.5 + cos(t * 3.0) * 0.2;\n  let c = k * cos(t);\n  let s = k * sin(t);\n  let xo = cos(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let yo = sin(f32(instance) * 6.283 / 10.0) * 0.5 * b;\n  let x = select(-1.0, 1.0, index >= 1u && index <= 3u) * 0.3;\n  let y = select(-1.0, 1.0, index >= 2u && index <= 4u) * 0.3;\n  return vec4<f32>(x * c - y * s + xo, x * s + y * c + yo, 0.0, 1.0);\n}\n`;\n\nconst FRAGMENT = `[[stage(fragment)]]\nfn main([[builtin(position)]] coord: vec4<f32>)\n    -> [[location(0)]] vec4<f32> {\n  let uv = coord.xy / vec2<f32>(builtinUniforms.resolution.xy);\n  let col = 0.5 + 0.5 * cos(builtinUniforms.time + uv.xyx + vec3<f32>(0.0, 20.0, 40.0));\n  return vec4<f32>(col, 1.0);\n}\n`;\n\nexport const INSTANCES: Blueprint = {\n  nodes: {\n    render1: {\n      name: 'render quad',\n      position: { x: 100, y: 100 },\n      type: 'render',\n      indexed: false,\n      numVertices: 6,\n      numInstances: 30,\n      vertexShader: 'vertex1',\n      vertexEntryPoint: 'main',\n      fragmentShader: 'fragment1',\n      fragmentEntryPoint: 'main',\n    },\n  },\n  shaders: {\n    vertex1: {\n      name: 'Vertex',\n      uuid: 'e7338e5f-92c0-4d88-938a-36e2af8266df',\n      code: VERTEX,\n    },\n    fragment1: {\n      name: 'Fragment',\n      uuid: 'a68cc9ac-da25-471f-81ec-28b44c28eef3',\n      code: FRAGMENT,\n    },\n  },\n};\n","import { Debouncer } from './Debouncer';\n\nimport localForage from 'localforage';\n\nconst DEFAULT_DEBOUNCE_MS = 100;\n\ninterface Options<Type> {\n  key: string;\n  default: Type;\n  debounceMs?: number;\n}\n\nfunction deepUpdate(target: any, source: any): any {\n  const isObject = (x: any) => typeof x === 'object' && x !== null;\n  for (const [key, value] of Object.entries(source)) {\n    if (!target.hasOwnProperty(key)) {\n      if (Array.isArray(value)) {\n        target[key] = [...value];\n      } else if (isObject(value)) {\n        target[key] = deepUpdate({}, value);\n      } else {\n        target[key] = value;\n      }\n    } else if (isObject(value) && isObject(target[key])) {\n      deepUpdate(target[key], value);\n    }\n  }\n  return target;\n}\n\nexport class LocalPersistent<Type> {\n  private key_: string;\n  private cachedValue_: Type;\n  private debouncer_: Debouncer;\n\n  constructor(key: string, initialValue: Type, debounceMs: number) {\n    this.key_ = key;\n    this.cachedValue_ = initialValue;\n    this.debouncer_ = new Debouncer(debounceMs);\n  }\n\n  set value(value: Type) {\n    this.cachedValue_ = value;\n    this.debouncer_.invoke(() => localForage.setItem(this.key_, value));\n  }\n\n  get value(): Type {\n    return this.cachedValue_;\n  }\n}\n\nfunction loadValueFromLocalStorage<Type>(key: string): null | Type {\n  const serializedValue = localStorage[key];\n  let cachedValue = null;\n  if (serializedValue) {\n    cachedValue = JSON.parse(serializedValue) ?? null;\n  }\n  if (cachedValue !== null) {\n    return cachedValue as Type;\n  }\n  return null;\n}\n\nexport async function restoreLocalPersistent<Type>(\n  options: Options<Type>\n): Promise<LocalPersistent<Type>> {\n  const asyncCachedValue = localForage.getItem(options.key);\n  const cachedLegacyValue = loadValueFromLocalStorage<Type>(options.key);\n  const cachedValue = (await asyncCachedValue) as null | Type;\n  let restoredValue: null | Partial<Type> = null;\n  if (cachedValue !== null) {\n    restoredValue = cachedValue;\n  } else {\n    restoredValue = cachedLegacyValue ?? {};\n  }\n  return new LocalPersistent<Type>(\n    options.key,\n    deepUpdate(restoredValue, options.default),\n    options.debounceMs ?? DEFAULT_DEBOUNCE_MS\n  );\n}\n","import './index.css';\n\nimport localForage from 'localforage';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './App';\nimport { AppState, DEFAULT_APP_STATE } from './AppState';\nimport { restoreLocalPersistent } from './base/LocalPersistent';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'shady',\n  version: 1,\n  storeName: 'local_state',\n});\n\nasync function init() {\n  const state = await restoreLocalPersistent<AppState>({\n    key: 'gpu-app-state',\n    default: DEFAULT_APP_STATE,\n  });\n  render(\n    <React.StrictMode>\n      <App appState={state} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n"],"sourceRoot":""}